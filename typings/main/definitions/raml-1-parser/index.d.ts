// Generated by typings
// Source: node_modules/raml-1-parser/dist/util/promise.d.ts
declare module '~raml-1-parser/dist/util/promise' {
export interface Thenable<R> {
    then<U>(onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Thenable<U>;
}
export interface Promise<R> extends Thenable<R> {
    /**
     * onFulfilled is called when/if "promise" resolves. onRejected is called when/if "promise" rejects.
     * Both are optional, if either/both are omitted the next onFulfilled/onRejected in the chain is called.
     * Both callbacks have a single parameter , the fulfillment value or rejection reason.
     * "then" returns a new promise equivalent to the value you return from onFulfilled/onRejected after being passed through Promise.resolve.
     * If an error is thrown in the callback, the returned promise rejects with that error.
     *
     * @param onFulfilled called when/if "promise" resolves
     * @param onRejected called when/if "promise" rejects
     */
    then<U>(onFulfilled?: (value: R) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
    /**
     * Sugar for promise.then(undefined, onRejected)
     *
     * @param onRejected called when/if "promise" rejects
     */
    catch<U>(onRejected?: (error: any) => U | Thenable<U>): Promise<U>;
}
}
declare module 'raml-1-parser/dist/util/promise' {
export * from '~raml-1-parser/dist/util/promise';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/raml1/jsyaml/resolversApi.d.ts
declare module '~raml-1-parser/dist/raml1/jsyaml/resolversApi' {
import pr = require('~raml-1-parser/dist/util/promise');
export type Promise<T> = pr.Promise<T>;
/**
 * Must provide either page content or error message
 */
export interface Response {
    /**
     * Page content
     */
    content?: string;
    /**
     * Error message
     */
    errorMessage?: string;
}
export interface HTTPResolver {
    /**
     * Load resource by URL synchronously
     * @param url Resource URL
     * @return Resource content in string form
     **/
    getResource(url: string): Response;
    /**
     * Load resource by URL asynchronously
     * @param url Resource URL
     * @return Resource content in string form
     **/
    getResourceAsync(url: string): Promise<Response>;
}
export interface FSResolver {
    /**
     * Load file content synchronosly
     * @param path File path
     * @return File content as string
     **/
    content(path: string): string;
    /**
     * Load file content asynchronosly
     * @param path File path
     * @return File content as string
     **/
    contentAsync(path: string): Promise<string>;
}
}
declare module 'raml-1-parser/dist/raml1/jsyaml/resolversApi' {
export * from '~raml-1-parser/dist/raml1/jsyaml/resolversApi';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/raml1/wrapped-ast/parserCoreApi.d.ts
declare module '~raml-1-parser/dist/raml1/wrapped-ast/parserCoreApi' {
import hl = require('~raml-1-parser/dist/raml1/highLevelAST');
import resolversApi = require('~raml-1-parser/dist/raml1/jsyaml/resolversApi');
export type BasicNode = hl.BasicNode;
export type ValueMetadata = hl.ValueMetadata;
export type AbstractWrapperNode = hl.AbstractWrapperNode;
export interface AttributeNode extends AbstractWrapperNode {
    /**
     * @return Underlying High Level attribute node
     **/
    highLevel(): hl.IAttribute;
    /**
     * @return Whether the element is an optional sibling of trait or resource type
     **/
    optional(): boolean;
    meta(): ValueMetadata;
    parent(): BasicNode;
    /**
     * JSON representation of the attribute value
     **/
    toJSON(): any;
}
export interface Options {
    /**
     * Module used for operations with file system
     **/
    fsResolver?: resolversApi.FSResolver;
    /**
     * Module used for operations with web
     **/
    httpResolver?: resolversApi.HTTPResolver;
    /**
     * Whether to return Api which contains errors.
     **/
    rejectOnErrors?: boolean;
    /**
     * If true, attribute defaults will be returned if no actual vale is specified in RAML code.
     * Affects only attributes.
     */
    attributeDefaults?: boolean;
}
}
declare module 'raml-1-parser/dist/raml1/wrapped-ast/parserCoreApi' {
export * from '~raml-1-parser/dist/raml1/wrapped-ast/parserCoreApi';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/raml1/artifacts/raml10parserapi.d.ts
declare module '~raml-1-parser/dist/raml1/artifacts/raml10parserapi' {
/**
 * <p>See <a href="http://raml.org">http://raml.org</a> for more information about RAML.</p>
 *
 * <p>This parser is at a beta state of development, as part of the API Workbench development cycle (<a href="http://apiworkbench.com">http://apiworkbench.com</a>).</p>
 *
 * <p><a href="https://github.com/raml-org/raml-js-parser-2/blob/master/documentation/GettingStarted.md">Getting Started Guide</a> describes the first steps with the parser.</p>
 *
 * <h2>Installation</h2>
 *
 * <pre><code>git clone https://github.com/raml-org/raml-js-parser-2
 *
 * cd raml-js-parser-2
 *
 * npm install
 *
 * node test/test.js  //here you should observe JSON representation of XKCD API in your console
 *
 * node test/testAsync.js  //same as above but in asynchronous mode
 * </code></pre>
 *
 * <h2>Usage</h2>
 *
 * <ul>
 * <li>For parser usage example refer to <code>test/test.js</code></li>
 * <li>For asynchrounous usage example refer to <code>test/testAsync.js</code></li>
 * </ul>
 **/
import hl = require('~raml-1-parser/dist/raml1/highLevelAST');
import core = require('~raml-1-parser/dist/raml1/wrapped-ast/parserCoreApi');
export interface Annotable extends core.BasicNode {
    /**
     * Most of RAML model elements may have attached annotations decribing additional meta data about this element
     **/
    annotations(): AnnotationRef[];
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): AnnotableScalarsAnnotations;
}
export interface ValueType extends core.AttributeNode {
    /**
     * @return JS representation of the node value
     **/
    value(): any;
}
export interface StringType extends ValueType {
    /**
     * @return String representation of the node value
     **/
    value(): string;
}
/**
 * This type currently serves both for absolute and relative urls
 **/
export interface UriTemplate extends StringType {
}
/**
 * This  type describes relative uri templates
 **/
export interface RelativeUriString extends UriTemplate {
}
/**
 * This  type describes absolute uri templates
 **/
export interface FullUriTemplateString extends UriTemplate {
}
export interface StatusCodeString extends StringType {
}
/**
 * This  type describes fixed uris
 **/
export interface FixedUriString extends StringType {
}
export interface ContentType extends StringType {
}
/**
 * [GitHub Flavored Markdown](https://help.github.com/articles/github-flavored-markdown/)
 **/
export interface MarkdownString extends StringType {
}
/**
 * Schema at this moment only two subtypes are supported (json schema and xsd)
 **/
export interface SchemaString extends StringType {
}
/**
 * This sub type of the string represents mime types
 **/
export interface MimeType extends StringType {
}
export interface AnyType extends ValueType {
}
export interface NumberType extends ValueType {
    /**
     * @return Number representation of the node value
     **/
    value(): number;
}
export interface IntegerType extends ValueType {
}
export interface NullType extends ValueType {
}
export interface TimeOnlyType extends ValueType {
}
export interface DateOnlyType extends ValueType {
}
export interface DateTimeOnlyType extends ValueType {
}
export interface DateTimeType extends ValueType {
}
export interface FileType extends ValueType {
}
export interface BooleanType extends ValueType {
    /**
     * @return Boolean representation of the node value
     **/
    value(): boolean;
}
/**
 * Elements to which this Annotation can be applied (enum)
 **/
export interface AnnotationTarget extends ValueType {
}
export interface Reference extends core.AttributeNode {
    /**
     * Returns a structured object if the reference point to one.
     **/
    structuredValue(): TypeInstance;
    /**
     * Returns name of referenced object
     **/
    name(): string;
    /**
     * @return StructuredValue object representing the node value
     **/
    value(): hl.IStructuredValue;
}
export interface TypeInstance {
    /**
     * Array of instance properties
     **/
    properties(): TypeInstanceProperty[];
    /**
     * Whether the type is scalar
     **/
    isScalar(): boolean;
    /**
     * For instances of scalar types returns scalar value
     **/
    value(): any;
    /**
     * Indicates whether the instance is array
     **/
    isArray(): boolean;
    /**
     * Returns components of array instances
     **/
    items(): TypeInstance[];
}
export interface TypeInstanceProperty {
    /**
     * Property name
     **/
    name(): string;
    /**
     * Property value
     **/
    value(): TypeInstance;
    /**
     * Array of values if property value is array
     **/
    values(): TypeInstance[];
    /**
     * Whether property has array as value
     **/
    isArray(): boolean;
}
export interface TraitRef extends Reference {
    /**
     * Returns referenced trait
     **/
    trait(): Trait;
}
export interface Operation extends Annotable {
    /**
     * An APIs resources MAY be filtered (to return a subset of results) or altered (such as transforming  a response body from JSON to XML format) by the use of query strings. If the resource or its method supports a query string, the query string MUST be defined by the queryParameters property
     **/
    queryParameters(): TypeDeclaration[];
    /**
     * Headers that allowed at this position
     **/
    headers(): TypeDeclaration[];
    /**
     * Specifies the query string needed by this method. Mutually exclusive with queryParameters.
     **/
    queryString(): TypeDeclaration;
    /**
     * Information about the expected responses to a request
     **/
    responses(): Response[];
}
export interface TypeDeclaration extends Annotable {
    /**
     * name of the parameter
     **/
    name(): string;
    /**
     * The displayName attribute specifies the type display name. It is a friendly name used only for  display or documentation purposes. If displayName is not specified, it defaults to the element's key (the name of the property itself).
     **/
    displayName(): string;
    /**
     * When extending from a type you can define new facets (which can then be set to concrete values by subtypes).
     **/
    facets(): TypeDeclaration[];
    /**
     * Location of the parameter (can not be edited by user)
     **/
    location(): ModelLocation;
    /**
     * Kind of location
     **/
    locationKind(): LocationKind;
    /**
     * Provides default value for a property
     **/
    "default"(): any;
    /**
     * An example of this type instance represented as string or yaml map/sequence. This can be used, e.g., by documentation generators to generate sample values for an object of this type. Cannot be present if the examples property is present.
     **/
    example(): ExampleSpec;
    /**
     * An example of this type instance represented as string. This can be used, e.g., by documentation generators to generate sample values for an object of this type. Cannot be present if the example property is present.
     **/
    examples(): ExampleSpec[];
    /**
     * The repeat attribute specifies that the parameter can be repeated. If the parameter can be used multiple times, the repeat parameter value MUST be set to 'true'. Otherwise, the default value is 'false' and the parameter may not be repeated.
     **/
    repeat(): boolean;
    /**
     * Sets if property is optional or not
     **/
    required(): boolean;
    /**
     * A longer, human-friendly description of the type
     **/
    description(): MarkdownString;
    xml(): XMLFacetInfo;
    /**
     * Restrictions on where annotations of this type can be applied. If this property is specified, annotations of this type may only be applied on a property corresponding to one of the target names specified as the value of this property.
     **/
    allowedTargets(): AnnotationTarget[];
    /**
     * Whether the type represents annotation
     **/
    isAnnotation(): boolean;
    /**
     * Most of RAML model elements may have attached annotations decribing additional meta data about this element
     **/
    annotations(): AnnotationRef[];
    /**
     * Returns facets fixed by the type. Value is an object with properties named after facets fixed. Value of each property is a value of the corresponding facet.
     **/
    fixedFacets(): TypeInstance;
    /**
     * Inlined supertype definition.
     **/
    structuredType(): TypeInstance;
    /**
     * For types defined in traits or resource types returns object representation of parametrized properties
     **/
    parametrizedProperties(): TypeInstance;
    /**
     * Runtime representation of type represented by this AST node
     **/
    runtimeType(): hl.ITypeDefinition;
    /**
     * validate an instance against type
     **/
    validateInstance(value: any): string[];
    /**
     * validate an instance against type
     **/
    validateInstanceWithDetailedStatuses(value: any): any;
    /**
     * A base type which the current type extends, or more generally a type expression.
     **/
    "type"(): string[];
    /**
     * A base type which the current type extends, or more generally a type expression.
     **/
    schema(): string[];
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): TypeDeclarationScalarsAnnotations;
}
export interface ModelLocation extends core.AbstractWrapperNode {
}
export interface LocationKind extends core.AbstractWrapperNode {
}
export interface ExampleSpec extends Annotable {
    /**
     * String representation of example
     **/
    value(): any;
    /**
     * By default, examples are validated against any type declaration. Set this to false to allow examples that need not validate.
     **/
    strict(): boolean;
    /**
     * Example identifier, if specified
     **/
    name(): string;
    /**
     * An alternate, human-friendly name for the example
     **/
    displayName(): string;
    /**
     * A longer, human-friendly description of the example
     **/
    description(): MarkdownString;
    /**
     * Most of RAML model elements may have attached annotations decribing additional meta data about this element
     **/
    annotations(): AnnotationRef[];
    /**
     * Returns object representation of example, if possible
     **/
    structuredValue(): TypeInstance;
}
export interface XMLFacetInfo extends Annotable {
    /**
     * If attribute is set to true, a type instance should be serialized as an XML attribute. It can only be true for scalar types.
     **/
    attribute(): boolean;
    /**
     * If wrapped is set to true, a type instance should be wrapped in its own XML element. It can not be true for scalar types and it can not be true at the same moment when attribute is true.
     **/
    wrapped(): boolean;
    /**
     * Allows to override the name of the XML element or XML attribute in it's XML representation.
     **/
    name(): string;
    /**
     * Allows to configure the name of the XML namespace.
     **/
    namespace(): string;
    /**
     * Allows to configure the prefix which will be used during serialization to XML.
     **/
    prefix(): string;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): XMLFacetInfoScalarsAnnotations;
}
/**
 * Annotable scalar properties annotations accessor
 **/
export interface AnnotableScalarsAnnotations {
    /**
     * Annotable.annotations annotations
     **/
    annotations(): AnnotationRef[][];
}
/**
 * XMLFacetInfo scalar properties annotations accessor
 **/
export interface XMLFacetInfoScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * XMLFacetInfo.attribute annotations
     **/
    attribute(): AnnotationRef[];
    /**
     * XMLFacetInfo.wrapped annotations
     **/
    wrapped(): AnnotationRef[];
    /**
     * XMLFacetInfo.name annotations
     **/
    name(): AnnotationRef[];
    /**
     * XMLFacetInfo.namespace annotations
     **/
    namespace(): AnnotationRef[];
    /**
     * XMLFacetInfo.prefix annotations
     **/
    prefix(): AnnotationRef[];
}
export interface UsesDeclaration extends Annotable {
    /**
     * Name prefix (without dot) used to refer imported declarations
     **/
    key(): string;
    /**
     * Content of the schema
     **/
    value(): string;
    /**
     * Returns the root node of the AST, uses statement refers.
     **/
    ast(): Library;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): UsesDeclarationScalarsAnnotations;
}
/**
 * UsesDeclaration scalar properties annotations accessor
 **/
export interface UsesDeclarationScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * UsesDeclaration.value annotations
     **/
    value(): AnnotationRef[];
}
export interface ArrayTypeDeclaration extends TypeDeclaration {
    /**
     * Should items in array be unique
     **/
    uniqueItems(): boolean;
    /**
     * Array component type.
     **/
    items(): TypeDeclaration;
    /**
     * Minimum amount of items in array
     **/
    minItems(): number;
    /**
     * Maximum amount of items in array
     **/
    maxItems(): number;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): ArrayTypeDeclarationScalarsAnnotations;
}
/**
 * TypeDeclaration scalar properties annotations accessor
 **/
export interface TypeDeclarationScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * TypeDeclaration.displayName annotations
     **/
    displayName(): AnnotationRef[];
    /**
     * TypeDeclaration.schema annotations
     **/
    schema(): AnnotationRef[][];
    /**
     * TypeDeclaration.type annotations
     **/
    "type"(): AnnotationRef[][];
    /**
     * TypeDeclaration.location annotations
     **/
    location(): AnnotationRef[];
    /**
     * TypeDeclaration.locationKind annotations
     **/
    locationKind(): AnnotationRef[];
    /**
     * TypeDeclaration.default annotations
     **/
    "default"(): AnnotationRef[];
    /**
     * TypeDeclaration.repeat annotations
     **/
    repeat(): AnnotationRef[];
    /**
     * TypeDeclaration.required annotations
     **/
    required(): AnnotationRef[];
    /**
     * TypeDeclaration.description annotations
     **/
    description(): AnnotationRef[];
    /**
     * TypeDeclaration.allowedTargets annotations
     **/
    allowedTargets(): AnnotationRef[][];
    /**
     * TypeDeclaration.isAnnotation annotations
     **/
    isAnnotation(): AnnotationRef[];
    /**
     * TypeDeclaration.annotations annotations
     **/
    annotations(): AnnotationRef[][];
}
/**
 * ArrayTypeDeclaration scalar properties annotations accessor
 **/
export interface ArrayTypeDeclarationScalarsAnnotations extends TypeDeclarationScalarsAnnotations {
    /**
     * ArrayTypeDeclaration.uniqueItems annotations
     **/
    uniqueItems(): AnnotationRef[];
    /**
     * ArrayTypeDeclaration.minItems annotations
     **/
    minItems(): AnnotationRef[];
    /**
     * ArrayTypeDeclaration.maxItems annotations
     **/
    maxItems(): AnnotationRef[];
}
export interface UnionTypeDeclaration extends TypeDeclaration {
}
export interface ObjectTypeDeclaration extends TypeDeclaration {
    /**
     * The properties that instances of this type may or must have.
     **/
    properties(): TypeDeclaration[];
    /**
     * The minimum number of properties allowed for instances of this type.
     **/
    minProperties(): number;
    /**
     * The maximum number of properties allowed for instances of this type.
     **/
    maxProperties(): number;
    /**
     * A Boolean that indicates if an object instance has additional properties.
     **/
    additionalProperties(): boolean;
    /**
     * JSON schema style syntax for declaring key restricted maps
     **/
    patternProperties(): TypeDeclaration[];
    /**
     * Type property name to be used as discriminator, or boolean
     **/
    discriminator(): string;
    /**
     * The value of discriminator for the type.
     **/
    discriminatorValue(): string;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): ObjectTypeDeclarationScalarsAnnotations;
}
/**
 * ObjectTypeDeclaration scalar properties annotations accessor
 **/
export interface ObjectTypeDeclarationScalarsAnnotations extends TypeDeclarationScalarsAnnotations {
    /**
     * ObjectTypeDeclaration.minProperties annotations
     **/
    minProperties(): AnnotationRef[];
    /**
     * ObjectTypeDeclaration.maxProperties annotations
     **/
    maxProperties(): AnnotationRef[];
    /**
     * ObjectTypeDeclaration.additionalProperties annotations
     **/
    additionalProperties(): AnnotationRef[];
    /**
     * ObjectTypeDeclaration.discriminator annotations
     **/
    discriminator(): AnnotationRef[];
    /**
     * ObjectTypeDeclaration.discriminatorValue annotations
     **/
    discriminatorValue(): AnnotationRef[];
}
/**
 * Value must be a string
 **/
export interface StringTypeDeclaration extends TypeDeclaration {
    /**
     * Regular expression that this string should path
     **/
    pattern(): string;
    /**
     * Minimum length of the string
     **/
    minLength(): number;
    /**
     * Maximum length of the string
     **/
    maxLength(): number;
    /**
     * (Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error.
     **/
    enum(): string[];
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): StringTypeDeclarationScalarsAnnotations;
}
/**
 * StringTypeDeclaration scalar properties annotations accessor
 **/
export interface StringTypeDeclarationScalarsAnnotations extends TypeDeclarationScalarsAnnotations {
    /**
     * StringTypeDeclaration.pattern annotations
     **/
    pattern(): AnnotationRef[];
    /**
     * StringTypeDeclaration.minLength annotations
     **/
    minLength(): AnnotationRef[];
    /**
     * StringTypeDeclaration.maxLength annotations
     **/
    maxLength(): AnnotationRef[];
    /**
     * StringTypeDeclaration.enum annotations
     **/
    enum(): AnnotationRef[][];
}
/**
 * Value must be a boolean
 **/
export interface BooleanTypeDeclaration extends TypeDeclaration {
}
/**
 * Value MUST be a number. Indicate floating point numbers as defined by YAML.
 **/
export interface NumberTypeDeclaration extends TypeDeclaration {
    /**
     * (Optional, applicable only for parameters of type number or integer) The minimum attribute specifies the parameter's minimum value.
     **/
    minimum(): number;
    /**
     * (Optional, applicable only for parameters of type number or integer) The maximum attribute specifies the parameter's maximum value.
     **/
    maximum(): number;
    /**
     * (Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error.
     **/
    enum(): string[];
    /**
     * Value format
     **/
    format(): string;
    /**
     * A numeric instance is valid against "multipleOf" if the result of the division of the instance by this keyword's value is an integer.
     **/
    multipleOf(): number;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): NumberTypeDeclarationScalarsAnnotations;
}
/**
 * Value MUST be a integer.
 **/
export interface IntegerTypeDeclaration extends NumberTypeDeclaration {
    /**
     * Value format
     **/
    format(): string;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): IntegerTypeDeclarationScalarsAnnotations;
}
/**
 * NumberTypeDeclaration scalar properties annotations accessor
 **/
export interface NumberTypeDeclarationScalarsAnnotations extends TypeDeclarationScalarsAnnotations {
    /**
     * NumberTypeDeclaration.minimum annotations
     **/
    minimum(): AnnotationRef[];
    /**
     * NumberTypeDeclaration.maximum annotations
     **/
    maximum(): AnnotationRef[];
    /**
     * NumberTypeDeclaration.enum annotations
     **/
    enum(): AnnotationRef[][];
    /**
     * NumberTypeDeclaration.format annotations
     **/
    format(): AnnotationRef[];
    /**
     * NumberTypeDeclaration.multipleOf annotations
     **/
    multipleOf(): AnnotationRef[];
}
/**
 * IntegerTypeDeclaration scalar properties annotations accessor
 **/
export interface IntegerTypeDeclarationScalarsAnnotations extends NumberTypeDeclarationScalarsAnnotations {
    /**
     * IntegerTypeDeclaration.format annotations
     **/
    format(): AnnotationRef[];
}
/**
 * the "full-date" notation of RFC3339, namely yyyy-mm-dd (no implications about time or timezone-offset)
 **/
export interface DateOnlyTypeDeclaration extends TypeDeclaration {
}
/**
 * the "partial-time" notation of RFC3339, namely hh:mm:ss[.ff...] (no implications about date or timezone-offset)
 **/
export interface TimeOnlyTypeDeclaration extends TypeDeclaration {
}
/**
 * combined date-only and time-only with a separator of "T", namely yyyy-mm-ddThh:mm:ss[.ff...] (no implications about timezone-offset)
 **/
export interface DateTimeOnlyTypeDeclaration extends TypeDeclaration {
}
/**
 * a timestamp, either in the "date-time" notation of RFC3339, if format is omitted or is set to rfc3339, or in the format defined in RFC2616, if format is set to rfc2616.
 **/
export interface DateTimeTypeDeclaration extends TypeDeclaration {
    /**
     * Format used for this date time rfc3339 or rfc2616
     **/
    format(): string;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): DateTimeTypeDeclarationScalarsAnnotations;
}
/**
 * DateTimeTypeDeclaration scalar properties annotations accessor
 **/
export interface DateTimeTypeDeclarationScalarsAnnotations extends TypeDeclarationScalarsAnnotations {
    /**
     * DateTimeTypeDeclaration.format annotations
     **/
    format(): AnnotationRef[];
}
/**
 * Value MUST be a string representation of a date as defined in RFC2616 Section 3.3, or according to specified date format
 **/
export interface DateTypeDeclaration extends TypeDeclaration {
}
/**
 * (Applicable only to Form properties) Value is a file. Client generators SHOULD use this type to handle file uploads correctly.
 **/
export interface FileTypeDeclaration extends TypeDeclaration {
    /**
     * It should also include a new property: fileTypes, which should be a list of valid content-type strings for the file. The file type * /* should be a valid value.
     **/
    fileTypes(): ContentType[];
    /**
     * The minLength attribute specifies the parameter value's minimum number of bytes.
     **/
    minLength(): number;
    /**
     * The maxLength attribute specifies the parameter value's maximum number of bytes.
     **/
    maxLength(): number;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): FileTypeDeclarationScalarsAnnotations;
}
/**
 * FileTypeDeclaration scalar properties annotations accessor
 **/
export interface FileTypeDeclarationScalarsAnnotations extends TypeDeclarationScalarsAnnotations {
    /**
     * FileTypeDeclaration.fileTypes annotations
     **/
    fileTypes(): AnnotationRef[][];
    /**
     * FileTypeDeclaration.minLength annotations
     **/
    minLength(): AnnotationRef[];
    /**
     * FileTypeDeclaration.maxLength annotations
     **/
    maxLength(): AnnotationRef[];
}
export interface Response extends Annotable {
    /**
     * Responses MUST be a map of one or more HTTP status codes, where each status code itself is a map that describes that status code.
     **/
    code(): StatusCodeString;
    /**
     * Detailed information about any response headers returned by this method
     **/
    headers(): TypeDeclaration[];
    /**
     * The body of the response: a body declaration
     **/
    body(): TypeDeclaration[];
    /**
     * A longer, human-friendly description of the response
     **/
    description(): MarkdownString;
    /**
     * Most of RAML model elements may have attached annotations decribing additional meta data about this element
     **/
    annotations(): AnnotationRef[];
    /**
     * true for codes < 400 and false otherwise
     **/
    isOkRange(): boolean;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): ResponseScalarsAnnotations;
}
/**
 * Response scalar properties annotations accessor
 **/
export interface ResponseScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * Response.description annotations
     **/
    description(): AnnotationRef[];
    /**
     * Response.annotations annotations
     **/
    annotations(): AnnotationRef[][];
}
export interface SecuritySchemePart extends Operation {
    /**
     * Annotations to be applied to this security scheme part. Annotations are any property whose key begins with "(" and ends with ")" and whose name (the part between the beginning and ending parentheses) is a declared annotation name.
     **/
    annotations(): AnnotationRef[];
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): SecuritySchemePartScalarsAnnotations;
}
/**
 * SecuritySchemePart scalar properties annotations accessor
 **/
export interface SecuritySchemePartScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * SecuritySchemePart.annotations annotations
     **/
    annotations(): AnnotationRef[][];
}
export interface MethodBase extends Operation {
    /**
     * Some method verbs expect the resource to be sent as a request body. For example, to create a resource, the request must include the details of the resource to create. Resources CAN have alternate representations. For example, an API might support both JSON and XML representations. A method's body is defined in the body property as a hashmap, in which the key MUST be a valid media type.
     **/
    body(): TypeDeclaration[];
    /**
     * A method can override the protocols specified in the resource or at the API root, by employing this property.
     **/
    protocols(): string[];
    /**
     * Instantiation of applyed traits
     **/
    is(): TraitRef[];
    /**
     * securityScheme may also be applied to a resource by using the securedBy key, which is equivalent to applying the securityScheme to all methods that may be declared, explicitly or implicitly, by defining the resourceTypes or traits property for that resource. To indicate that the method may be called without applying any securityScheme, the method may be annotated with the null securityScheme.
     **/
    securedBy(): SecuritySchemeRef[];
    description(): MarkdownString;
    displayName(): string;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): MethodBaseScalarsAnnotations;
}
export interface SecuritySchemeRef extends Reference {
    /**
     * Returns the name of security scheme, this reference refers to.
     **/
    securitySchemeName(): string;
    /**
     * Returns AST node of security scheme, this reference refers to, or null.
     **/
    securityScheme(): AbstractSecurityScheme;
}
/**
 * Declares globally referable security scheme definition
 **/
export interface AbstractSecurityScheme extends Annotable {
    /**
     * Name of the security scheme
     **/
    name(): string;
    /**
     * The securitySchemes property MUST be used to specify an API's security mechanisms, including the required settings and the authentication methods that the API supports. one authentication method is allowed if the API supports them.
     **/
    "type"(): string;
    /**
     * The description MAY be used to describe a securityScheme.
     **/
    description(): MarkdownString;
    /**
     * A description of the request components related to Security that are determined by the scheme: the headers, query parameters or responses. As a best practice, even for standard security schemes, API designers SHOULD describe these properties of security schemes. Including the security scheme description completes an API documentation.
     **/
    describedBy(): SecuritySchemePart;
    /**
     * The displayName attribute specifies the security scheme display name. It is a friendly name used only for  display or documentation purposes. If displayName is not specified, it defaults to the element's key (the name of the property itself).
     **/
    displayName(): string;
    /**
     * The settings attribute MAY be used to provide security scheme-specific information. The required attributes vary depending on the type of security scheme is being declared. It describes the minimum set of properties which any processing application MUST provide and validate if it chooses to implement the security scheme. Processing applications MAY choose to recognize other properties for things such as token lifetime, preferred cryptographic algorithms, and more.
     **/
    settings(): SecuritySchemeSettings;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): AbstractSecuritySchemeScalarsAnnotations;
}
export interface SecuritySchemeSettings extends Annotable {
}
export interface OAuth1SecuritySchemeSettings extends SecuritySchemeSettings {
    /**
     * The URI of the Temporary Credential Request endpoint as defined in RFC5849 Section 2.1
     **/
    requestTokenUri(): FixedUriString;
    /**
     * The URI of the Resource Owner Authorization endpoint as defined in RFC5849 Section 2.2
     **/
    authorizationUri(): FixedUriString;
    /**
     * The URI of the Token Request endpoint as defined in RFC5849 Section 2.3
     **/
    tokenCredentialsUri(): FixedUriString;
    /**
     * List of the signature methods used by the server. Available methods: HMAC-SHA1, RSA-SHA1, PLAINTEXT
     **/
    signatures(): string[];
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): OAuth1SecuritySchemeSettingsScalarsAnnotations;
}
/**
 * OAuth1SecuritySchemeSettings scalar properties annotations accessor
 **/
export interface OAuth1SecuritySchemeSettingsScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * OAuth1SecuritySchemeSettings.requestTokenUri annotations
     **/
    requestTokenUri(): AnnotationRef[];
    /**
     * OAuth1SecuritySchemeSettings.authorizationUri annotations
     **/
    authorizationUri(): AnnotationRef[];
    /**
     * OAuth1SecuritySchemeSettings.tokenCredentialsUri annotations
     **/
    tokenCredentialsUri(): AnnotationRef[];
    /**
     * OAuth1SecuritySchemeSettings.signatures annotations
     **/
    signatures(): AnnotationRef[][];
}
export interface OAuth2SecuritySchemeSettings extends SecuritySchemeSettings {
    /**
     * The URI of the Token Endpoint as defined in RFC6749 Section 3.2. Not required forby implicit grant type.
     **/
    accessTokenUri(): FixedUriString;
    /**
     * The URI of the Authorization Endpoint as defined in RFC6749 Section 3.1. Required forby authorization_code and implicit grant types.
     **/
    authorizationUri(): FixedUriString;
    /**
     * A list of the Authorization grants supported by the API as defined in RFC6749 Sections 4.1, 4.2, 4.3 and 4.4, can be any of: authorization_code, password, client_credentials, implicit, or any absolute url.
     **/
    authorizationGrants(): string[];
    /**
     * A list of scopes supported by the security scheme as defined in RFC6749 Section 3.3
     **/
    scopes(): string[];
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): OAuth2SecuritySchemeSettingsScalarsAnnotations;
}
/**
 * OAuth2SecuritySchemeSettings scalar properties annotations accessor
 **/
export interface OAuth2SecuritySchemeSettingsScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * OAuth2SecuritySchemeSettings.accessTokenUri annotations
     **/
    accessTokenUri(): AnnotationRef[];
    /**
     * OAuth2SecuritySchemeSettings.authorizationUri annotations
     **/
    authorizationUri(): AnnotationRef[];
    /**
     * OAuth2SecuritySchemeSettings.authorizationGrants annotations
     **/
    authorizationGrants(): AnnotationRef[][];
    /**
     * OAuth2SecuritySchemeSettings.scopes annotations
     **/
    scopes(): AnnotationRef[][];
}
/**
 * Declares globally referable security scheme definition
 **/
export interface OAuth2SecurityScheme extends AbstractSecurityScheme {
    settings(): OAuth2SecuritySchemeSettings;
}
/**
 * Declares globally referable security scheme definition
 **/
export interface OAuth1SecurityScheme extends AbstractSecurityScheme {
    settings(): OAuth1SecuritySchemeSettings;
}
/**
 * Declares globally referable security scheme definition
 **/
export interface PassThroughSecurityScheme extends AbstractSecurityScheme {
    settings(): SecuritySchemeSettings;
}
/**
 * Declares globally referable security scheme definition
 **/
export interface BasicSecurityScheme extends AbstractSecurityScheme {
}
/**
 * Declares globally referable security scheme definition
 **/
export interface DigestSecurityScheme extends AbstractSecurityScheme {
}
/**
 * Declares globally referable security scheme definition
 **/
export interface CustomSecurityScheme extends AbstractSecurityScheme {
}
/**
 * AbstractSecurityScheme scalar properties annotations accessor
 **/
export interface AbstractSecuritySchemeScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * AbstractSecurityScheme.type annotations
     **/
    "type"(): AnnotationRef[];
    /**
     * AbstractSecurityScheme.description annotations
     **/
    description(): AnnotationRef[];
    /**
     * AbstractSecurityScheme.displayName annotations
     **/
    displayName(): AnnotationRef[];
}
export interface Method extends MethodBase {
    /**
     * Method that can be called
     **/
    method(): string;
    /**
     * The displayName attribute specifies the method display name. It is a friendly name used only for  display or documentation purposes. If displayName is not specified, it defaults to the element's key (the name of the property itself).
     **/
    displayName(): string;
    /**
     * For types defined in resource types returns object representation of parametrized properties
     **/
    parametrizedProperties(): TypeInstance;
    /**
     * For methods of Resources returns parent resource. For methods of ResourceTypes returns null.
     **/
    parentResource(): Resource;
    /**
     * Api owning the resource as a sibling
     **/
    ownerApi(): Api;
    /**
     * For methods of Resources: `{parent Resource relative path} {methodName}`.
     * For methods of ResourceTypes: `{parent ResourceType name} {methodName}`.
     * For other methods throws Exception.
     **/
    methodId(): string;
    /**
     * Returns security schemes, resource or method is secured with. If no security schemes are set at resource or method level,
     * returns schemes defined with `securedBy` at API level.
     * @deprecated
     **/
    allSecuredBy(): SecuritySchemeRef[];
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): MethodScalarsAnnotations;
}
/**
 * MethodBase scalar properties annotations accessor
 **/
export interface MethodBaseScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * MethodBase.protocols annotations
     **/
    protocols(): AnnotationRef[][];
    /**
     * MethodBase.is annotations
     **/
    is(): AnnotationRef[][];
    /**
     * MethodBase.securedBy annotations
     **/
    securedBy(): AnnotationRef[][];
    /**
     * MethodBase.description annotations
     **/
    description(): AnnotationRef[];
    /**
     * MethodBase.displayName annotations
     **/
    displayName(): AnnotationRef[];
}
/**
 * Method scalar properties annotations accessor
 **/
export interface MethodScalarsAnnotations extends MethodBaseScalarsAnnotations {
    /**
     * Method.displayName annotations
     **/
    displayName(): AnnotationRef[];
}
export interface Trait extends MethodBase {
    /**
     * Name of the trait
     **/
    name(): string;
    /**
     * Instructions on how and when the trait should be used.
     **/
    usage(): string;
    /**
     * The displayName attribute specifies the trait display name. It is a friendly name used only for  display or documentation purposes. If displayName is not specified, it defaults to the element's key (the name of the property itself).
     **/
    displayName(): string;
    /**
     * Returns object representation of parametrized properties of the trait
     **/
    parametrizedProperties(): TypeInstance;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): TraitScalarsAnnotations;
}
/**
 * Trait scalar properties annotations accessor
 **/
export interface TraitScalarsAnnotations extends MethodBaseScalarsAnnotations {
    /**
     * Trait.usage annotations
     **/
    usage(): AnnotationRef[];
    /**
     * Trait.displayName annotations
     **/
    displayName(): AnnotationRef[];
}
export interface ResourceTypeRef extends Reference {
    /**
     * Returns referenced resource type
     **/
    resourceType(): ResourceType;
}
export interface ResourceBase extends Annotable {
    /**
     * Methods that are part of this resource type definition
     **/
    methods(): Method[];
    /**
     * A list of the traits to apply to all methods declared (implicitly or explicitly) for this resource. Individual methods may override this declaration
     **/
    is(): TraitRef[];
    /**
     * The resource type which this resource inherits.
     **/
    "type"(): ResourceTypeRef;
    description(): MarkdownString;
    /**
     * The security schemes that apply to all methods declared (implicitly or explicitly) for this resource.
     **/
    securedBy(): SecuritySchemeRef[];
    /**
     * Retrieve an ordered list of all uri parameters including those which are not described in the `uriParameters` node.
     * Consider a fragment of RAML specification:
     * ```yaml
     * /resource/{objectId}/{propertyId}:
     * uriParameters:
     * objectId:
     * ```
     * Here `propertyId` uri parameter is not described in the `uriParameters` node,
     * but it is among Resource.uriParameters().
     **/
    uriParameters(): TypeDeclaration[];
    /**
     * Retrieve an ordered list of all uri parameters including those which are not described in the `uriParameters` node.
     * Consider a fragment of RAML specification:
     * ```yaml
     * /resource/{objectId}/{propertyId}:
     * uriParameters:
     * objectId:
     * ```
     * Here `propertyId` uri parameter is not described in the `uriParameters` node,
     * but it is among Resource.allUriParameters().
     * @deprecated
     **/
    allUriParameters(): TypeDeclaration[];
    /**
     * Returns security schemes, resource or method is secured with. If no security schemes are set at resource or method level,
     * returns schemes defined with `securedBy` at API level.
     * @deprecated
     **/
    allSecuredBy(): SecuritySchemeRef[];
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): ResourceBaseScalarsAnnotations;
}
export interface Resource extends ResourceBase {
    /**
     * Relative URL of this resource from the parent resource
     **/
    relativeUri(): RelativeUriString;
    /**
     * The displayName attribute specifies the resource display name. It is a friendly name used only for  display or documentation purposes. If displayName is not specified, it defaults to the element's key (the name of the property itself).
     **/
    displayName(): string;
    /**
     * A nested resource is identified as any property whose name begins with a slash ("/") and is therefore treated as a relative URI.
     **/
    resources(): Resource[];
    /**
     * A longer, human-friendly description of the resource.
     **/
    description(): MarkdownString;
    /**
     * Most of RAML model elements may have attached annotations decribing additional meta data about this element
     **/
    annotations(): AnnotationRef[];
    /**
     * Path relative to API root
     **/
    completeRelativeUri(): string;
    /**
     * baseUri of owning Api concatenated with completeRelativeUri
     **/
    absoluteUri(): string;
    /**
     * Parent resource for non top level resources
     **/
    parentResource(): Resource;
    /**
     * Get child resource by its relative path
     **/
    childResource(relPath: string): Resource;
    /**
     * Get child method by its name
     **/
    childMethod(method: string): Method[];
    /**
     * Api owning the resource as a sibling
     **/
    ownerApi(): Api;
    /**
     * Retrieve an ordered list of all absolute uri parameters. Returns a union of `Api.baseUriParameters()`
     * for `Api` owning the `Resource` and `Resource.uriParameters()`.
     **/
    absoluteUriParameters(): TypeDeclaration[];
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): ResourceScalarsAnnotations;
}
/**
 * ResourceBase scalar properties annotations accessor
 **/
export interface ResourceBaseScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * ResourceBase.is annotations
     **/
    is(): AnnotationRef[][];
    /**
     * ResourceBase.type annotations
     **/
    "type"(): AnnotationRef[];
    /**
     * ResourceBase.description annotations
     **/
    description(): AnnotationRef[];
    /**
     * ResourceBase.securedBy annotations
     **/
    securedBy(): AnnotationRef[][];
}
/**
 * Resource scalar properties annotations accessor
 **/
export interface ResourceScalarsAnnotations extends ResourceBaseScalarsAnnotations {
    /**
     * Resource.displayName annotations
     **/
    displayName(): AnnotationRef[];
    /**
     * Resource.description annotations
     **/
    description(): AnnotationRef[];
    /**
     * Resource.annotations annotations
     **/
    annotations(): AnnotationRef[][];
}
export interface ResourceType extends ResourceBase {
    /**
     * The displayName attribute specifies the resource type display name. It is a friendly name used only for  display or documentation purposes. If displayName is not specified, it defaults to the element's key (the name of the property itself).
     **/
    displayName(): string;
    /**
     * Name of the resource type
     **/
    name(): string;
    /**
     * Instructions on how and when the resource type should be used.
     **/
    usage(): string;
    /**
     * Returns object representation of parametrized properties of the resource type
     **/
    parametrizedProperties(): TypeInstance;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): ResourceTypeScalarsAnnotations;
}
/**
 * ResourceType scalar properties annotations accessor
 **/
export interface ResourceTypeScalarsAnnotations extends ResourceBaseScalarsAnnotations {
    /**
     * ResourceType.displayName annotations
     **/
    displayName(): AnnotationRef[];
    /**
     * ResourceType.usage annotations
     **/
    usage(): AnnotationRef[];
}
/**
 * Annotations allow you to attach information to your API
 **/
export interface AnnotationRef extends Reference {
    /**
     * Returns referenced annotation
     **/
    annotation(): TypeDeclaration;
}
export interface DocumentationItem extends Annotable {
    /**
     * Title of documentation section
     **/
    title(): string;
    /**
     * Content of documentation section
     **/
    content(): MarkdownString;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): DocumentationItemScalarsAnnotations;
}
/**
 * DocumentationItem scalar properties annotations accessor
 **/
export interface DocumentationItemScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * DocumentationItem.title annotations
     **/
    title(): AnnotationRef[];
    /**
     * DocumentationItem.content annotations
     **/
    content(): AnnotationRef[];
}
export interface FragmentDeclaration extends Annotable {
    uses(): UsesDeclaration[];
}
export interface LibraryBase extends FragmentDeclaration {
    /**
     * Alias for the equivalent "types" property, for compatibility with RAML 0.8. Deprecated - API definitions should use the "types" property, as the "schemas" alias for that property name may be removed in a future RAML version. The "types" property allows for XML and JSON schemas.
     **/
    schemas(): TypeDeclaration[];
    /**
     * Declarations of (data) types for use within this API
     **/
    types(): TypeDeclaration[];
    /**
     * Declarations of annotation types for use by annotations
     **/
    annotationTypes(): TypeDeclaration[];
    /**
     * Declarations of security schemes for use within this API.
     **/
    securitySchemes(): AbstractSecurityScheme[];
    /**
     * Retrieve all traits including those defined in libraries
     **/
    traits(): Trait[];
    /**
     * Retrieve all traits including those defined in libraries
     * @deprecated
     **/
    allTraits(): Trait[];
    /**
     * Retrieve all resource types including those defined in libraries
     **/
    resourceTypes(): ResourceType[];
    /**
     * Retrieve all resource types including those defined in libraries
     * @deprecated
     **/
    allResourceTypes(): ResourceType[];
}
export interface Library extends LibraryBase {
    /**
     * contains description of why library exist
     **/
    usage(): string;
    /**
     * Namespace which the library is imported under
     **/
    name(): string;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): LibraryScalarsAnnotations;
}
/**
 * Library scalar properties annotations accessor
 **/
export interface LibraryScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * Library.usage annotations
     **/
    usage(): AnnotationRef[];
}
export interface Api extends LibraryBase {
    /**
     * Short plain-text label for the API
     **/
    title(): string;
    /**
     * A longer, human-friendly description of the API
     **/
    description(): MarkdownString;
    /**
     * The version of the API, e.g. 'v1'
     **/
    version(): string;
    /**
     * A URI that's to be used as the base of all the resources' URIs. Often used as the base of the URL of each resource, containing the location of the API. Can be a template URI.
     **/
    baseUri(): FullUriTemplateString;
    /**
     * The protocols supported by the API
     **/
    protocols(): string[];
    /**
     * The default media type to use for request and response bodies (payloads), e.g. "application/json"
     **/
    mediaType(): MimeType[];
    /**
     * The security schemes that apply to every resource and method in the API
     **/
    securedBy(): SecuritySchemeRef[];
    /**
     * The resources of the API, identified as relative URIs that begin with a slash (/). Every property whose key begins with a slash (/), and is either at the root of the API definition or is the child property of a resource property, is a resource property, e.g.: /users, /{groupId}, etc
     **/
    resources(): Resource[];
    /**
     * Additional overall documentation for the API
     **/
    documentation(): DocumentationItem[];
    /**
     * Most of RAML model elements may have attached annotations decribing additional meta data about this element
     **/
    annotations(): AnnotationRef[];
    /**
     * Returns RAML version. "RAML10" string is returned for RAML 1.0. "RAML08" string is returned for RAML 0.8.
     **/
    RAMLVersion(): string;
    /**
     * Equivalent API with traits and resource types expanded
     **/
    expand(): Api;
    /**
     * Get child resource by its relative path
     **/
    childResource(relPath: string): Resource;
    /**
     * Retrieve all resources of the Api
     **/
    allResources(): Resource[];
    /**
     * Retrieve an ordered list of all base uri parameters regardless of whether they are described in `baseUriParameters` or not
     * Consider a fragment of RAML specification:
     * ```yaml
     * version: v1
     * baseUri: https://{organization}.example.com/{version}/{service}
     * baseUriParameters:
     * service:
     * ```
     * Here `version` and `organization` are base uri parameters which are not described in the `baseUriParameters` node,
     * but they are among `Api.baseUriParameters()`.
     **/
    baseUriParameters(): TypeDeclaration[];
    /**
     * Retrieve an ordered list of all base uri parameters regardless of whether they are described in `baseUriParameters` or not
     * Consider a fragment of RAML specification:
     * ```yaml
     * version: v1
     * baseUri: https://{organization}.example.com/{version}/{service}
     * baseUriParameters:
     * service:
     * ```
     * Here `version` and `organization` are base uri parameters which are not described in the `baseUriParameters` node,
     * but they are among `Api.allBaseUriParameters()`.
     * @deprecated
     **/
    allBaseUriParameters(): TypeDeclaration[];
    /**
     * Protocols used by the API. Returns the `protocols` property value if it is specified.
     * Otherwise, returns protocol, specified in the base URI.
     * @deprecated
     **/
    allProtocols(): string[];
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): ApiScalarsAnnotations;
}
export interface Overlay extends Api {
    /**
     * contains description of why overlay exist
     **/
    usage(): string;
    /**
     * Location of a valid RAML API definition (or overlay or extension), the overlay is applied to.
     **/
    extends(): string;
    /**
     * Short plain-text label for the API
     **/
    title(): string;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): OverlayScalarsAnnotations;
}
/**
 * Api scalar properties annotations accessor
 **/
export interface ApiScalarsAnnotations extends AnnotableScalarsAnnotations {
    /**
     * Api.title annotations
     **/
    title(): AnnotationRef[];
    /**
     * Api.description annotations
     **/
    description(): AnnotationRef[];
    /**
     * Api.version annotations
     **/
    version(): AnnotationRef[];
    /**
     * Api.baseUri annotations
     **/
    baseUri(): AnnotationRef[];
    /**
     * Api.protocols annotations
     **/
    protocols(): AnnotationRef[][];
    /**
     * Api.mediaType annotations
     **/
    mediaType(): AnnotationRef[][];
    /**
     * Api.securedBy annotations
     **/
    securedBy(): AnnotationRef[][];
    /**
     * Api.annotations annotations
     **/
    annotations(): AnnotationRef[][];
}
/**
 * Overlay scalar properties annotations accessor
 **/
export interface OverlayScalarsAnnotations extends ApiScalarsAnnotations {
    /**
     * Overlay.usage annotations
     **/
    usage(): AnnotationRef[];
    /**
     * Overlay.extends annotations
     **/
    extends(): AnnotationRef[];
    /**
     * Overlay.title annotations
     **/
    title(): AnnotationRef[];
}
export interface Extension extends Api {
    /**
     * contains description of why extension exist
     **/
    usage(): string;
    /**
     * Location of a valid RAML API definition (or overlay or extension), the extension is applied to
     **/
    extends(): string;
    /**
     * Short plain-text label for the API
     **/
    title(): string;
    /**
     * Scalar properties annotations accessor
     **/
    scalarsAnnotations(): ExtensionScalarsAnnotations;
}
/**
 * Extension scalar properties annotations accessor
 **/
export interface ExtensionScalarsAnnotations extends ApiScalarsAnnotations {
    /**
     * Extension.usage annotations
     **/
    usage(): AnnotationRef[];
    /**
     * Extension.extends annotations
     **/
    extends(): AnnotationRef[];
    /**
     * Extension.title annotations
     **/
    title(): AnnotationRef[];
}
/**
 * Custom type guard for Api. Returns true if node is instance of Api. Returns false otherwise.
 * Also returns false for super interfaces of Api.
 */
export function isApi(node: core.AbstractWrapperNode): node is Api;
/**
 * Custom type guard for LibraryBase. Returns true if node is instance of LibraryBase. Returns false otherwise.
 * Also returns false for super interfaces of LibraryBase.
 */
export function isLibraryBase(node: core.AbstractWrapperNode): node is LibraryBase;
/**
 * Custom type guard for Annotable. Returns true if node is instance of Annotable. Returns false otherwise.
 * Also returns false for super interfaces of Annotable.
 */
export function isAnnotable(node: core.AbstractWrapperNode): node is Annotable;
/**
 * Custom type guard for AnnotationRef. Returns true if node is instance of AnnotationRef. Returns false otherwise.
 * Also returns false for super interfaces of AnnotationRef.
 */
export function isAnnotationRef(node: core.AbstractWrapperNode): node is AnnotationRef;
/**
 * Custom type guard for Reference. Returns true if node is instance of Reference. Returns false otherwise.
 * Also returns false for super interfaces of Reference.
 */
export function isReference(node: core.AbstractWrapperNode): node is Reference;
/**
 * Custom type guard for ValueType. Returns true if node is instance of ValueType. Returns false otherwise.
 * Also returns false for super interfaces of ValueType.
 */
export function isValueType(node: core.AbstractWrapperNode): node is ValueType;
/**
 * Custom type guard for StringType. Returns true if node is instance of StringType. Returns false otherwise.
 * Also returns false for super interfaces of StringType.
 */
export function isStringType(node: core.AbstractWrapperNode): node is StringType;
/**
 * Custom type guard for UriTemplate. Returns true if node is instance of UriTemplate. Returns false otherwise.
 * Also returns false for super interfaces of UriTemplate.
 */
export function isUriTemplate(node: core.AbstractWrapperNode): node is UriTemplate;
/**
 * Custom type guard for RelativeUriString. Returns true if node is instance of RelativeUriString. Returns false otherwise.
 * Also returns false for super interfaces of RelativeUriString.
 */
export function isRelativeUriString(node: core.AbstractWrapperNode): node is RelativeUriString;
/**
 * Custom type guard for FullUriTemplateString. Returns true if node is instance of FullUriTemplateString. Returns false otherwise.
 * Also returns false for super interfaces of FullUriTemplateString.
 */
export function isFullUriTemplateString(node: core.AbstractWrapperNode): node is FullUriTemplateString;
/**
 * Custom type guard for StatusCodeString. Returns true if node is instance of StatusCodeString. Returns false otherwise.
 * Also returns false for super interfaces of StatusCodeString.
 */
export function isStatusCodeString(node: core.AbstractWrapperNode): node is StatusCodeString;
/**
 * Custom type guard for FixedUriString. Returns true if node is instance of FixedUriString. Returns false otherwise.
 * Also returns false for super interfaces of FixedUriString.
 */
export function isFixedUriString(node: core.AbstractWrapperNode): node is FixedUriString;
/**
 * Custom type guard for ContentType. Returns true if node is instance of ContentType. Returns false otherwise.
 * Also returns false for super interfaces of ContentType.
 */
export function isContentType(node: core.AbstractWrapperNode): node is ContentType;
/**
 * Custom type guard for MarkdownString. Returns true if node is instance of MarkdownString. Returns false otherwise.
 * Also returns false for super interfaces of MarkdownString.
 */
export function isMarkdownString(node: core.AbstractWrapperNode): node is MarkdownString;
/**
 * Custom type guard for SchemaString. Returns true if node is instance of SchemaString. Returns false otherwise.
 * Also returns false for super interfaces of SchemaString.
 */
export function isSchemaString(node: core.AbstractWrapperNode): node is SchemaString;
/**
 * Custom type guard for MimeType. Returns true if node is instance of MimeType. Returns false otherwise.
 * Also returns false for super interfaces of MimeType.
 */
export function isMimeType(node: core.AbstractWrapperNode): node is MimeType;
/**
 * Custom type guard for AnyType. Returns true if node is instance of AnyType. Returns false otherwise.
 * Also returns false for super interfaces of AnyType.
 */
export function isAnyType(node: core.AbstractWrapperNode): node is AnyType;
/**
 * Custom type guard for NumberType. Returns true if node is instance of NumberType. Returns false otherwise.
 * Also returns false for super interfaces of NumberType.
 */
export function isNumberType(node: core.AbstractWrapperNode): node is NumberType;
/**
 * Custom type guard for IntegerType. Returns true if node is instance of IntegerType. Returns false otherwise.
 * Also returns false for super interfaces of IntegerType.
 */
export function isIntegerType(node: core.AbstractWrapperNode): node is IntegerType;
/**
 * Custom type guard for NullType. Returns true if node is instance of NullType. Returns false otherwise.
 * Also returns false for super interfaces of NullType.
 */
export function isNullType(node: core.AbstractWrapperNode): node is NullType;
/**
 * Custom type guard for TimeOnlyType. Returns true if node is instance of TimeOnlyType. Returns false otherwise.
 * Also returns false for super interfaces of TimeOnlyType.
 */
export function isTimeOnlyType(node: core.AbstractWrapperNode): node is TimeOnlyType;
/**
 * Custom type guard for DateOnlyType. Returns true if node is instance of DateOnlyType. Returns false otherwise.
 * Also returns false for super interfaces of DateOnlyType.
 */
export function isDateOnlyType(node: core.AbstractWrapperNode): node is DateOnlyType;
/**
 * Custom type guard for DateTimeOnlyType. Returns true if node is instance of DateTimeOnlyType. Returns false otherwise.
 * Also returns false for super interfaces of DateTimeOnlyType.
 */
export function isDateTimeOnlyType(node: core.AbstractWrapperNode): node is DateTimeOnlyType;
/**
 * Custom type guard for DateTimeType. Returns true if node is instance of DateTimeType. Returns false otherwise.
 * Also returns false for super interfaces of DateTimeType.
 */
export function isDateTimeType(node: core.AbstractWrapperNode): node is DateTimeType;
/**
 * Custom type guard for FileType. Returns true if node is instance of FileType. Returns false otherwise.
 * Also returns false for super interfaces of FileType.
 */
export function isFileType(node: core.AbstractWrapperNode): node is FileType;
/**
 * Custom type guard for BooleanType. Returns true if node is instance of BooleanType. Returns false otherwise.
 * Also returns false for super interfaces of BooleanType.
 */
export function isBooleanType(node: core.AbstractWrapperNode): node is BooleanType;
/**
 * Custom type guard for AnnotationTarget. Returns true if node is instance of AnnotationTarget. Returns false otherwise.
 * Also returns false for super interfaces of AnnotationTarget.
 */
export function isAnnotationTarget(node: core.AbstractWrapperNode): node is AnnotationTarget;
/**
 * Custom type guard for TraitRef. Returns true if node is instance of TraitRef. Returns false otherwise.
 * Also returns false for super interfaces of TraitRef.
 */
export function isTraitRef(node: core.AbstractWrapperNode): node is TraitRef;
/**
 * Custom type guard for Trait. Returns true if node is instance of Trait. Returns false otherwise.
 * Also returns false for super interfaces of Trait.
 */
export function isTrait(node: core.AbstractWrapperNode): node is Trait;
/**
 * Custom type guard for MethodBase. Returns true if node is instance of MethodBase. Returns false otherwise.
 * Also returns false for super interfaces of MethodBase.
 */
export function isMethodBase(node: core.AbstractWrapperNode): node is MethodBase;
/**
 * Custom type guard for Operation. Returns true if node is instance of Operation. Returns false otherwise.
 * Also returns false for super interfaces of Operation.
 */
export function isOperation(node: core.AbstractWrapperNode): node is Operation;
/**
 * Custom type guard for TypeDeclaration. Returns true if node is instance of TypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of TypeDeclaration.
 */
export function isTypeDeclaration(node: core.AbstractWrapperNode): node is TypeDeclaration;
/**
 * Custom type guard for ModelLocation. Returns true if node is instance of ModelLocation. Returns false otherwise.
 * Also returns false for super interfaces of ModelLocation.
 */
export function isModelLocation(node: core.AbstractWrapperNode): node is ModelLocation;
/**
 * Custom type guard for LocationKind. Returns true if node is instance of LocationKind. Returns false otherwise.
 * Also returns false for super interfaces of LocationKind.
 */
export function isLocationKind(node: core.AbstractWrapperNode): node is LocationKind;
/**
 * Custom type guard for ExampleSpec. Returns true if node is instance of ExampleSpec. Returns false otherwise.
 * Also returns false for super interfaces of ExampleSpec.
 */
export function isExampleSpec(node: core.AbstractWrapperNode): node is ExampleSpec;
/**
 * Custom type guard for XMLFacetInfo. Returns true if node is instance of XMLFacetInfo. Returns false otherwise.
 * Also returns false for super interfaces of XMLFacetInfo.
 */
export function isXMLFacetInfo(node: core.AbstractWrapperNode): node is XMLFacetInfo;
/**
 * Custom type guard for UsesDeclaration. Returns true if node is instance of UsesDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of UsesDeclaration.
 */
export function isUsesDeclaration(node: core.AbstractWrapperNode): node is UsesDeclaration;
/**
 * Custom type guard for ArrayTypeDeclaration. Returns true if node is instance of ArrayTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of ArrayTypeDeclaration.
 */
export function isArrayTypeDeclaration(node: core.AbstractWrapperNode): node is ArrayTypeDeclaration;
/**
 * Custom type guard for UnionTypeDeclaration. Returns true if node is instance of UnionTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of UnionTypeDeclaration.
 */
export function isUnionTypeDeclaration(node: core.AbstractWrapperNode): node is UnionTypeDeclaration;
/**
 * Custom type guard for ObjectTypeDeclaration. Returns true if node is instance of ObjectTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of ObjectTypeDeclaration.
 */
export function isObjectTypeDeclaration(node: core.AbstractWrapperNode): node is ObjectTypeDeclaration;
/**
 * Custom type guard for StringTypeDeclaration. Returns true if node is instance of StringTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of StringTypeDeclaration.
 */
export function isStringTypeDeclaration(node: core.AbstractWrapperNode): node is StringTypeDeclaration;
/**
 * Custom type guard for BooleanTypeDeclaration. Returns true if node is instance of BooleanTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of BooleanTypeDeclaration.
 */
export function isBooleanTypeDeclaration(node: core.AbstractWrapperNode): node is BooleanTypeDeclaration;
/**
 * Custom type guard for NumberTypeDeclaration. Returns true if node is instance of NumberTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of NumberTypeDeclaration.
 */
export function isNumberTypeDeclaration(node: core.AbstractWrapperNode): node is NumberTypeDeclaration;
/**
 * Custom type guard for IntegerTypeDeclaration. Returns true if node is instance of IntegerTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of IntegerTypeDeclaration.
 */
export function isIntegerTypeDeclaration(node: core.AbstractWrapperNode): node is IntegerTypeDeclaration;
/**
 * Custom type guard for DateOnlyTypeDeclaration. Returns true if node is instance of DateOnlyTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of DateOnlyTypeDeclaration.
 */
export function isDateOnlyTypeDeclaration(node: core.AbstractWrapperNode): node is DateOnlyTypeDeclaration;
/**
 * Custom type guard for TimeOnlyTypeDeclaration. Returns true if node is instance of TimeOnlyTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of TimeOnlyTypeDeclaration.
 */
export function isTimeOnlyTypeDeclaration(node: core.AbstractWrapperNode): node is TimeOnlyTypeDeclaration;
/**
 * Custom type guard for DateTimeOnlyTypeDeclaration. Returns true if node is instance of DateTimeOnlyTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of DateTimeOnlyTypeDeclaration.
 */
export function isDateTimeOnlyTypeDeclaration(node: core.AbstractWrapperNode): node is DateTimeOnlyTypeDeclaration;
/**
 * Custom type guard for DateTimeTypeDeclaration. Returns true if node is instance of DateTimeTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of DateTimeTypeDeclaration.
 */
export function isDateTimeTypeDeclaration(node: core.AbstractWrapperNode): node is DateTimeTypeDeclaration;
/**
 * Custom type guard for DateTypeDeclaration. Returns true if node is instance of DateTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of DateTypeDeclaration.
 */
export function isDateTypeDeclaration(node: core.AbstractWrapperNode): node is DateTypeDeclaration;
/**
 * Custom type guard for FileTypeDeclaration. Returns true if node is instance of FileTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of FileTypeDeclaration.
 */
export function isFileTypeDeclaration(node: core.AbstractWrapperNode): node is FileTypeDeclaration;
/**
 * Custom type guard for Response. Returns true if node is instance of Response. Returns false otherwise.
 * Also returns false for super interfaces of Response.
 */
export function isResponse(node: core.AbstractWrapperNode): node is Response;
/**
 * Custom type guard for SecuritySchemePart. Returns true if node is instance of SecuritySchemePart. Returns false otherwise.
 * Also returns false for super interfaces of SecuritySchemePart.
 */
export function isSecuritySchemePart(node: core.AbstractWrapperNode): node is SecuritySchemePart;
/**
 * Custom type guard for SecuritySchemeRef. Returns true if node is instance of SecuritySchemeRef. Returns false otherwise.
 * Also returns false for super interfaces of SecuritySchemeRef.
 */
export function isSecuritySchemeRef(node: core.AbstractWrapperNode): node is SecuritySchemeRef;
/**
 * Custom type guard for AbstractSecurityScheme. Returns true if node is instance of AbstractSecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of AbstractSecurityScheme.
 */
export function isAbstractSecurityScheme(node: core.AbstractWrapperNode): node is AbstractSecurityScheme;
/**
 * Custom type guard for SecuritySchemeSettings. Returns true if node is instance of SecuritySchemeSettings. Returns false otherwise.
 * Also returns false for super interfaces of SecuritySchemeSettings.
 */
export function isSecuritySchemeSettings(node: core.AbstractWrapperNode): node is SecuritySchemeSettings;
/**
 * Custom type guard for OAuth1SecuritySchemeSettings. Returns true if node is instance of OAuth1SecuritySchemeSettings. Returns false otherwise.
 * Also returns false for super interfaces of OAuth1SecuritySchemeSettings.
 */
export function isOAuth1SecuritySchemeSettings(node: core.AbstractWrapperNode): node is OAuth1SecuritySchemeSettings;
/**
 * Custom type guard for OAuth2SecuritySchemeSettings. Returns true if node is instance of OAuth2SecuritySchemeSettings. Returns false otherwise.
 * Also returns false for super interfaces of OAuth2SecuritySchemeSettings.
 */
export function isOAuth2SecuritySchemeSettings(node: core.AbstractWrapperNode): node is OAuth2SecuritySchemeSettings;
/**
 * Custom type guard for OAuth2SecurityScheme. Returns true if node is instance of OAuth2SecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of OAuth2SecurityScheme.
 */
export function isOAuth2SecurityScheme(node: core.AbstractWrapperNode): node is OAuth2SecurityScheme;
/**
 * Custom type guard for OAuth1SecurityScheme. Returns true if node is instance of OAuth1SecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of OAuth1SecurityScheme.
 */
export function isOAuth1SecurityScheme(node: core.AbstractWrapperNode): node is OAuth1SecurityScheme;
/**
 * Custom type guard for PassThroughSecurityScheme. Returns true if node is instance of PassThroughSecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of PassThroughSecurityScheme.
 */
export function isPassThroughSecurityScheme(node: core.AbstractWrapperNode): node is PassThroughSecurityScheme;
/**
 * Custom type guard for BasicSecurityScheme. Returns true if node is instance of BasicSecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of BasicSecurityScheme.
 */
export function isBasicSecurityScheme(node: core.AbstractWrapperNode): node is BasicSecurityScheme;
/**
 * Custom type guard for DigestSecurityScheme. Returns true if node is instance of DigestSecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of DigestSecurityScheme.
 */
export function isDigestSecurityScheme(node: core.AbstractWrapperNode): node is DigestSecurityScheme;
/**
 * Custom type guard for CustomSecurityScheme. Returns true if node is instance of CustomSecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of CustomSecurityScheme.
 */
export function isCustomSecurityScheme(node: core.AbstractWrapperNode): node is CustomSecurityScheme;
/**
 * Custom type guard for Method. Returns true if node is instance of Method. Returns false otherwise.
 * Also returns false for super interfaces of Method.
 */
export function isMethod(node: core.AbstractWrapperNode): node is Method;
/**
 * Custom type guard for ResourceTypeRef. Returns true if node is instance of ResourceTypeRef. Returns false otherwise.
 * Also returns false for super interfaces of ResourceTypeRef.
 */
export function isResourceTypeRef(node: core.AbstractWrapperNode): node is ResourceTypeRef;
/**
 * Custom type guard for ResourceType. Returns true if node is instance of ResourceType. Returns false otherwise.
 * Also returns false for super interfaces of ResourceType.
 */
export function isResourceType(node: core.AbstractWrapperNode): node is ResourceType;
/**
 * Custom type guard for ResourceBase. Returns true if node is instance of ResourceBase. Returns false otherwise.
 * Also returns false for super interfaces of ResourceBase.
 */
export function isResourceBase(node: core.AbstractWrapperNode): node is ResourceBase;
/**
 * Custom type guard for Resource. Returns true if node is instance of Resource. Returns false otherwise.
 * Also returns false for super interfaces of Resource.
 */
export function isResource(node: core.AbstractWrapperNode): node is Resource;
/**
 * Custom type guard for DocumentationItem. Returns true if node is instance of DocumentationItem. Returns false otherwise.
 * Also returns false for super interfaces of DocumentationItem.
 */
export function isDocumentationItem(node: core.AbstractWrapperNode): node is DocumentationItem;
/**
 * Custom type guard for Library. Returns true if node is instance of Library. Returns false otherwise.
 * Also returns false for super interfaces of Library.
 */
export function isLibrary(node: core.AbstractWrapperNode): node is Library;
/**
 * Custom type guard for Overlay. Returns true if node is instance of Overlay. Returns false otherwise.
 * Also returns false for super interfaces of Overlay.
 */
export function isOverlay(node: core.AbstractWrapperNode): node is Overlay;
/**
 * Custom type guard for Extension. Returns true if node is instance of Extension. Returns false otherwise.
 * Also returns false for super interfaces of Extension.
 */
export function isExtension(node: core.AbstractWrapperNode): node is Extension;
/**
 * Check if the AST node represents fragment
 */
export function isFragment(node: Trait | TypeDeclaration | ResourceType | DocumentationItem): boolean;
/**
 * Convert fragment representing node to FragmentDeclaration instance.
 */
export function asFragment(node: Trait | TypeDeclaration | ResourceType | DocumentationItem): FragmentDeclaration;
}
declare module 'raml-1-parser/dist/raml1/artifacts/raml10parserapi' {
export * from '~raml-1-parser/dist/raml1/artifacts/raml10parserapi';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/raml1/artifacts/raml08parserapi.d.ts
declare module '~raml-1-parser/dist/raml1/artifacts/raml08parserapi' {
import hl = require('~raml-1-parser/dist/raml1/highLevelAST');
import core = require('~raml-1-parser/dist/raml1/wrapped-ast/parserCoreApi');
export interface Api extends core.BasicNode {
    /**
     * The title property is a short plain text description of the RESTful API. The value SHOULD be suitable for use as a title for the contained user documentation.
     **/
    title(): string;
    /**
     * If the RAML API definition is targeted to a specific API version, the API definition MUST contain a version property. The version property is OPTIONAL and should not be used if: The API itself is not versioned. The API definition does not change between versions. The API architect can decide whether a change to user documentation elements, but no change to the API's resources, constitutes a version change. The API architect MAY use any versioning scheme so long as version numbers retain the same format. For example, 'v3', 'v3.0', and 'V3' are all allowed, but are not considered to be equal.
     **/
    version(): string;
    /**
     * (Optional during development; Required after implementation) A RESTful API's resources are defined relative to the API's base URI. The use of the baseUri field is OPTIONAL to allow describing APIs that have not yet been implemented. After the API is implemented (even a mock implementation) and can be accessed at a service endpoint, the API definition MUST contain a baseUri property. The baseUri property's value MUST conform to the URI specification RFC2396 or a Level 1 Template URI as defined in RFC6570. The baseUri property SHOULD only be used as a reference value.
     **/
    baseUri(): FullUriTemplateString;
    /**
     * URI parameters can be further defined by using the uriParameters property. The use of uriParameters is OPTIONAL. The uriParameters property MUST be a map in which each key MUST be the name of the URI parameter as defined in the baseUri property. The uriParameters CANNOT contain a key named version because it is a reserved URI parameter name. The value of the uriParameters property is itself a map that specifies  the property's attributes as named parameters
     **/
    uriParameters(): Parameter[];
    /**
     * A RESTful API can be reached HTTP, HTTPS, or both. The protocols property MAY be used to specify the protocols that an API supports. If the protocols property is not specified, the protocol specified at the baseUri property is used. The protocols property MUST be an array of strings, of values `HTTP` and/or `HTTPS`.
     **/
    protocols(): string[];
    /**
     * (Optional) The media types returned by API responses, and expected from API requests that accept a body, MAY be defaulted by specifying the mediaType property. This property is specified at the root level of the API definition. The property's value MAY be a single string with a valid media type described in the specification.
     **/
    mediaType(): MimeType;
    /**
     * To better achieve consistency and simplicity, the API definition SHOULD include an OPTIONAL schemas property in the root section. The schemas property specifies collections of schemas that could be used anywhere in the API definition. The value of the schemas property is an array of maps; in each map, the keys are the schema name, and the values are schema definitions. The schema definitions MAY be included inline or by using the RAML !include user-defined data type.
     **/
    schemas(): GlobalSchema[];
    /**
     * A list of the security schemes to apply to all methods, these must be defined in the securitySchemes declaration.
     **/
    securedBy(): SecuritySchemeRef[];
    /**
     * Security schemes that can be applied using securedBy
     **/
    securitySchemes(): AbstractSecurityScheme[];
    /**
     * Resources are identified by their relative URI, which MUST begin with a slash (/). A resource defined as a root-level property is called a top-level resource. Its property's key is the resource's URI relative to the baseUri. A resource defined as a child property of another resource is called a nested resource, and its property's key is its URI relative to its parent resource's URI. Every property whose key begins with a slash (/), and is either at the root of the API definition or is the child property of a resource property, is a resource property. The key of a resource, i.e. its relative URI, MAY consist of multiple URI path fragments separated by slashes; e.g. `/bom/items` may indicate the collection of items in a bill of materials as a single resource. However, if the individual URI path fragments are themselves resources, the API definition SHOULD use nested resources to describe this structure; e.g. if `/bom` is itself a resource then `/items` should be a nested resource of `/bom`, while `/bom/items` should not be used.
     **/
    resources(): Resource[];
    /**
     * The API definition can include a variety of documents that serve as a user guides and reference documentation for the API. Such documents can clarify how the API works or provide business context. Documentation-generators MUST include all the sections in an API definition's documentation property in the documentation output, and they MUST preserve the order in which the documentation is declared. To add user documentation to the API, include the documentation property at the root of the API definition. The documentation property MUST be an array of documents. Each document MUST contain title and content attributes, both of which are REQUIRED. If the documentation property is specified, it MUST include at least one document. Documentation-generators MUST process the content field as if it was defined using Markdown.
     **/
    documentation(): DocumentationItem[];
    /**
     * Returns AST node of security scheme, this reference refers to, or null.
     **/
    RAMLVersion(): string;
    /**
     * Equivalent API with traits and resource types expanded
     **/
    expand(): Api;
    traits(): Trait[];
    /**
     * Retrieve all traits including those defined in libraries *
     * @deprecated
     **/
    allTraits(): Trait[];
    resourceTypes(): ResourceType[];
    /**
     * Retrieve all resource types including those defined in libraries
     * @deprecated
     **/
    allResourceTypes(): ResourceType[];
    /**
     * Get child resource by its relative path
     **/
    childResource(relPath: string): Resource;
    /**
     * Retrieve all resources of the Api
     **/
    allResources(): Resource[];
    /**
     * Retrieve an ordered list of all base uri parameters regardless of whether they are described in `baseUriParameters` or not
     * Consider a fragment of RAML specification:
     * ```yaml
     * version: v1
     * baseUri: https://{organization}.example.com/{version}/{service}
     * baseUriParameters:
     * service:
     * ```
     * Here `version` and `organization` are base uri parameters which are not described in the `baseUriParameters` node,
     * but they are among `Api.baseUriParameters()`.
     **/
    baseUriParameters(): Parameter[];
    /**
     * Retrieve an ordered list of all base uri parameters regardless of whether they are described in `baseUriParameters` or not
     * Consider a fragment of RAML specification:
     * ```yaml
     * version: v1
     * baseUri: https://{organization}.example.com/{version}/{service}
     * baseUriParameters:
     * service:
     * ```
     * Here `version` and `organization` are base uri parameters which are not described in the `baseUriParameters` node,
     * Thus, they are not among `Api.baseUriParameters()`, but they are among `Api.allBaseUriParameters()`.
     * @deprecated
     **/
    allBaseUriParameters(): Parameter[];
    /**
     * Protocols used by the API. Returns the `protocols` property value if it is specified.
     * Otherwise, returns protocol, specified in the base URI.
     * @deprecated
     **/
    allProtocols(): string[];
}
export interface ValueType extends core.AttributeNode {
    /**
     * @return JS representation of the node value
     **/
    value(): any;
}
export interface AnyType extends ValueType {
}
export interface NumberType extends ValueType {
    /**
     * @return Number representation of the node value
     **/
    value(): number;
}
export interface BooleanType extends ValueType {
    /**
     * @return Boolean representation of the node value
     **/
    value(): boolean;
}
export interface Reference extends core.AttributeNode {
    /**
     * Returns a structured object if the reference point to one.
     **/
    structuredValue(): TypeInstance;
    /**
     * Returns name of referenced object
     **/
    name(): string;
    /**
     * @return StructuredValue object representing the node value
     **/
    value(): hl.IStructuredValue;
}
export interface TypeInstance {
    /**
     * Array of instance properties
     **/
    properties(): TypeInstanceProperty[];
    /**
     * Whether the type is scalar
     **/
    isScalar(): boolean;
    /**
     * For instances of scalar types returns scalar value
     **/
    value(): any;
}
export interface TypeInstanceProperty {
    /**
     * Property name
     **/
    name(): string;
    /**
     * Property value
     **/
    value(): TypeInstance;
    /**
     * Array of values if property value is array
     **/
    values(): TypeInstance[];
    /**
     * Whether property has array as value
     **/
    isArray(): boolean;
}
export interface ResourceTypeRef extends Reference {
    /**
     * Returns referenced resource type
     **/
    resourceType(): ResourceType;
}
export interface ResourceType extends core.BasicNode {
    /**
     * Name of the resource type
     **/
    name(): string;
    /**
     * Instructions on how and when the resource type should be used.
     **/
    usage(): string;
    /**
     * Methods that are part of this resource type definition
     **/
    methods(): Method[];
    /**
     * Instantiation of applyed traits
     **/
    is(): TraitRef[];
    /**
     * Instantiation of applyed resource type
     **/
    "type"(): ResourceTypeRef;
    /**
     * securityScheme may also be applied to a resource by using the securedBy key, which is equivalent to applying the securityScheme to all methods that may be declared, explicitly or implicitly, by defining the resourceTypes or traits property for that resource. To indicate that the method may be called without applying any securityScheme, the method may be annotated with the null securityScheme.
     **/
    securedBy(): SecuritySchemeRef[];
    /**
     * Uri parameters of this resource
     **/
    uriParameters(): Parameter[];
    /**
     * An alternate, human-friendly name for the resource type
     **/
    displayName(): string;
    /**
     * A resource or a method can override a base URI template's values. This is useful to restrict or change the default or parameter selection in the base URI. The baseUriParameters property MAY be used to override any or all parameters defined at the root level baseUriParameters property, as well as base URI parameters not specified at the root level.
     **/
    baseUriParameters(): Parameter[];
    /**
     * The description attribute describes the intended use or meaning of the $self. This value MAY be formatted using Markdown.
     **/
    description(): MarkdownString;
    /**
     * Returns object representation of parametrized properties of the resource type
     **/
    parametrizedProperties(): TypeInstance;
}
/**
 * Method object allows description of http methods
 **/
export interface MethodBase extends core.BasicNode {
    /**
     * Resource methods MAY have one or more responses. Responses MAY be described using the description property, and MAY include example attributes or schema properties.
     **/
    responses(): Response[];
    /**
     * Some method verbs expect the resource to be sent as a request body. For example, to create a resource, the request must include the details of the resource to create. Resources CAN have alternate representations. For example, an API might support both JSON and XML representations. A method's body is defined in the body property as a hashmap, in which the key MUST be a valid media type.
     **/
    body(): BodyLike[];
    /**
     * A method can override an API's protocols value for that single method by setting a different value for the fields.
     **/
    protocols(): string[];
    /**
     * A list of the security schemas to apply, these must be defined in the securitySchemes declaration. To indicate that the method may be called without applying any securityScheme, the method may be annotated with the null securityScheme. Security schemas may also be applied to a resource with securedBy, which is equivalent to applying the security schemas to all methods that may be declared, explicitly or implicitly, by defining the resourceTypes or traits property for that resource.
     **/
    securedBy(): SecuritySchemeRef[];
    /**
     * A resource or a method can override a base URI template's values. This is useful to restrict or change the default or parameter selection in the base URI. The baseUriParameters property MAY be used to override any or all parameters defined at the root level baseUriParameters property, as well as base URI parameters not specified at the root level.
     **/
    baseUriParameters(): Parameter[];
    /**
     * An APIs resources MAY be filtered (to return a subset of results) or altered (such as transforming a response body from JSON to XML format) by the use of query strings. If the resource or its method supports a query string, the query string MUST be defined by the queryParameters property
     **/
    queryParameters(): Parameter[];
    /**
     * Headers that allowed at this position
     **/
    headers(): Parameter[];
    description(): MarkdownString;
}
export interface Response extends core.BasicNode {
    /**
     * Responses MUST be a map of one or more HTTP status codes, where each status code itself is a map that describes that status code.
     **/
    code(): StatusCodeString;
    /**
     * An API's methods may support custom header values in responses. The custom, non-standard HTTP headers MUST be specified by the headers property. API's may include the the placeholder token {?} in a header name to indicate that any number of headers that conform to the specified format can be sent in responses. This is particularly useful for APIs that allow HTTP headers that conform to some naming convention to send arbitrary, custom data.
     **/
    headers(): Parameter[];
    /**
     * Each response MAY contain a body property, which conforms to the same structure as request body properties (see Body). Responses that can return more than one response code MAY therefore have multiple bodies defined. For APIs without a priori knowledge of the response types for their responses, `* /*` MAY be used to indicate that responses that do not matching other defined data types MUST be accepted. Processing applications MUST match the most descriptive media type first if `* /*` is used.
     **/
    body(): BodyLike[];
    /**
     * The description attribute describes the intended use or meaning of the $self. This value MAY be formatted using Markdown.
     **/
    description(): MarkdownString;
    /**
     * true for codes < 400 and false otherwise
     **/
    isOkRange(): boolean;
}
export interface StringType extends ValueType {
    /**
     * @return String representation of the node value
     **/
    value(): string;
}
export interface StatusCodeString extends StringType {
}
export interface Parameter extends core.BasicNode {
    /**
     * name of the parameter
     **/
    name(): string;
    /**
     * An alternate, human-friendly name for the parameter
     **/
    displayName(): string;
    /**
     * The type attribute specifies the primitive type of the parameter's resolved value. API clients MUST return/throw an error if the parameter's resolved value does not match the specified type. If type is not specified, it defaults to string.
     **/
    "type"(): string;
    /**
     * Location of the parameter (can not be edited by user)
     **/
    location(): ParameterLocation;
    /**
     * Set to true if parameter is required
     **/
    required(): boolean;
    /**
     * The default attribute specifies the default value to use for the property if the property is omitted or its value is not specified. This SHOULD NOT be interpreted as a requirement for the client to send the default attribute's value if there is no other value to send. Instead, the default attribute's value is the value the server uses if the client does not send a value.
     **/
    "default"(): any;
    /**
     * (Optional) The example attribute shows an example value for the property. This can be used, e.g., by documentation generators to generate sample values for the property.
     **/
    example(): string;
    /**
     * The repeat attribute specifies that the parameter can be repeated. If the parameter can be used multiple times, the repeat parameter value MUST be set to 'true'. Otherwise, the default value is 'false' and the parameter may not be repeated.
     **/
    repeat(): boolean;
    /**
     * The description attribute describes the intended use or meaning of the $self. This value MAY be formatted using Markdown.
     **/
    description(): MarkdownString;
}
export interface ParameterLocation extends core.AbstractWrapperNode {
}
/**
 * Mardown string is a string which can contain markdown as an extension this markdown should support links with RAML Pointers since 1.0
 **/
export interface MarkdownString extends StringType {
}
/**
 * Value must be a string
 **/
export interface StringTypeDeclaration extends Parameter {
    /**
     * (Optional, applicable only for parameters of type string) The pattern attribute is a regular expression that a parameter of type string MUST match. Regular expressions MUST follow the regular expression specification from ECMA 262/Perl 5. The pattern MAY be enclosed in double quotes for readability and clarity.
     **/
    pattern(): string;
    /**
     * (Optional, applicable only for parameters of type string) The enum attribute provides an enumeration of the parameter's valid values. This MUST be an array. If the enum attribute is defined, API clients and servers MUST verify that a parameter's value matches a value in the enum array. If there is no matching value, the clients and servers MUST treat this as an error.
     **/
    enum(): string[];
    /**
     * (Optional, applicable only for parameters of type string) The minLength attribute specifies the parameter value's minimum number of characters.
     **/
    minLength(): number;
    /**
     * (Optional, applicable only for parameters of type string) The maxLength attribute specifies the parameter value's maximum number of characters.
     **/
    maxLength(): number;
}
/**
 * Value must be a boolean
 **/
export interface BooleanTypeDeclaration extends Parameter {
}
/**
 * Value MUST be a number. Indicate floating point numbers as defined by YAML.
 **/
export interface NumberTypeDeclaration extends Parameter {
    /**
     * (Optional, applicable only for parameters of type number or integer) The minimum attribute specifies the parameter's minimum value.
     **/
    minimum(): number;
    /**
     * (Optional, applicable only for parameters of type number or integer) The maximum attribute specifies the parameter's maximum value.
     **/
    maximum(): number;
}
/**
 * Value MUST be a integer.
 **/
export interface IntegerTypeDeclaration extends NumberTypeDeclaration {
}
/**
 * Value MUST be a string representation of a date as defined in RFC2616 Section 3.3.
 **/
export interface DateTypeDeclaration extends Parameter {
}
/**
 * (Applicable only to Form properties) Value is a file. Client generators SHOULD use this type to handle file uploads correctly.
 **/
export interface FileTypeDeclaration extends Parameter {
}
export interface BodyLike extends core.BasicNode {
    /**
     * Mime type of the request or response body
     **/
    name(): string;
    /**
     * The structure of a request or response body MAY be further specified by the schema property under the appropriate media type. The schema key CANNOT be specified if a body's media type is application/x-www-form-urlencoded or multipart/form-data. All parsers of RAML MUST be able to interpret JSON Schema and XML Schema. Schema MAY be declared inline or in an external file. However, if the schema is sufficiently large so as to make it difficult for a person to read the API definition, or the schema is reused across multiple APIs or across multiple miles in the same API, the !include user-defined data type SHOULD be used instead of including the content inline. Alternatively, the value of the schema field MAY be the name of a schema specified in the root-level schemas property, or it MAY be declared in an external file and included by using the by using the RAML !include user-defined data type.
     **/
    schema(): SchemaString;
    /**
     * Documentation generators MUST use body properties' example attributes to generate example invocations.
     **/
    example(): ExampleString;
    /**
     * Web forms REQUIRE special encoding and custom declaration. If the API's media type is either application/x-www-form-urlencoded or multipart/form-data, the formParameters property MUST specify the name-value pairs that the API is expecting. The formParameters property is a map in which the key is the name of the web form parameter, and the value is itself a map the specifies the web form parameter's attributes.
     **/
    formParameters(): Parameter[];
    /**
     * Human readable description of the body
     **/
    description(): MarkdownString;
    /**
     * Returns schema content for the cases when schema is inlined, when schema is included, and when schema is a reference.
     **/
    schemaContent(): string;
}
/**
 * Schema at this moment only two subtypes are supported (json schema and xsd)
 **/
export interface SchemaString extends StringType {
}
/**
 * JSON schema
 **/
export interface JSonSchemaString extends SchemaString {
}
/**
 * XSD schema
 **/
export interface XMLSchemaString extends SchemaString {
}
export interface ExampleString extends StringType {
}
export interface JSONExample extends ExampleString {
}
export interface XMLExample extends ExampleString {
}
/**
 * Needed to set connection between xml related mime types and xsd schema
 **/
export interface XMLBody extends BodyLike {
    /**
     * XSD Schema
     **/
    schema(): XMLSchemaString;
}
/**
 * Needed to set connection between json related mime types and json schema
 **/
export interface JSONBody extends BodyLike {
    /**
     * JSON Schema
     **/
    schema(): JSonSchemaString;
}
export interface SecuritySchemeRef extends Reference {
    /**
     * Returns the name of security scheme, this reference refers to.
     **/
    securitySchemeName(): string;
    /**
     * Returns AST node of security scheme, this reference refers to, or null.
     **/
    securityScheme(): AbstractSecurityScheme;
}
/**
 * Declares globally referable security schema definition
 **/
export interface AbstractSecurityScheme extends core.BasicNode {
    /**
     * Name of the security scheme
     **/
    name(): string;
    /**
     * The securitySchemes property MUST be used to specify an API's security mechanisms, including the required settings and the authentication methods that the API supports. one authentication method is allowed if the API supports them.
     **/
    "type"(): string;
    /**
     * The description attribute MAY be used to describe a security schemes property.
     **/
    description(): MarkdownString;
    /**
     * A description of the request components related to Security that are determined by the scheme: the headers, query parameters or responses. As a best practice, even for standard security schemes, API designers SHOULD describe these properties of security schemes. Including the security scheme description completes an API documentation.
     **/
    describedBy(): SecuritySchemePart;
    /**
     * The settings attribute MAY be used to provide security scheme-specific information. The required attributes vary depending on the type of security scheme is being declared. It describes the minimum set of properties which any processing application MUST provide and validate if it chooses to implement the security scheme. Processing applications MAY choose to recognize other properties for things such as token lifetime, preferred cryptographic algorithms, and more.
     **/
    settings(): SecuritySchemeSettings;
}
export interface SecuritySchemePart extends MethodBase {
    /**
     * An alternate, human-friendly name for the security scheme part
     **/
    displayName(): string;
    /**
     * Instantiation of applyed traits
     **/
    is(): TraitRef[];
    /**
     * Headers that allowed at this position
     **/
    headers(): Parameter[];
    /**
     * An APIs resources MAY be filtered (to return a subset of results) or altered (such as transforming a response body from JSON to XML format) by the use of query strings. If the resource or its method supports a query string, the query string MUST be defined by the queryParameters property
     **/
    queryParameters(): Parameter[];
    /**
     * Optional array of responses, describing the possible responses that could be sent.
     **/
    responses(): Response[];
    /**
     * A longer, human-friendly description of the security scheme part
     **/
    description(): MarkdownString;
}
export interface TraitRef extends Reference {
    /**
     * Returns referenced trait
     **/
    trait(): Trait;
}
export interface Trait extends MethodBase {
    /**
     * Name of the trait
     **/
    name(): string;
    /**
     * Instructions on how and when the trait should be used.
     **/
    usage(): string;
    /**
     * An alternate, human-friendly name for the trait
     **/
    displayName(): string;
    /**
     * Returns object representation of parametrized properties of the trait
     **/
    parametrizedProperties(): TypeInstance;
}
export interface SecuritySchemeSettings extends core.BasicNode {
}
export interface OAuth1SecuritySchemeSettings extends SecuritySchemeSettings {
    /**
     * The URI of the Temporary Credential Request endpoint as defined in RFC5849 Section 2.1
     **/
    requestTokenUri(): FixedUri;
    /**
     * The URI of the Resource Owner Authorization endpoint as defined in RFC5849 Section 2.2
     **/
    authorizationUri(): FixedUri;
    /**
     * The URI of the Token Request endpoint as defined in RFC5849 Section 2.3
     **/
    tokenCredentialsUri(): FixedUri;
}
/**
 * This  type describes fixed uris
 **/
export interface FixedUri extends StringType {
}
export interface OAuth2SecuritySchemeSettings extends SecuritySchemeSettings {
    /**
     * The URI of the Token Endpoint as defined in RFC6749 Section 3.2. Not required forby implicit grant type.
     **/
    accessTokenUri(): FixedUri;
    /**
     * The URI of the Authorization Endpoint as defined in RFC6749 Section 3.1. Required forby authorization_code and implicit grant types.
     **/
    authorizationUri(): FixedUri;
    /**
     * A list of the Authorization grants supported by the API as defined in RFC6749 Sections 4.1, 4.2, 4.3 and 4.4, can be any of: authorization_code, password, client_credentials, implicit, or refresh_token.
     **/
    authorizationGrants(): string[];
    /**
     * A list of scopes supported by the security scheme as defined in RFC6749 Section 3.3
     **/
    scopes(): string[];
}
/**
 * Declares globally referable security schema definition
 **/
export interface OAuth2SecurityScheme extends AbstractSecurityScheme {
    settings(): OAuth2SecuritySchemeSettings;
}
/**
 * Declares globally referable security schema definition
 **/
export interface OAuth1SecurityScheme extends AbstractSecurityScheme {
    settings(): OAuth1SecuritySchemeSettings;
}
/**
 * Declares globally referable security schema definition
 **/
export interface BasicSecurityScheme extends AbstractSecurityScheme {
}
/**
 * Declares globally referable security schema definition
 **/
export interface DigestSecurityScheme extends AbstractSecurityScheme {
}
/**
 * Declares globally referable security schema definition
 **/
export interface CustomSecurityScheme extends AbstractSecurityScheme {
}
export interface Method extends MethodBase {
    /**
     * Method that can be called
     **/
    method(): string;
    /**
     * Instantiation of applyed traits
     **/
    is(): TraitRef[];
    /**
     * For methods of Resources returns parent resource. For methods of ResourceTypes returns null.
     **/
    parentResource(): Resource;
    /**
     * Api owning the resource as a sibling
     **/
    ownerApi(): Api;
    /**
     * For methods of Resources: `{parent Resource relative path} {methodName}`.
     * For methods of ResourceTypes: `{parent ResourceType name} {methodName}`.
     * For other methods throws Exception.
     **/
    methodId(): string;
    /**
     * Returns security schemes, resource or method is secured with. If no security schemes are set at resource or method level,
     * returns schemes defined with `securedBy` at API level.
     * @deprecated
     **/
    allSecuredBy(): SecuritySchemeRef[];
}
/**
 * This sub type of the string represents mime types
 **/
export interface MimeType extends StringType {
}
/**
 * This type currently serves both for absolute and relative urls
 **/
export interface UriTemplate extends StringType {
}
/**
 * This  type describes relative uri templates
 **/
export interface RelativeUriString extends UriTemplate {
}
/**
 * This  type describes absolute uri templates
 **/
export interface FullUriTemplateString extends UriTemplate {
}
export interface RAMLSimpleElement extends core.BasicNode {
}
export interface DocumentationItem extends RAMLSimpleElement {
    /**
     * title of documentation section
     **/
    title(): string;
    /**
     * Content of documentation section
     **/
    content(): MarkdownString;
}
/**
 * Content of the schema
 **/
export interface GlobalSchema extends RAMLSimpleElement {
    /**
     * Name of the global schema, used to refer on schema content
     **/
    key(): string;
    /**
     * Content of the schema
     **/
    value(): SchemaString;
}
export interface Resource extends core.BasicNode {
    /**
     * Relative URL of this resource from the parent resource
     **/
    relativeUri(): RelativeUriString;
    /**
     * Instantiation of applyed resource type
     **/
    "type"(): ResourceTypeRef;
    /**
     * Instantiation of applyed traits
     **/
    is(): TraitRef[];
    /**
     * securityScheme may also be applied to a resource by using the securedBy key, which is equivalent to applying the securityScheme to all methods that may be declared, explicitly or implicitly, by defining the resourceTypes or traits property for that resource. To indicate that the method may be called without applying any securityScheme, the method may be annotated with the null securityScheme.
     **/
    securedBy(): SecuritySchemeRef[];
    /**
     * Methods that can be called on this resource
     **/
    methods(): Method[];
    /**
     * Children resources
     **/
    resources(): Resource[];
    /**
     * An alternate, human-friendly name for the resource
     **/
    displayName(): string;
    /**
     * A resource or a method can override a base URI template's values. This is useful to restrict or change the default or parameter selection in the base URI. The baseUriParameters property MAY be used to override any or all parameters defined at the root level baseUriParameters property, as well as base URI parameters not specified at the root level.
     **/
    baseUriParameters(): Parameter[];
    /**
     * The description attribute describes the intended use or meaning of the $self. This value MAY be formatted using Markdown.
     **/
    description(): MarkdownString;
    /**
     * Path relative to API root
     **/
    completeRelativeUri(): string;
    /**
     * baseUri of owning Api concatenated with completeRelativeUri
     **/
    absoluteUri(): string;
    /**
     * Parent resource for non top level resources
     **/
    parentResource(): Resource;
    /**
     * Get child resource by its relative path
     **/
    childResource(relPath: string): Resource;
    /**
     * Get child method by its name
     **/
    childMethod(method: string): Method[];
    /**
     * Api owning the resource as a sibling
     **/
    ownerApi(): Api;
    /**
     * Retrieve an ordered list of all uri parameters including those which are not described in the `uriParameters` node.
     * Consider a fragment of RAML specification:
     * ```yaml
     * /resource/{objectId}/{propertyId}:
     * uriParameters:
     * objectId:
     * ```
     * Here `propertyId` uri parameter is not described in the `uriParameters` node,
     * but it is among Resource.uriParameters().
     **/
    uriParameters(): Parameter[];
    /**
     * Retrieve an ordered list of all uri parameters including those which are not described in the `uriParameters` node.
     * Consider a fragment of RAML specification:
     * ```yaml
     * /resource/{objectId}/{propertyId}:
     * uriParameters:
     * objectId:
     * ```
     * Here `propertyId` uri parameter is not described in the `uriParameters` node,
     * Thus, it is not among Resource.uriParameters(), but it is among Resource.allUriParameters().
     * @deprecated
     **/
    allUriParameters(): Parameter[];
    /**
     * Retrieve an ordered list of all absolute uri parameters. Returns a union of `Api.allBaseUriParameters()`
     * for `Api` owning the `Resource` and `Resource.allUriParameters()`.
     **/
    absoluteUriParameters(): Parameter[];
    /**
     * Returns security schemes, resource or method is secured with. If no security schemes are set at resource or method level,
     * returns schemes defined with `securedBy` at API level.
     * @deprecated
     **/
    allSecuredBy(): SecuritySchemeRef[];
}
/**
 * Custom type guard for Api. Returns true if node is instance of Api. Returns false otherwise.
 * Also returns false for super interfaces of Api.
 */
export function isApi(node: core.AbstractWrapperNode): node is Api;
/**
 * Custom type guard for FullUriTemplateString. Returns true if node is instance of FullUriTemplateString. Returns false otherwise.
 * Also returns false for super interfaces of FullUriTemplateString.
 */
export function isFullUriTemplateString(node: core.AbstractWrapperNode): node is FullUriTemplateString;
/**
 * Custom type guard for UriTemplate. Returns true if node is instance of UriTemplate. Returns false otherwise.
 * Also returns false for super interfaces of UriTemplate.
 */
export function isUriTemplate(node: core.AbstractWrapperNode): node is UriTemplate;
/**
 * Custom type guard for StringType. Returns true if node is instance of StringType. Returns false otherwise.
 * Also returns false for super interfaces of StringType.
 */
export function isStringType(node: core.AbstractWrapperNode): node is StringType;
/**
 * Custom type guard for ValueType. Returns true if node is instance of ValueType. Returns false otherwise.
 * Also returns false for super interfaces of ValueType.
 */
export function isValueType(node: core.AbstractWrapperNode): node is ValueType;
/**
 * Custom type guard for AnyType. Returns true if node is instance of AnyType. Returns false otherwise.
 * Also returns false for super interfaces of AnyType.
 */
export function isAnyType(node: core.AbstractWrapperNode): node is AnyType;
/**
 * Custom type guard for NumberType. Returns true if node is instance of NumberType. Returns false otherwise.
 * Also returns false for super interfaces of NumberType.
 */
export function isNumberType(node: core.AbstractWrapperNode): node is NumberType;
/**
 * Custom type guard for BooleanType. Returns true if node is instance of BooleanType. Returns false otherwise.
 * Also returns false for super interfaces of BooleanType.
 */
export function isBooleanType(node: core.AbstractWrapperNode): node is BooleanType;
/**
 * Custom type guard for Reference. Returns true if node is instance of Reference. Returns false otherwise.
 * Also returns false for super interfaces of Reference.
 */
export function isReference(node: core.AbstractWrapperNode): node is Reference;
/**
 * Custom type guard for ResourceTypeRef. Returns true if node is instance of ResourceTypeRef. Returns false otherwise.
 * Also returns false for super interfaces of ResourceTypeRef.
 */
export function isResourceTypeRef(node: core.AbstractWrapperNode): node is ResourceTypeRef;
/**
 * Custom type guard for ResourceType. Returns true if node is instance of ResourceType. Returns false otherwise.
 * Also returns false for super interfaces of ResourceType.
 */
export function isResourceType(node: core.AbstractWrapperNode): node is ResourceType;
/**
 * Custom type guard for Method. Returns true if node is instance of Method. Returns false otherwise.
 * Also returns false for super interfaces of Method.
 */
export function isMethod(node: core.AbstractWrapperNode): node is Method;
/**
 * Custom type guard for MethodBase. Returns true if node is instance of MethodBase. Returns false otherwise.
 * Also returns false for super interfaces of MethodBase.
 */
export function isMethodBase(node: core.AbstractWrapperNode): node is MethodBase;
/**
 * Custom type guard for Response. Returns true if node is instance of Response. Returns false otherwise.
 * Also returns false for super interfaces of Response.
 */
export function isResponse(node: core.AbstractWrapperNode): node is Response;
/**
 * Custom type guard for StatusCodeString. Returns true if node is instance of StatusCodeString. Returns false otherwise.
 * Also returns false for super interfaces of StatusCodeString.
 */
export function isStatusCodeString(node: core.AbstractWrapperNode): node is StatusCodeString;
/**
 * Custom type guard for Parameter. Returns true if node is instance of Parameter. Returns false otherwise.
 * Also returns false for super interfaces of Parameter.
 */
export function isParameter(node: core.AbstractWrapperNode): node is Parameter;
/**
 * Custom type guard for ParameterLocation. Returns true if node is instance of ParameterLocation. Returns false otherwise.
 * Also returns false for super interfaces of ParameterLocation.
 */
export function isParameterLocation(node: core.AbstractWrapperNode): node is ParameterLocation;
/**
 * Custom type guard for MarkdownString. Returns true if node is instance of MarkdownString. Returns false otherwise.
 * Also returns false for super interfaces of MarkdownString.
 */
export function isMarkdownString(node: core.AbstractWrapperNode): node is MarkdownString;
/**
 * Custom type guard for StringTypeDeclaration. Returns true if node is instance of StringTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of StringTypeDeclaration.
 */
export function isStringTypeDeclaration(node: core.AbstractWrapperNode): node is StringTypeDeclaration;
/**
 * Custom type guard for BooleanTypeDeclaration. Returns true if node is instance of BooleanTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of BooleanTypeDeclaration.
 */
export function isBooleanTypeDeclaration(node: core.AbstractWrapperNode): node is BooleanTypeDeclaration;
/**
 * Custom type guard for NumberTypeDeclaration. Returns true if node is instance of NumberTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of NumberTypeDeclaration.
 */
export function isNumberTypeDeclaration(node: core.AbstractWrapperNode): node is NumberTypeDeclaration;
/**
 * Custom type guard for IntegerTypeDeclaration. Returns true if node is instance of IntegerTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of IntegerTypeDeclaration.
 */
export function isIntegerTypeDeclaration(node: core.AbstractWrapperNode): node is IntegerTypeDeclaration;
/**
 * Custom type guard for DateTypeDeclaration. Returns true if node is instance of DateTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of DateTypeDeclaration.
 */
export function isDateTypeDeclaration(node: core.AbstractWrapperNode): node is DateTypeDeclaration;
/**
 * Custom type guard for FileTypeDeclaration. Returns true if node is instance of FileTypeDeclaration. Returns false otherwise.
 * Also returns false for super interfaces of FileTypeDeclaration.
 */
export function isFileTypeDeclaration(node: core.AbstractWrapperNode): node is FileTypeDeclaration;
/**
 * Custom type guard for BodyLike. Returns true if node is instance of BodyLike. Returns false otherwise.
 * Also returns false for super interfaces of BodyLike.
 */
export function isBodyLike(node: core.AbstractWrapperNode): node is BodyLike;
/**
 * Custom type guard for SchemaString. Returns true if node is instance of SchemaString. Returns false otherwise.
 * Also returns false for super interfaces of SchemaString.
 */
export function isSchemaString(node: core.AbstractWrapperNode): node is SchemaString;
/**
 * Custom type guard for JSonSchemaString. Returns true if node is instance of JSonSchemaString. Returns false otherwise.
 * Also returns false for super interfaces of JSonSchemaString.
 */
export function isJSonSchemaString(node: core.AbstractWrapperNode): node is JSonSchemaString;
/**
 * Custom type guard for XMLSchemaString. Returns true if node is instance of XMLSchemaString. Returns false otherwise.
 * Also returns false for super interfaces of XMLSchemaString.
 */
export function isXMLSchemaString(node: core.AbstractWrapperNode): node is XMLSchemaString;
/**
 * Custom type guard for ExampleString. Returns true if node is instance of ExampleString. Returns false otherwise.
 * Also returns false for super interfaces of ExampleString.
 */
export function isExampleString(node: core.AbstractWrapperNode): node is ExampleString;
/**
 * Custom type guard for JSONExample. Returns true if node is instance of JSONExample. Returns false otherwise.
 * Also returns false for super interfaces of JSONExample.
 */
export function isJSONExample(node: core.AbstractWrapperNode): node is JSONExample;
/**
 * Custom type guard for XMLExample. Returns true if node is instance of XMLExample. Returns false otherwise.
 * Also returns false for super interfaces of XMLExample.
 */
export function isXMLExample(node: core.AbstractWrapperNode): node is XMLExample;
/**
 * Custom type guard for XMLBody. Returns true if node is instance of XMLBody. Returns false otherwise.
 * Also returns false for super interfaces of XMLBody.
 */
export function isXMLBody(node: core.AbstractWrapperNode): node is XMLBody;
/**
 * Custom type guard for JSONBody. Returns true if node is instance of JSONBody. Returns false otherwise.
 * Also returns false for super interfaces of JSONBody.
 */
export function isJSONBody(node: core.AbstractWrapperNode): node is JSONBody;
/**
 * Custom type guard for SecuritySchemeRef. Returns true if node is instance of SecuritySchemeRef. Returns false otherwise.
 * Also returns false for super interfaces of SecuritySchemeRef.
 */
export function isSecuritySchemeRef(node: core.AbstractWrapperNode): node is SecuritySchemeRef;
/**
 * Custom type guard for AbstractSecurityScheme. Returns true if node is instance of AbstractSecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of AbstractSecurityScheme.
 */
export function isAbstractSecurityScheme(node: core.AbstractWrapperNode): node is AbstractSecurityScheme;
/**
 * Custom type guard for SecuritySchemePart. Returns true if node is instance of SecuritySchemePart. Returns false otherwise.
 * Also returns false for super interfaces of SecuritySchemePart.
 */
export function isSecuritySchemePart(node: core.AbstractWrapperNode): node is SecuritySchemePart;
/**
 * Custom type guard for TraitRef. Returns true if node is instance of TraitRef. Returns false otherwise.
 * Also returns false for super interfaces of TraitRef.
 */
export function isTraitRef(node: core.AbstractWrapperNode): node is TraitRef;
/**
 * Custom type guard for Trait. Returns true if node is instance of Trait. Returns false otherwise.
 * Also returns false for super interfaces of Trait.
 */
export function isTrait(node: core.AbstractWrapperNode): node is Trait;
/**
 * Custom type guard for SecuritySchemeSettings. Returns true if node is instance of SecuritySchemeSettings. Returns false otherwise.
 * Also returns false for super interfaces of SecuritySchemeSettings.
 */
export function isSecuritySchemeSettings(node: core.AbstractWrapperNode): node is SecuritySchemeSettings;
/**
 * Custom type guard for OAuth1SecuritySchemeSettings. Returns true if node is instance of OAuth1SecuritySchemeSettings. Returns false otherwise.
 * Also returns false for super interfaces of OAuth1SecuritySchemeSettings.
 */
export function isOAuth1SecuritySchemeSettings(node: core.AbstractWrapperNode): node is OAuth1SecuritySchemeSettings;
/**
 * Custom type guard for FixedUri. Returns true if node is instance of FixedUri. Returns false otherwise.
 * Also returns false for super interfaces of FixedUri.
 */
export function isFixedUri(node: core.AbstractWrapperNode): node is FixedUri;
/**
 * Custom type guard for OAuth2SecuritySchemeSettings. Returns true if node is instance of OAuth2SecuritySchemeSettings. Returns false otherwise.
 * Also returns false for super interfaces of OAuth2SecuritySchemeSettings.
 */
export function isOAuth2SecuritySchemeSettings(node: core.AbstractWrapperNode): node is OAuth2SecuritySchemeSettings;
/**
 * Custom type guard for OAuth2SecurityScheme. Returns true if node is instance of OAuth2SecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of OAuth2SecurityScheme.
 */
export function isOAuth2SecurityScheme(node: core.AbstractWrapperNode): node is OAuth2SecurityScheme;
/**
 * Custom type guard for OAuth1SecurityScheme. Returns true if node is instance of OAuth1SecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of OAuth1SecurityScheme.
 */
export function isOAuth1SecurityScheme(node: core.AbstractWrapperNode): node is OAuth1SecurityScheme;
/**
 * Custom type guard for BasicSecurityScheme. Returns true if node is instance of BasicSecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of BasicSecurityScheme.
 */
export function isBasicSecurityScheme(node: core.AbstractWrapperNode): node is BasicSecurityScheme;
/**
 * Custom type guard for DigestSecurityScheme. Returns true if node is instance of DigestSecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of DigestSecurityScheme.
 */
export function isDigestSecurityScheme(node: core.AbstractWrapperNode): node is DigestSecurityScheme;
/**
 * Custom type guard for CustomSecurityScheme. Returns true if node is instance of CustomSecurityScheme. Returns false otherwise.
 * Also returns false for super interfaces of CustomSecurityScheme.
 */
export function isCustomSecurityScheme(node: core.AbstractWrapperNode): node is CustomSecurityScheme;
/**
 * Custom type guard for MimeType. Returns true if node is instance of MimeType. Returns false otherwise.
 * Also returns false for super interfaces of MimeType.
 */
export function isMimeType(node: core.AbstractWrapperNode): node is MimeType;
/**
 * Custom type guard for RelativeUriString. Returns true if node is instance of RelativeUriString. Returns false otherwise.
 * Also returns false for super interfaces of RelativeUriString.
 */
export function isRelativeUriString(node: core.AbstractWrapperNode): node is RelativeUriString;
/**
 * Custom type guard for GlobalSchema. Returns true if node is instance of GlobalSchema. Returns false otherwise.
 * Also returns false for super interfaces of GlobalSchema.
 */
export function isGlobalSchema(node: core.AbstractWrapperNode): node is GlobalSchema;
/**
 * Custom type guard for RAMLSimpleElement. Returns true if node is instance of RAMLSimpleElement. Returns false otherwise.
 * Also returns false for super interfaces of RAMLSimpleElement.
 */
export function isRAMLSimpleElement(node: core.AbstractWrapperNode): node is RAMLSimpleElement;
/**
 * Custom type guard for DocumentationItem. Returns true if node is instance of DocumentationItem. Returns false otherwise.
 * Also returns false for super interfaces of DocumentationItem.
 */
export function isDocumentationItem(node: core.AbstractWrapperNode): node is DocumentationItem;
/**
 * Custom type guard for Resource. Returns true if node is instance of Resource. Returns false otherwise.
 * Also returns false for super interfaces of Resource.
 */
export function isResource(node: core.AbstractWrapperNode): node is Resource;
}
declare module 'raml-1-parser/dist/raml1/artifacts/raml08parserapi' {
export * from '~raml-1-parser/dist/raml1/artifacts/raml08parserapi';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/raml1/highLevelAST.d.ts
declare module '~raml-1-parser/dist/raml1/highLevelAST' {
import lowLevel = require('~raml-1-parser/dist/raml1/lowLevelAST');
import ds = require('~raml-1-parser~raml-definition-system');
import typeSystem = ds.rt.nominalTypes;
import rTypes = ds.rt;
export type ITypeDefinition = typeSystem.ITypeDefinition;
export type IProperty = typeSystem.IProperty;
export interface AbstractWrapperNode {
    /**
     * @hidden
     **/
    wrapperClassName(): string;
    /**
     * @return Actual name of instance interface
     **/
    kind(): string;
    /**
     * @return RAML version of the node. "RAML10" for RAML 1.0 and "RAML08" for RAML 0.8.
     */
    RAMLVersion(): string;
}
export interface SerializeOptions {
    /**
     * For root nodes additional details can be included into output. If the option is set to `true`,
     * node content is returned as value of the **specification** root property. Other root properties are:
     *
     * * **ramlVersion** version of RAML used by the specification represented by the node
     * * **type** type of the node: Api, Overlay, Extension, Library, or any other RAML type in fragments case
     * * **errors** errors of the specification represented by the node
     * @default false
     */
    rootNodeDetails?: boolean;
    /**
     * Whether to serialize metadata
     * @default true
     */
    serializeMetadata?: boolean;
    dumpSchemaContents?: boolean;
}
export interface BasicNode extends AbstractWrapperNode {
    /**
     * @return Direct ancestor in RAML hierarchy
     **/
    parent(): BasicNode;
    /**
     * @hidden
     * @return Underlying node of the High Level model
     **/
    highLevel(): IHighLevelNode;
    /**
     * @return Array of errors
     **/
    errors(): RamlParserError[];
    /**
     * @return object representing class of the node
     **/
    definition(): ITypeDefinition;
    /**
     * @return for user class instances returns object representing actual user class
     **/
    runtimeDefinition(): ITypeDefinition;
    /**
     * Turns model node into an object.
     * @param node Model node
     * @return Stringifyable object representation of the node.
     **/
    toJSON(serializeOptions?: SerializeOptions): any;
    /**
     * @return For siblings of traits or resource types returns an array of optional properties names.
     **/
    optionalProperties(): string[];
    /**
     * @return Whether the element is an optional sibling of trait or resource type
     **/
    optional(): boolean;
    meta(): NodeMetadata;
}
export type INamedEntity = typeSystem.INamedEntity;
export type NamedId = typeSystem.NamedId;
export interface ValueMetadata {
    /**
     * Returns 'true', if the actual value is missing, and returned value has
     * been obtained from the RAML document by means of some rule.
     * @default false
     */
    calculated(): boolean;
    /**
     * Returns 'true', if the actual value is missing, and returned value is
     * stated in the RAML spec as default for the property
     * @default false
     */
    insertedAsDefault(): boolean;
    /**
     * Returns 'true' for optional siblings of traits and resource types
     * @default false
     */
    optional(): boolean;
    /**
     * Returns 'true', if all values are default.
     */
    isDefault(): boolean;
    toJSON(): any;
}
export interface RamlParserError {
    /**
     * [[IssueCode]]
     */
    code: IssueCode;
    /**
     * Messag text
     */
    message: string;
    /**
     * File path
     */
    path: string;
    /**
     * Start index in the whole text, starting from zero
     */
    start: number;
    /**
     * End index in the whole text, starting from zero
     */
    end: number;
    /**
     * Start line, starting from zero
     */
    line?: number;
    /**
     * Column index, starting from zero
     */
    column?: number;
    /**
     * Length two array of [[TextPosition]] describing start and end of error location
     */
    range: lowLevel.TextPosition[];
    /**
     * Whether the message is warning or not
     */
    isWarning: boolean;
}
export interface NodeMetadata extends ValueMetadata {
    /**
     * Returns metadata for those properties of the node, whose type is primitive or an array of primitive.
     */
    primitiveValuesMeta(): {
        [key: string]: ValueMetadata;
    };
}
export type IArrayType = typeSystem.IArrayType;
export type IUnionType = typeSystem.IUnionType;
export type IExpandableExample = typeSystem.IExpandableExample;
export type INodeDefinition = ITypeDefinition;
export interface IValueTypeDefinition extends ITypeDefinition {
}
export type IUniverse = typeSystem.IUniverse;
export interface IValueDocProvider {
    (v: string): string;
}
export interface IValueSuggester {
    (node: IHighLevelNode): string[];
}
export enum NodeKind {
    BASIC = 0,
    NODE = 1,
    ATTRIBUTE = 2,
}
export enum RAMLVersion {
    RAML10 = 0,
    RAML08 = 1,
}
export interface IParseResult {
    hashkey(): string;
    errors(): ValidationIssue[];
    lowLevel(): lowLevel.ILowLevelASTNode;
    name(): string;
    optional(): boolean;
    root(): IHighLevelNode;
    isSameNode(n: IParseResult): boolean;
    parent(): IHighLevelNode;
    setParent(node: IParseResult): any;
    children(): IParseResult[];
    directChildren(): IParseResult[];
    isAttached(): boolean;
    isImplicit(): boolean;
    isAttr(): boolean;
    asAttr(): IAttribute;
    isElement(): boolean;
    asElement(): IHighLevelNode;
    localId(): string;
    fullLocalId(): string;
    isUnknown(): boolean;
    property(): IProperty;
    id(): string;
    computedValue(name: string): any;
    validate(acceptor: ValidationAcceptor): void;
    printDetails(indent?: string): string;
    getKind(): NodeKind;
    getLowLevelStart(): any;
    getLowLevelEnd(): any;
    version(): any;
}
export function isParseResult(object: any): object is IParseResult;
export interface Status {
    message: string;
}
export enum IssueCode {
    UNRESOLVED_REFERENCE = 0,
    YAML_ERROR = 1,
    UNKNOWN_NODE = 2,
    MISSING_REQUIRED_PROPERTY = 3,
    PROPERTY_EXPECT_TO_HAVE_SINGLE_VALUE = 4,
    KEY_SHOULD_BE_UNIQUE_INTHISCONTEXT = 5,
    UNABLE_TO_RESOLVE_INCLUDE_FILE = 6,
    INVALID_VALUE_SCHEMA = 7,
    MISSED_CONTEXT_REQUIREMENT = 8,
    NODE_HAS_VALUE = 9,
    ONLY_OVERRIDE_ALLOWED = 10,
    ILLEGAL_PROPERTY_VALUE = 11,
    ILLEGAL_PROPERTY = 12,
    INVALID_PROPERTY = 13,
}
export interface ValidationAcceptor {
    begin(): any;
    accept(issue: ValidationIssue): any;
    end(): any;
}
export interface ValidationAction {
    name: string;
    action: () => void;
}
export interface ValidationIssue {
    code: IssueCode;
    message: string;
    node: IParseResult;
    path: string;
    start: number;
    end: number;
    isWarning: boolean;
    actions?: ValidationAction[];
    extras?: ValidationIssue[];
    unit?: lowLevel.ICompilationUnit;
}
export interface IStructuredValue {
    lowLevel(): lowLevel.ILowLevelASTNode;
    valueName(): string;
    toHighLevel(parent?: IHighLevelNode): IHighLevelNode;
}
export interface INodeBuilder {
    process(node: IHighLevelNode, childrenToAdopt: lowLevel.ILowLevelASTNode[]): IParseResult[];
}
export interface IAttribute extends IParseResult {
    lowLevel(): lowLevel.ILowLevelASTNode;
    definition(): IValueTypeDefinition;
    property(): IProperty;
    value(): any;
    setKey(k: string): any;
    setValue(newValue: string | IStructuredValue): any;
    setValues(values: string[]): any;
    addValue(value: string | IStructuredValue): any;
    name(): string;
    localId(): string;
    remove(): any;
    isEmpty(): boolean;
    owningWrapper(): {
        node: BasicNode;
        property: string;
    };
    findReferencedValue(): IHighLevelNode;
    isAnnotatedScalar(): boolean;
    annotations(): IAttribute[];
}
export interface IHighLevelNode extends IParseResult {
    lowLevel(): lowLevel.ILowLevelASTNode;
    types(): rTypes.IParsedTypeCollection;
    parsedType(): rTypes.IParsedType;
    localType(): typeSystem.ITypeDefinition;
    definition(): INodeDefinition;
    allowsQuestion(): boolean;
    property(): IProperty;
    children(): IParseResult[];
    attrs(): IAttribute[];
    attr(n: string): IAttribute;
    attrOrCreate(n: string): IAttribute;
    attrValue(n: string): string;
    attributes(n: string): IAttribute[];
    elements(): IHighLevelNode[];
    element(n: string): IHighLevelNode;
    elementsOfKind(n: string): IHighLevelNode[];
    isExpanded(): boolean;
    value(): any;
    propertiesAllowedToUse(): IProperty[];
    getExpandedVersion?(): IHighLevelNode;
    add(node: IHighLevelNode | IAttribute): any;
    remove(node: IHighLevelNode | IAttribute): any;
    dump(flavor: string): string;
    findElementAtOffset(offset: number): any;
    root(): IHighLevelNode;
    findReferences(): IParseResult[];
    copy(): IHighLevelNode;
    resetChildren(): void;
    findById(id: string): any;
    associatedType(): INodeDefinition;
    wrapperNode(): BasicNode;
    setWrapperNode(node: BasicNode): any;
    optionalProperties(): string[];
}
export interface IEditableHighLevelNode extends IHighLevelNode {
    createAttr(n: string, v: string): any;
}
export interface IAcceptor<T> {
    calculationStarts(): any;
    acceptProposal(c: T): any;
    calculationComplete(): any;
}
export interface IStructuredValue {
    valueName(): string;
    children(): IStructuredValue[];
    lowLevel(): lowLevel.ILowLevelASTNode;
    toHighLevel(parent?: IHighLevelNode): IHighLevelNode;
    toHighLevel2(parent?: IHighLevelNode): IHighLevelNode;
}
}
declare module 'raml-1-parser/dist/raml1/highLevelAST' {
export * from '~raml-1-parser/dist/raml1/highLevelAST';
}

// Generated by typings
// Source: node_modules/raml-1-parser/node_modules/yaml-ast-parser/dist/exception.d.ts
declare module '~raml-1-parser~yaml-ast-parser/dist/exception' {
import Mark = require('~raml-1-parser~yaml-ast-parser/dist/mark');
class YAMLException {
    message: string;
    reason: string;
    name: string;
    mark: Mark;
    constructor(reason: string, mark?: Mark);
    toString(compact?: boolean): any;
}
export = YAMLException;
}

// Generated by typings
// Source: node_modules/raml-1-parser/node_modules/yaml-ast-parser/dist/yamlAST.d.ts
declare module '~raml-1-parser~yaml-ast-parser/dist/yamlAST' {
import YAMLException = require('~raml-1-parser~yaml-ast-parser/dist/exception');
export enum Kind {
    SCALAR = 0,
    MAPPING = 1,
    MAP = 2,
    SEQ = 3,
    ANCHOR_REF = 4,
    INCLUDE_REF = 5,
}
export interface YAMLDocument {
    startPosition: number;
    endPosition: number;
    errors: YAMLException[];
}
export interface YAMLNode extends YAMLDocument {
    startPosition: number;
    endPosition: number;
    kind: Kind;
    anchorId?: string;
    valueObject?: any;
    parent: YAMLNode;
    errors: YAMLException[];
    value?: any;
    key?: any;
    mappings?: any;
}
export interface YAMLAnchorReference extends YAMLNode {
    referencesAnchor: string;
    value: YAMLNode;
}
export interface YAMLScalar extends YAMLNode {
    value: string;
    doubleQuoted?: boolean;
    plainScalar?: boolean;
}
export interface YAMLMapping extends YAMLNode {
    key: YAMLScalar;
    value: YAMLNode;
}
export interface YAMLSequence extends YAMLNode {
    items: YAMLNode[];
}
export interface YamlMap extends YAMLNode {
    mappings: YAMLMapping[];
}
export function newMapping(key: YAMLScalar, value: YAMLNode): YAMLMapping;
export function newAnchorRef(key: string, start: number, end: number, value: YAMLNode): YAMLAnchorReference;
export function newScalar(v?: string): YAMLScalar;
export function newItems(): YAMLSequence;
export function newSeq(): YAMLSequence;
export function newMap(mappings?: YAMLMapping[]): YamlMap;
}

// Generated by typings
// Source: node_modules/raml-1-parser/node_modules/yaml-ast-parser/dist/loader.d.ts
declare module '~raml-1-parser~yaml-ast-parser/dist/loader' {
import ast = require('~raml-1-parser~yaml-ast-parser/dist/yamlAST');
export function loadAll(input: string, iterator: any, options: any): void;
export function load(input: string, options: any): ast.YAMLDocument;
export function safeLoadAll(input: string, output: any, options: any): void;
export function safeLoad(input: string, options: any): ast.YAMLDocument;
}

// Generated by typings
// Source: node_modules/raml-1-parser/node_modules/yaml-ast-parser/dist/dumper.d.ts
declare module '~raml-1-parser~yaml-ast-parser/dist/dumper' {
export function dump(input: any, options: any): string;
export function safeDump(input: any, options: any): string;
}

// Generated by typings
// Source: node_modules/raml-1-parser/node_modules/yaml-ast-parser/dist/mark.d.ts
declare module '~raml-1-parser~yaml-ast-parser/dist/mark' {
class Mark {
    name: string;
    buffer: string;
    position: number;
    line: number;
    column: number;
    constructor(name: string, buffer: string, position: number, line: number, column: number);
    filePath: string;
    getSnippet(indent?: number, maxLength?: number): string;
    toString(compact?: boolean): string;
}
export = Mark;
}

// Generated by typings
// Source: node_modules/raml-1-parser/node_modules/yaml-ast-parser/dist/index.d.ts
declare module '~raml-1-parser~yaml-ast-parser' {
import loader = require('~raml-1-parser~yaml-ast-parser/dist/loader');
import dumper = require('~raml-1-parser~yaml-ast-parser/dist/dumper');
import Mark = require('~raml-1-parser~yaml-ast-parser/dist/mark');
export class YAMLException {
    message: string;
    reason: string;
    name: string;
    mark: Mark;
    constructor(reason: string, mark?: Mark);
    toString(compact?: boolean): any;
}
export enum Kind {
    SCALAR = 0,
    MAPPING = 1,
    MAP = 2,
    SEQ = 3,
    ANCHOR_REF = 4,
    INCLUDE_REF = 5,
}
export type Error = YAMLException;
export interface YAMLDocument {
    startPosition: number;
    endPosition: number;
    errors: YAMLException[];
}
export interface YAMLNode extends YAMLDocument {
    startPosition: number;
    endPosition: number;
    kind: Kind;
    anchorId?: string;
    valueObject?: any;
    parent: YAMLNode;
    errors: YAMLException[];
    value?: any;
    key?: any;
    mappings?: any;
}
export interface YAMLAnchorReference extends YAMLNode {
    referencesAnchor: string;
    value: YAMLNode;
}
export interface YAMLScalar extends YAMLNode {
    value: string;
    doubleQuoted?: boolean;
    plainScalar?: boolean;
}
export interface YAMLMapping extends YAMLNode {
    key: YAMLScalar;
    value: YAMLNode;
}
export interface YAMLSequence extends YAMLNode {
    items: YAMLNode[];
}
export interface YamlMap extends YAMLNode {
    mappings: YAMLMapping[];
}
export function newMapping(key: YAMLScalar, value: YAMLNode): YAMLMapping;
export function newAnchorRef(key: string, start: number, end: number, value: YAMLNode): YAMLAnchorReference;
export function newScalar(v?: string): YAMLScalar;
export function newItems(): YAMLSequence;
export function newSeq(): YAMLSequence;
export function newMap(mappings?: YAMLMapping[]): YamlMap;
export var load: typeof loader.load;
export var loadAll: typeof loader.loadAll;
export var safeLoad: typeof loader.safeLoad;
export var dump: typeof dumper.dump;
export var safeDump: typeof dumper.safeDump;
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/raml1/lowLevelAST.d.ts
declare module '~raml-1-parser/dist/raml1/lowLevelAST' {
/**
 * Created by kor on 05/05/15.
 */
import yaml = require('~raml-1-parser~yaml-ast-parser');
import highlevel = require('~raml-1-parser/dist/raml1/highLevelAST');
import { IParseResult } from 'raml-1-parser';
import resolversApi = require('~raml-1-parser/dist/raml1/jsyaml/resolversApi');
export interface ICompilationUnit {
    contents(): string;
    path(): string;
    absolutePath(): string;
    isTopLevel(): boolean;
    ast(): ILowLevelASTNode;
    clone(): ICompilationUnit;
    isDirty(): boolean;
    isRAMLUnit(): boolean;
    project(): IProject;
    lexerErrors(): Error[];
    resolve(p: string): ICompilationUnit;
    resolveAsync(p: string): Promise<ICompilationUnit>;
    /**
     * gathers includes over ast without actual resolving of units;
     */
    getIncludeNodes(): {
        includePath(): string;
    }[];
    updateContent(newContent: string): any;
    lineMapper(): LineMapper;
    highLevel(): IParseResult;
    expandedHighLevel(): highlevel.IParseResult;
    /**
     * Returns true if this unit is overlay or extension, false otherwise.
     */
    isOverlayOrExtension(): boolean;
    /**
     * Returns master reference if presents, null otherwise.
     */
    getMasterReferenceNode(): ILowLevelASTNode;
}
export interface IProject {
    units(): ICompilationUnit[];
    unit(path: string, absolute?: boolean): ICompilationUnit;
    unitAsync(path: string): Promise<ICompilationUnit>;
    lexerErrors(): Error[];
    deleteUnit(n: string): any;
    cloneWithResolver(r: any): IProject;
    cloneWithResolver(newResolver: resolversApi.FSResolver, httpResolver?: resolversApi.HTTPResolver): IProject;
    getRootPath(): string;
    execute(cmd: CompositeCommand): any;
    executeTextChange(textCommand: TextChangeCommand): any;
    addListener(listener: IASTListener): any;
    removeListener(listener: IASTListener): any;
    addTextChangeListener(listener: ITextChangeCommandListener): any;
    removeTextChangeListener(listener: ITextChangeCommandListener): any;
    setCachedUnitContent(path: string, content?: string): any;
}
export interface IASTListener {
    (delta: ASTDelta): any;
}
export interface ITextChangeCommandListener {
    (delta: TextChangeCommand): any;
}
export class ASTDelta {
    commands: ASTChangeCommand[];
}
export interface ASTVisitor {
    (node: ILowLevelASTNode): boolean;
}
export interface IncludeReference {
    getFragments(): string[];
    getIncludePath(): string;
    asString(): string;
    encodedName(): string;
}
export interface ILowLevelASTNode {
    start(): number;
    end(): number;
    value(toString?: boolean): any;
    hasInnerIncludeError(): boolean;
    includeErrors(): string[];
    includePath(): string;
    includeReference(): IncludeReference;
    key(): string;
    optional(): boolean;
    actual(): any;
    children(): ILowLevelASTNode[];
    parent(): ILowLevelASTNode;
    unit(): ICompilationUnit;
    /**
     * Returns a unit, which is a base for include reference.
     * This method should be called when a node may potentially hbe defined in several units
     * at once (in case of expansion) and caller needs a unit, which is a base for this node's
     * include statement.
     *
     * If this node has no include statement, return value of the method should be equal to the result of
     * unit() method call.
     */
    includeBaseUnit(): ICompilationUnit;
    anchorId(): string;
    errors(): Error[];
    anchoredFrom(): ILowLevelASTNode;
    includedFrom(): ILowLevelASTNode;
    visit(v: ASTVisitor): any;
    addChild(n: ILowLevelASTNode, pos?: number): any;
    execute(cmd: CompositeCommand): any;
    isAnnotatedScalar(): boolean;
    dump(): string;
    dumpToObject(full?: boolean): any;
    keyStart(): number;
    keyEnd(): number;
    valueStart(): number;
    valueEnd(): number;
    isValueLocal(): boolean;
    kind(): yaml.Kind;
    valueKind(): yaml.Kind;
    keyKind(): yaml.Kind;
    show(msg: string, lev?: number, text?: string): any;
    markup(json?: boolean): string;
    highLevelParseResult(): highlevel.IParseResult;
    setHighLevelParseResult(highLevel: highlevel.IParseResult): any;
    highLevelNode(): highlevel.IHighLevelNode;
    setHighLevelNode(highLevelParseResult: highlevel.IHighLevelNode): any;
    text(unitText: string): string;
    copy(): ILowLevelASTNode;
    nodeDefinition(): highlevel.INodeDefinition;
    /**
     * Indicates that contents of this node are !included
     */
    includesContents(): boolean;
}
export enum CommandKind {
    ADD_CHILD = 0,
    REMOVE_CHILD = 1,
    MOVE_CHILD = 2,
    CHANGE_KEY = 3,
    CHANGE_VALUE = 4,
    INIT_RAML_FILE = 5,
}
export class TextChangeCommand {
    offset: number;
    constructor(offset: number, replacementLength: number, text: string, unit: ICompilationUnit, target?: ILowLevelASTNode);
    replacementLength: number;
    text: string;
    unit: ICompilationUnit;
    target: ILowLevelASTNode;
    isUndefined: boolean;
}
export class CompositeCommand {
    source: any;
    timestamp: number;
    commands: ASTChangeCommand[];
}
export enum InsertionPointType {
    NONE = 0,
    START = 1,
    END = 2,
    POINT = 3,
}
export interface InsertionPoint {
    type: InsertionPointType;
    point: ILowLevelASTNode;
}
export class ASTChangeCommand {
    constructor(kind: CommandKind, target: ILowLevelASTNode, value: string | ILowLevelASTNode, position: number);
    toSeq: boolean;
    insertionPoint: ILowLevelASTNode | InsertionPoint;
    kind: CommandKind;
    target: ILowLevelASTNode;
    value: string | ILowLevelASTNode;
    position: number;
}
export function setAttr(t: ILowLevelASTNode, value: string): ASTChangeCommand;
export function setAttrStructured(t: ILowLevelASTNode, value: highlevel.IStructuredValue): ASTChangeCommand;
export function setKey(t: ILowLevelASTNode, value: string): ASTChangeCommand;
export function removeNode(t: ILowLevelASTNode, child: ILowLevelASTNode): ASTChangeCommand;
export function insertNode(t: ILowLevelASTNode, child: ILowLevelASTNode, insertAfter?: ILowLevelASTNode | InsertionPoint, toSeq?: boolean): ASTChangeCommand;
export function initRamlFile(root: ILowLevelASTNode, newroot: ILowLevelASTNode): ASTChangeCommand;
export interface ILowLevelEnvironment {
    createProject(path: string): IProject;
}
export interface TextPosition {
    /**
     * Line number, starting from one
     */
    line: number;
    /**
     * Column number, starting from one
     */
    column: number;
    /**
     * Character index in whole text, starting from zero
     */
    position: number;
}
export interface LineMapper {
    position(pos: number): TextPosition;
}
export class LineMapperImpl implements LineMapper {
    private content;
    private absPath;
    constructor(content: string, absPath: string);
    private mapping;
    position(_pos: number): TextPosition;
    initMapping(): void;
}
/**
 * Canonic way of resolving references in RAML specs:
 * * relative reference is regarded as relative to containing unit
 * * absolute local path (starting with slash) is regarderd as relative to root RAML
 * * absolute web paths are regarded as such
 *
 * @param reference reference to be resolved
 * @param unitPath path of unit containing the reference, absolute or relative to root
 * @param rootPath path to root RAML
 * @returns resolved path
 */
export function buildPath(reference: any, unitPath: any, rootPath: any): any;
/**
 * Resolving reference against context
 * * absolute local and web references are regarded as such
 * * relative references are regarded as relative to the context
 * @param context absolute local or web path
 * @param reference
 * @returns resolved reference
 */
export function toAbsolutePath(context: string, reference: string): string;
/**
 * Check if reference points to web resource
 * @param reference
 * @returns {boolean}
 */
export function isWebPath(reference: any): boolean;
export function isLowLevelNode(object: any): object is ILowLevelASTNode;
}
declare module 'raml-1-parser/dist/raml1/lowLevelAST' {
export * from '~raml-1-parser/dist/raml1/lowLevelAST';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/searchProxy.d.ts
declare module '~raml-1-parser/dist/searchProxy' {
import hl = require('~raml-1-parser/dist/raml1/highLevelAST');
import ll = require('~raml-1-parser/dist/raml1/lowLevelAST');
export enum LocationKind {
    VALUE_COMPLETION = 0,
    KEY_COMPLETION = 1,
    PATH_COMPLETION = 2,
    DIRECTIVE_COMPLETION = 3,
    VERSION_COMPLETION = 4,
    ANNOTATION_COMPLETION = 5,
    SEQUENCE_KEY_COPLETION = 6,
    INCOMMENT = 7,
}
export function determineCompletionKind(text: string, offset: number): LocationKind;
export function enumValues(c: hl.IProperty, n: hl.IHighLevelNode): string[];
export function globalDeclarations(n: hl.IHighLevelNode): hl.IHighLevelNode[];
export function qName(n: hl.IHighLevelNode, p: hl.IHighLevelNode): string;
export function subTypesWithLocals(t: hl.ITypeDefinition, n: hl.IHighLevelNode): hl.ITypeDefinition[];
export function nodesDeclaringType(t: hl.ITypeDefinition, n: hl.IHighLevelNode): hl.IHighLevelNode[];
export function isExampleNodeContent(n: hl.IAttribute): boolean;
export function findExampleContentType(n: hl.IAttribute): hl.ITypeDefinition;
export function parseDocumentationContent(n: hl.IAttribute, t: hl.ITypeDefinition): hl.IHighLevelNode;
export function parseStructuredExample(exampleNode: hl.IHighLevelNode, type: hl.INodeDefinition): hl.IHighLevelNode;
export function isExampleNode(node: hl.IHighLevelNode): boolean;
export function referenceTargets(p0: hl.IProperty, c: hl.IHighLevelNode): hl.IHighLevelNode[];
export interface FindUsagesResult {
    node: hl.IHighLevelNode;
    results: hl.IParseResult[];
}
export function findUsages(unit: ll.ICompilationUnit, offset: number): FindUsagesResult;
export function findDeclaration(unit: ll.ICompilationUnit, offset: number, nodePart?: LocationKind): ll.ICompilationUnit | hl.IParseResult;
}
declare module 'raml-1-parser/dist/searchProxy' {
export * from '~raml-1-parser/dist/searchProxy';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/stubProxy.d.ts
declare module '~raml-1-parser/dist/stubProxy' {
import hl = require('~raml-1-parser/dist/raml1/highLevelAST');
import ll = require('~raml-1-parser/dist/raml1/lowLevelAST');
export function createStubNode(t: hl.ITypeDefinition, p: hl.IProperty, key?: string, unit?: ll.ICompilationUnit): hl.IHighLevelNode;
export function createStub(parent: hl.IHighLevelNode, property: string, key?: string): hl.IHighLevelNode;
export function createStubNoParentPatch(parent: hl.IHighLevelNode, property: string, key?: string): hl.IHighLevelNode;
export function createResourceStub(parent: hl.IHighLevelNode, key?: string): hl.IHighLevelNode;
export function createMethodStub(parent: hl.IHighLevelNode, key?: string): hl.IHighLevelNode;
export function createResponseStub(parent: hl.IHighLevelNode, key?: string): hl.IHighLevelNode;
export function createBodyStub(parent: hl.IHighLevelNode, key?: string): hl.IHighLevelNode;
export function createUriParameterStub(parent: hl.IHighLevelNode, key?: string): hl.IHighLevelNode;
export function createQueryParameterStub(parent: hl.IHighLevelNode, key?: string): hl.IHighLevelNode;
export function createASTPropImpl(node: ll.ILowLevelASTNode, parent: hl.IHighLevelNode, _def: hl.INodeDefinition, _prop: hl.IProperty, fk?: boolean): hl.IAttribute;
export function createASTNodeImpl(node: ll.ILowLevelASTNode, parent: hl.IHighLevelNode, _def: hl.INodeDefinition, _prop: hl.IProperty): hl.IHighLevelNode;
export function createVirtualASTPropImpl(node: ll.ILowLevelASTNode, parent: hl.IHighLevelNode, _def: hl.INodeDefinition, _prop: hl.IProperty): hl.IAttribute;
export function createVirtualNodeImpl(node: ll.ILowLevelASTNode, parent: hl.IHighLevelNode, _def: hl.INodeDefinition, _prop: hl.IProperty): hl.IHighLevelNode;
export function createMapping(name: string, value: string): ll.ILowLevelASTNode;
export function createMap(): ll.ILowLevelASTNode;
export function createAttr(_property: hl.IProperty, val: any): hl.IAttribute;
}
declare module 'raml-1-parser/dist/stubProxy' {
export * from '~raml-1-parser/dist/stubProxy';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/utils.d.ts
declare module '~raml-1-parser/dist/utils' {
import hl = require('~raml-1-parser/dist/raml1/highLevelAST');
export function hasAsyncRequests(): boolean;
export function addLoadCallback(x: (url: string) => void): void;
export function getTransformerNames(): string[];
export var updateType: (node: hl.IHighLevelNode) => void;
export function getFragmentDefenitionName(node: hl.IHighLevelNode): string;
export function genStructuredValue(name: string, parent: hl.IHighLevelNode, pr: hl.IProperty): string | hl.IStructuredValue;
export function parseUrl(u: string): string[];
}
declare module 'raml-1-parser/dist/utils' {
export * from '~raml-1-parser/dist/utils';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/project.d.ts
declare module '~raml-1-parser/dist/project' {
import ll = require('~raml-1-parser/dist/raml1/lowLevelAST');
import rs = require('~raml-1-parser/dist/raml1/jsyaml/resolversApi');
export function createProject(path: string, r?: rs.FSResolver, h?: rs.HTTPResolver): ll.IProject;
}
declare module 'raml-1-parser/dist/project' {
export * from '~raml-1-parser/dist/project';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/raml1/tools/universeHelpers.d.ts
declare module '~raml-1-parser/dist/raml1/tools/universeHelpers' {
import hl = require('~raml-1-parser/dist/raml1/highLevelAST');
export function isDocumentationProperty(p: hl.IProperty): boolean;
export function isUsagePropertyName(name: string): boolean;
export function isUsageProperty(p: hl.IProperty): boolean;
export function isMasterRefProperty(p: hl.IProperty): boolean;
export function isDescriptionPropertyName(name: string): boolean;
export function isDescriptionProperty(p: hl.IProperty): boolean;
export function isRequiredPropertyName(name: string): boolean;
export function isDisplayNamePropertyName(name: string): boolean;
export function isDisplayNameProperty(p: hl.IProperty): boolean;
export function isRequiredProperty(p: hl.IProperty): boolean;
export function isTitlePropertyName(name: string): boolean;
export function isTitleProperty(p: hl.IProperty): boolean;
export function isHeadersProperty(p: hl.IProperty): boolean;
export function isHeadersPropertyName(name: string): boolean;
export function isFormParametersProperty(p: hl.IProperty): boolean;
export function isFormParametersPropertyName(name: string): boolean;
export function isQueryParametersProperty(p: hl.IProperty): boolean;
export function isQueryParametersPropertyName(name: string): boolean;
export function isAnnotationsProperty(p: hl.IProperty): boolean;
export function isAnnotationProperty(p: hl.IProperty): boolean;
export function isIsProperty(p: hl.IProperty): boolean;
export function isSecuredByProperty(p: hl.IProperty): boolean;
export function isSecuritySchemesProperty(p: hl.IProperty): boolean;
export function isSecuritySchemeProperty(p: hl.IProperty): boolean;
export function isTypeProperty(p: hl.IProperty): boolean;
export function isPropertiesProperty(p: hl.IProperty): boolean;
export function isResponsesProperty(p: hl.IProperty): boolean;
export function isProtocolsProperty(p: hl.IProperty): boolean;
export function isNameProperty(p: hl.IProperty): boolean;
export function isBodyProperty(p: hl.IProperty): boolean;
export function isSchemaProperty(p: hl.IProperty): boolean;
export function isTraitsProperty(p: hl.IProperty): boolean;
export function isTraitProperty(p: hl.IProperty): boolean;
export function isResourceTypesProperty(p: hl.IProperty): boolean;
export function isResourceTypeProperty(p: hl.IProperty): boolean;
export function isFacetsProperty(p: hl.IProperty): boolean;
export function isSchemasProperty(p: hl.IProperty): boolean;
export function isResourcesProperty(p: hl.IProperty): boolean;
export function isMethodsProperty(p: hl.IProperty): boolean;
export function isTypesProperty(p: hl.IProperty): boolean;
export function isExampleProperty(p: hl.IProperty): boolean;
export function isEnumProperty(p: hl.IProperty): boolean;
export function isExamplesProperty(p: hl.IProperty): boolean;
export function isValueProperty(p: hl.IProperty): boolean;
export function isUriParametersProperty(p: hl.IProperty): boolean;
export function isBaseUriParametersProperty(p: hl.IProperty): boolean;
export function isRAMLVersionProperty(p: hl.IProperty): boolean;
export function isUsesProperty(p: hl.IProperty): boolean;
export function isAnnotationTypesProperty(p: hl.IProperty): boolean;
export function isRepeatProperty(p: hl.IProperty): boolean;
export function isMethodType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isApiType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isBooleanTypeType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isMarkdownStringType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isResourceType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isTraitType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isTraitRefType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isResourceTypeRefType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isGlobalSchemaType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isSecuritySchemaType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isSecuritySchemeRefType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isTypeDeclarationType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isResponseType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isBodyLikeType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isOverlayType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isAnnotationTypeType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isResourceTypeType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isSchemaStringType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isMethodBaseType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isLibraryType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isStringTypeType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isExampleSpecType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isExtensionType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isTypeDeclarationTypeOrDescendant(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isDocumentationType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isAnnotationRefTypeOrDescendant(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isApiSibling(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isLibraryBaseSibling(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isResourceBaseSibling(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isObjectTypeDeclarationSibling(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isTypeDeclarationSibling(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isMethodBaseSibling(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isSecuritySchemePartType(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isMediaTypeProperty(p: hl.IProperty): boolean;
export function isRAML08Type(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isRAML10Type(type: hl.INodeDefinition | hl.ITypeDefinition): boolean;
export function isRAML08Node(node: hl.IHighLevelNode): boolean;
export function isRAML08Attribute(node: hl.IAttribute): boolean;
export function isRAML10Node(node: hl.IHighLevelNode): boolean;
export function isRAML10Attribute(node: hl.IAttribute): boolean;
}
declare module 'raml-1-parser/dist/raml1/tools/universeHelpers' {
export * from '~raml-1-parser/dist/raml1/tools/universeHelpers';
}

// Generated by typings
// Source: node_modules/raml-1-parser/node_modules/raml-definition-system/node_modules/raml-typesystem/dist/src/typesystem-interfaces.d.ts
declare module '~raml-1-parser~raml-definition-system~raml-typesystem/dist/src/typesystem-interfaces' {
export interface IValidationPath {
    name: string;
    child?: IValidationPath;
}
export interface IHasExtra {
    getExtra(name: string): any;
    putExtra(name: string, value: any): void;
}
export const REPEAT: string;
export const PARSE_ERROR: string;
export const TOP_LEVEL_EXTRA: string;
export const DEFINED_IN_TYPES_EXTRA: string;
export const USER_DEFINED_EXTRA: string;
export const SOURCE_EXTRA: string;
export const SCHEMA_AND_TYPE_EXTRA: string;
export const GLOBAL_EXTRA: string;
export const HAS_FACETS: string;
export const HAS_ITEMS: string;
export interface IStatus {
    /**
     * retur2ns true if status does not have errors
     */
    isOk(): boolean;
    /**
     * return true if this status contains a warning
     */
    isWarning(): boolean;
    /**
     * return true if this status contains a error
     */
    isError(): boolean;
    /**
     * returns human readable message associated with this status
     */
    getMessage(): string;
    /**
     * returns an array of nested statuses
     */
    getSubStatuses(): IStatus[];
    /**
     * return an object which raised this status
     */
    getSource(): any;
    /**
     * returns primitive error statuses gathered recurrently, returns warnings to.
     */
    getErrors(): IStatus[];
    getValidationPath(): IValidationPath;
    /**
     * returns path to this status
     */
    getValidationPathAsString(): string;
}
export enum MetaInformationKind {
    Description = 0,
    NotScalar = 1,
    DisplayName = 2,
    Usage = 3,
    Annotation = 4,
    FacetDeclaration = 5,
    CustomFacet = 6,
    Example = 7,
    Required = 8,
    AllowedTargets = 9,
    Examples = 10,
    XMLInfo = 11,
    Default = 12,
    Constraint = 13,
    Modifier = 14,
    Discriminator = 15,
    DiscriminatorValue = 16,
}
/**
 * this is a common super interface for restrictions and meta data
 */
export interface ITypeFacet {
    /**
     * name of the facet
     */
    facetName(): string;
    /**
     * broadest type to which this facet can be added
     */
    requiredType(): IParsedType;
    /**
     * returns a type to which this facet  belongs
     */
    owner(): IParsedType;
    /**
     * return true if this facet is inheritable
     */
    isInheritable(): boolean;
    /**
     * validates if the facet is configured properly
     * @param registry
     */
    validateSelf(registry: ITypeRegistry): IStatus;
    /**
     * returns value associated with the facet
     */
    value(): any;
    /**
     * Returns kind of meta-information this instance represents.
     */
    kind(): MetaInformationKind;
}
export interface IParsedTypeCollection {
    /**
     * returns a type for a given name
     * @param name
     */
    getType(name: string): IParsedType;
    /**
     * adds a type to collection
     * @param t
     */
    add(t: IParsedType): void;
    /**
     * adds annotation type
     * @param t
     */
    addAnnotationType(t: IParsedType): void;
    /**
     * returns annotation type for a given name
     * @param name
     */
    getAnnotationType(name: string): IParsedType;
    /**
     * lists the types defined in this collection
     */
    types(): IParsedType[];
    /**
     * lists annotation types defined in this collection
     */
    annotationTypes(): IParsedType[];
    getTypeRegistry(): ITypeRegistry;
    getAnnotationTypeRegistry(): ITypeRegistry;
}
export interface ITypeRegistry {
    /**
     * returns a type associated with a given name
     * @param name
     */
    get(name: string): IParsedType;
    /**
     * list all types stored in this registry
     */
    types(): IParsedType[];
}
/**
 * parsed representation of the type
 * you should not create instances of this interfaces manually
 */
export interface IParsedType extends IHasExtra {
    /**
     * returns  list of directly declared sub types of this type
     */
    subTypes(): IParsedType[];
    /**
     * returns  list of directly declared super types of this type
     */
    superTypes(): IParsedType[];
    /**
     * name of the type
     */
    name(): string;
    /**
     * returns full list of known types which inherit from this type.
     * Note: built-in types does not list their not built in sub types
     */
    allSubTypes(): IParsedType[];
    /**
     * returns full list of ancestor types
     */
    allSuperTypes(): IParsedType[];
    /**
     * validates a potential instance of type and returns a status describing the results of validation
     * @param i
     */
    validate(i: any, autoClose?: boolean): IStatus;
    validateType(reg?: ITypeRegistry): IStatus;
    ac(i: any): IParsedType;
    canDoAc(i: any): IStatus;
    /**
     * returns all meta information and restrictions associated with the type all inheritable facets from super types are included
     */
    allFacets(): ITypeFacet[];
    exampleObject(): any;
    /**
     * returns  meta information and restrictions associated with the type only declared facets are included
     */
    declaredFacets(): ITypeFacet[];
    /**
     * returns array of custom facets directly declared on this type
     */
    customFacets(): ITypeFacet[];
    /**
     * returns array of custom facets directly declared on this type
     */
    restrictions(): ITypeFacet[];
    /**
     * returns true if this type inherits from object type
     */
    isObject(): boolean;
    /**
     * returns true if this type inherits from string type
     */
    isString(): boolean;
    /**
     * returns true if this type inherits from number type
     */
    isNumber(): boolean;
    /**
     * returns true if this type inherits from boolean type
     */
    isBoolean(): boolean;
    /**
     * returns true if this type inherits from integer type
     */
    isInteger(): boolean;
    /**
     * returns true if this type inherits from one of date related types
     */
    isDateTime(): boolean;
    /**
     * returns true if this type inherits from one of date related types
     */
    isDateOnly(): boolean;
    /**
     * returns true if this type inherits from one of date related types
     */
    isTimeOnly(): boolean;
    /**
     * returns true if this type inherits from one of date related types
     */
    isDateTimeOnly(): boolean;
    /**
     * returns true if this type inherits from array type
     */
    isArray(): boolean;
    /**
     * returns true if this type inherits from scalar type
     */
    isScalar(): boolean;
    /**
     * returns true if this type is a union type
     */
    isUnion(): boolean;
    /**
     * returns true if this type inhetits from an unknown type
     */
    isUnknown(): boolean;
    /**
     * return true if this type inherits from a file type
     */
    isFile(): boolean;
    /**
     * returns true if this type has recurrent definition;
     */
    isRecurrent(): boolean;
}
}

// Generated by typings
// Source: node_modules/raml-1-parser/node_modules/raml-definition-system/node_modules/raml-typesystem/dist/src/nominal-types.d.ts
declare module '~raml-1-parser~raml-definition-system~raml-typesystem/dist/src/nominal-types' {
import ti = require('~raml-1-parser~raml-definition-system~raml-typesystem/dist/src/nominal-interfaces');
export type IAnnotation = ti.IAnnotation;
export type ITypeDefinition = ti.ITypeDefinition;
export type IExpandableExample = ti.IExpandableExample;
export type IUniverse = ti.IUniverse;
export type IUnionType = ti.IUnionType;
export type IProperty = ti.IProperty;
export type IArrayType = ti.IArrayType;
export type NamedId = ti.NamedId;
export type IExternalType = ti.IExternalType;
export type FacetValidator = ti.FacetValidator;
export type IPrintDetailsSettings = ti.IPrintDetailsSettings;
export type IAnnotationType = ti.IAnnotationType;
export type INamedEntity = ti.INamedEntity;
export interface Injector {
    inject(a: Adaptable): void;
}
export function registerInjector(i: Injector): void;
export class Adaptable {
    private adapters;
    addAdapter(q: any): void;
    constructor();
    getAdapter<T>(adapterType: {
        new (p?: any): T;
    }): T;
    getAdapters(): any[];
}
export class Described extends Adaptable {
    private _name;
    private _description;
    constructor(_name: string, _description?: string);
    nameId(): string;
    description(): string;
    private _tags;
    private _version;
    private _annotations;
    addAnnotation(a: IAnnotation): void;
    removeAnnotation(a: IAnnotation): void;
    annotations(): any[];
    tags(): string[];
    withDescription(d: string): this;
    setName(name: string): void;
}
export class Annotation extends Described implements IAnnotation {
    private type;
    private parameters;
    constructor(type: IAnnotationType, parameters: {
        [name: string]: any;
    });
    parameterNames(): string[];
    parameter(name: string): any;
    getType(): ti.IAnnotationType;
}
export class Empty {
}
export class AbstractType extends Described implements ITypeDefinition {
    _universe: IUniverse;
    private _path;
    _key: NamedId;
    _isCustom: boolean;
    _customProperties: IProperty[];
    properties(): IProperty[];
    externalInHierarchy(): ExternalType;
    private _props;
    protected _allFacets: IProperty[];
    protected _facets: IProperty[];
    addFacet(q: IProperty): void;
    _validator: (x: any) => ti.Status[];
    validate(x: any): ti.Status[];
    allFacets(ps?: {
        [name: string]: ITypeDefinition;
    }): IProperty[];
    facets(): IProperty[];
    facet(name: string): ti.IProperty;
    typeId(): string;
    allProperties(ps?: {
        [name: string]: ITypeDefinition;
    }): IProperty[];
    property(propName: string): IProperty;
    hasValueTypeInHierarchy(): boolean;
    isAnnotationType(): boolean;
    hasStructure(): boolean;
    key(): NamedId;
    _superTypes: ITypeDefinition[];
    _subTypes: ITypeDefinition[];
    _requirements: ti.ValueRequirement[];
    private fixedFacets;
    hasArrayInHierarchy(): boolean;
    arrayInHierarchy(): IArrayType;
    uc: boolean;
    unionInHierarchy(): IUnionType;
    hasExternalInHierarchy(): boolean;
    hasUnionInHierarchy(): boolean;
    fixFacet(name: string, v: any): void;
    protected _af: {
        [name: string]: any;
    };
    getFixedFacets(): {
        [name: string]: any;
    };
    allFixedFacets(): {
        [name: string]: any;
    };
    protected contributeFacets(x: {
        [name: string]: any;
    }): void;
    private _nameAtRuntime;
    getPath(): string;
    setNameAtRuntime(name: string): void;
    getNameAtRuntime(): string;
    constructor(_name: string, _universe?: IUniverse, _path?: string);
    universe(): IUniverse;
    superTypes(): ITypeDefinition[];
    isAssignableFrom(typeName: string): boolean;
    annotationType(): IAnnotationType;
    subTypes(): ITypeDefinition[];
    allSubTypes(): ITypeDefinition[];
    _allSupers: ITypeDefinition[];
    allSuperTypes(): ITypeDefinition[];
    private allSuperTypesRecurrent(t, m, result);
    addSuperType(q: AbstractType): void;
    addRequirement(name: string, value: string): void;
    valueRequirements(): ti.ValueRequirement[];
    requiredProperties(): IProperty[];
    printDetails(indent?: string, settings?: IPrintDetailsSettings): string;
    private getTypeClassName();
    buildIn: boolean;
    private isStandardSuperclass(nameId, className);
    /**
     * Returns example for this type.
     * Returned example should be tested for being empty and being expandable.
     */
    examples(): IExpandableExample[];
    /**
     * Returns whether this type contain genuine user defined type in its hierarchy.
     * Genuine user defined type is a type user intentionally defined and filled with
     * properties or facets, or having user-defined name as opposed to a synthetic user-defined type.
     */
    isGenuineUserDefinedType(): boolean;
    /**
     * Returns nearest genuine user-define type in the hierarchy.
     * Genuine user defined type is a type user intentionally defined and filled with
     * properties or facets, or having user-defined name as opposed to a synthetic user-defined type.
     */
    genuineUserDefinedTypeInHierarchy(): ITypeDefinition;
    /**
     * Returns whether this type contain genuine user defined type in its hierarchy.
     * Genuine user defined type is a type user intentionally defined and filled with
     * properties or facets, or having user-defined name as opposed to a synthetic user-defined type.
     */
    hasGenuineUserDefinedTypeInHierarchy(): boolean;
    customProperties(): IProperty[];
    allCustomProperties(): IProperty[];
    registerCustomProperty(p: IProperty): void;
    setCustom(val: boolean): void;
    isCustom(): boolean;
    isUnion(): boolean;
    union(): IUnionType;
    isExternal(): boolean;
    external(): IExternalType;
    isArray(): boolean;
    isObject(): boolean;
    array(): IArrayType;
    isValueType(): boolean;
    kind(): string[];
    isBuiltIn(): boolean;
    setBuiltIn(builtIn: boolean): void;
    isTopLevel(): boolean;
    isUserDefined(): boolean;
    putExtra(extraName: string, value: any): void;
    getExtra(name: string): any;
    private getExtraAdapter();
}
export class ValueType extends AbstractType implements ITypeDefinition {
    constructor(name: string, _universe?: IUniverse, path?: string, description?: string);
    hasStructure(): boolean;
    hasValueTypeInHierarchy(): boolean;
    isValueType(): boolean;
    isUnionType(): boolean;
    isObject(): boolean;
}
export class StructuredType extends AbstractType implements ITypeDefinition {
    _properties: IProperty[];
    hasStructure(): boolean;
    propertyIndex(name: string): number;
    addProperty(name: string, range: ITypeDefinition): Property;
    allPropertyIndex(name: string): number;
    properties(): IProperty[];
    registerProperty(p: IProperty): void;
}
export class Property extends Described implements IProperty {
    private _ownerClass;
    private _nodeRange;
    protected _groupName: string;
    protected _keyShouldStartFrom: string;
    protected _enumOptions: string[];
    private _isRequired;
    private _isMultiValue;
    private _defaultValue;
    private _descriminates;
    private _defaultBooleanValue;
    private _defaultIntegerValue;
    withMultiValue(v?: boolean): this;
    withDescriminating(b: boolean): this;
    withRequired(req: boolean): this;
    isRequired(): boolean;
    withKeyRestriction(keyShouldStartFrom: string): this;
    withDomain(d: StructuredType, custom?: boolean): Property;
    setDefaultVal(s: any): this;
    setDefaultBooleanVal(s: any): this;
    setDefaultIntegerVal(s: any): this;
    defaultValue(): any;
    isPrimitive(): boolean;
    withRange(t: ITypeDefinition): this;
    isValueProperty(): boolean;
    enumOptions(): string[];
    keyPrefix(): string;
    withEnumOptions(op: string[]): this;
    _keyRegexp: string;
    withKeyRegexp(regexp: string): this;
    getKeyRegexp(): string;
    matchKey(k: string): boolean;
    private facetValidator;
    getFacetValidator(): ti.FacetValidator;
    setFacetValidator(f: FacetValidator): void;
    domain(): StructuredType;
    range(): ITypeDefinition;
    isMultiValue(): boolean;
    isDescriminator(): boolean;
}
export class Union extends AbstractType implements IUnionType {
    left: ITypeDefinition;
    right: ITypeDefinition;
    key(): NamedId;
    leftType(): ITypeDefinition;
    rightType(): ITypeDefinition;
    isUserDefined(): boolean;
    unionInHierarchy(): this;
    union(): this;
    hasUnionInHierarchy(): boolean;
    isUnion(): boolean;
    isObject(): boolean;
    hasArrayInHierarchy(): boolean;
}
export class Array extends AbstractType implements IArrayType {
    dimensions: number;
    component: ITypeDefinition;
    hasArrayInHierarchy(): boolean;
    isArray(): boolean;
    isObject(): boolean;
    arrayInHierarchy(): this;
    array(): this;
    isUserDefined(): boolean;
    componentType(): ti.ITypeDefinition;
    setComponent(t: ITypeDefinition): void;
    key(): NamedId;
}
export class ExternalType extends StructuredType implements IExternalType {
    schemaString: string;
    externalInHierarchy(): this;
    typeId(): string;
    schema(): string;
    isUserDefined(): boolean;
    hasExternalInHierarchy(): boolean;
    isExternal(): boolean;
    external(): this;
}
}

// Generated by typings
// Source: node_modules/raml-1-parser/node_modules/raml-definition-system/node_modules/raml-typesystem/dist/src/nominal-interfaces.d.ts
declare module '~raml-1-parser~raml-definition-system~raml-typesystem/dist/src/nominal-interfaces' {
import tsInterfaces = require('~raml-1-parser~raml-definition-system~raml-typesystem/dist/src/typesystem-interfaces');
export interface INamedEntity {
    nameId(): string;
    description(): string;
    getAdapter<T>(adapterType: {
        new (arg?: any): T;
    }): T;
    annotations(): IAnnotation[];
    addAnnotation(a: IAnnotation): void;
    removeAnnotation(a: IAnnotation): void;
    getAdapters(): any[];
}
export interface NamedId {
    name: string;
}
export interface ITyped {
    getType(): ITypeDefinition;
}
export interface IAnnotation extends INamedEntity, ITyped {
    /***
     * names of the parameters that are specified here
     */
    parameterNames(): string[];
    /**
     * value of the parameter with name
     * @param name
     */
    parameter(name: string): any;
}
export interface IPrintDetailsSettings {
    hideProperties?: boolean;
    hideSuperTypeProperties?: boolean;
    printStandardSuperclasses?: boolean;
}
export interface Status {
    getValidationPathAsString(): string;
    getSeverity(): number;
    isError(): boolean;
    getMessage(): string;
}
export interface IExpandableExample {
    /**
     * Returns true if the application in question does not have an example set directly.
     * It is still possible that while application has no direct example, references may have
     * example pieces, current example may be expanded with.
     */
    isEmpty(): boolean;
    /**
     * Whether the original example is JSON string.
     */
    isJSONString(): boolean;
    /**
     * Whether the original example is XML string.
     */
    isXMLString(): boolean;
    /**
     * Whether original example is set up as YAML.
     */
    isYAML(): boolean;
    /**
     * Returns representation of this example as a string.
     * This method works for any type of example.
     */
    asString(): string;
    /**
     * Returns representation of this example as JSON object.
     * This works for examples being JSON strings and YAML objects.
     * It -may- work for XML string examples, but is not guaranteed.
     */
    asJSON(): any;
    /**
     * Returns an original example. It is string for XML and JSON strings,
     * or JSON object for YAML example.
     */
    original(): any;
    /**
     * Expands the example with what its application references can provide.
     * XML examples are not guaranteed to be supported. If supported, XML is convrted into JSON.
     * Returns null or expansion result as string.
     */
    expandAsString(): string;
    /**
     * Expands the example with what its application references can provide.
     * XML examples are not guaranteed to be supported. If supported, XML is convrted into JSON.
     * Returns null or expansion result as JSON object.
     */
    expandAsJSON(): any;
    isSingle(): boolean;
    strict(): boolean;
    description(): string;
    displayName(): string;
    annotations(): any;
    name(): string;
}
export class ValueRequirement {
    name: string;
    value: string;
    /**
     *
     * @param name name of the property to discriminate
     * @param value expected value of discriminating property
     */
    constructor(name: string, value: string);
}
export interface ITypeDefinition extends INamedEntity, tsInterfaces.IHasExtra {
    key(): NamedId;
    /**
     * list os super types
     */
    superTypes(): ITypeDefinition[];
    /**
     * list of sub types
     */
    subTypes(): ITypeDefinition[];
    /**
     * list of all subtypes not including this type
     */
    allSubTypes(): ITypeDefinition[];
    /**
     * List of all super types not including this type
     */
    allSuperTypes(): ITypeDefinition[];
    /**
     * Propertis decared in this type
     */
    properties(): IProperty[];
    facet(n: string): IProperty;
    /**

     * List off all properties (declared in this type and super types),
     * did not includes properties fixed to fixed facet use facet for them
     */
    allProperties(visited?: any): IProperty[];
    /**
     * Facets declared by the type and its supertypes
     */
    allFacets(visited?: any): IProperty[];
    /**
     * Facets declared by the type
     */
    facets(): IProperty[];
    /**
     * Whether this type is value type. Does not perform a search in super types.
     */
    isValueType(): boolean;
    /**
     * true if this type is value type or one of its super types is value type.
     */
    hasValueTypeInHierarchy(): boolean;
    /**
     * Whether this type is an array. Does not perform a search in super types.
     */
    isArray(): boolean;
    /**
     * Whether this type is object. Performs a search in super types.
     */
    isObject(): boolean;
    /**
     * true if this type is array or one of its super types is array.
     */
    hasArrayInHierarchy(): boolean;
    /**
     * Casts this type to an array. Does not perform a search in super types.
     */
    array(): IArrayType;
    /**
     * casting to nearest array type in hierarchy
     */
    arrayInHierarchy(): IArrayType;
    /**
     * Whether this type is a union. Does not perform a search in super types.
     */
    isUnion(): boolean;
    /**
     * true if this type is union or one of its super types is union.
     */
    hasUnionInHierarchy(): boolean;
    /**
     * Casts this type to a union type. Does not perform a search in super types.
     */
    union(): IUnionType;
    /**
     * Casting to nearest union type in hierarchy
     */
    unionInHierarchy(): IUnionType;
    isAnnotationType(): boolean;
    annotationType(): IAnnotationType;
    /**
     * true if this type values have internal structure
     */
    hasStructure(): boolean;
    /**
     * true if this type is external. Does not perform a search in super types.
     */
    isExternal(): boolean;
    /**
     * true if this type is external type, or one if its super types is an external type.
     */
    hasExternalInHierarchy(): boolean;
    /**
     * Casts this type to an external type. Does not perform a search in super types.
     */
    external(): IExternalType;
    /**
     * Casting to nearest external type in hierarchy
     */
    externalInHierarchy(): IExternalType;
    /**
     * Whether the class is built-in.
     */
    isBuiltIn(): boolean;
    /**
     * List of value requirements for this type,
     * used to discriminate a type from a list of subtype
     */
    valueRequirements(): ValueRequirement[];
    /**
     * parent universe
     */
    universe(): IUniverse;
    /**
     * return true if this type is assignable to a given type
     * @param typeName
     */
    isAssignableFrom(typeName: string): boolean;
    /**
     * return property by it name looks in super classes
     * but will not return anything if property is a fixed with facet
     * @param name
     */
    property(name: string): IProperty;
    /**
     * helper method to get required properties only
     */
    requiredProperties(): IProperty[];
    /**
     * @return map of fixed facet names to fixed facet values;
     */
    getFixedFacets(): {
        [name: string]: any;
    };
    /**
     * @return map of fixed facet names to fixed facet values;
     */
    allFixedFacets(): {
        [name: string]: any;
    };
    /**
     * Print details of this type.
     * Used mostly for debug and demosntration purposes.
     * @param indent
     */
    printDetails(indent?: string, settings?: IPrintDetailsSettings): string;
    /**
     * Returns examples for this type.
     * Returned examples should be tested for being empty and being expandable.
     */
    examples(): IExpandableExample[];
    /**
     * Returns whether this type is genuine user defined type.
     * Genuine user defined type is a type user intentionally defined and filled with
     * properties or facets, or having user-defined name as opposed to a synthetic user-defined type.
     */
    isGenuineUserDefinedType(): boolean;
    /**
     * Returns whether this type contain genuine user defined type in its hierarchy.
     * Genuine user defined type is a type user intentionally defined and filled with
     * properties or facets, or having user-defined name as opposed to a synthetic user-defined type.
     */
    hasGenuineUserDefinedTypeInHierarchy(): boolean;
    /**
     * Returns nearest genuine user-define type in the hierarchy.
     * Genuine user defined type is a type user intentionally defined and filled with
     * properties or facets, or having user-defined name as opposed to a synthetic user-defined type.
     */
    genuineUserDefinedTypeInHierarchy(): ITypeDefinition;
    kind(): string[];
    validate(x: any): Status[];
    /**
     * Returns whether this type was defined by a user.
     */
    isUserDefined(): boolean;
}
export interface FacetValidator {
    (value: any, facetValue: any): string;
}
export interface IValueDocProvider {
    (v: string): string;
}
/**
 * represent array types
 */
export interface IArrayType extends ITypeDefinition {
    componentType(): ITypeDefinition;
}
export interface IExternalType extends ITypeDefinition {
    schema(): string;
}
/**
 * represent union types
 */
export interface IUnionType extends ITypeDefinition {
    leftType(): ITypeDefinition;
    rightType(): ITypeDefinition;
}
/**
 * collection of types
 */
export interface IUniverse {
    /**
     * type for a given name
     * @param name
     */
    type(name: string): ITypeDefinition;
    /**
     * version of this universe
     */
    version(): string;
    /**
     * All types in universe
     */
    types(): ITypeDefinition[];
    /**
     * highlevel information about universe
     */
    matched(): {
        [name: string]: NamedId;
    };
}
export interface IProperty extends INamedEntity {
    /**
     * name of the property
     */
    nameId(): string;
    /**
     * returns true if this property matches the a given property name
     * (it is important for additional and pattern properties)
     * @param k
     */
    matchKey(k: string): boolean;
    /**
     * range of the property (basically it is type)
     */
    range(): ITypeDefinition;
    /**
     * domain of the property (basically declaring type)
     */
    domain(): ITypeDefinition;
    /**
     * true if this property is required to fill
     */
    isRequired(): boolean;
    /**
     * true if this property can have multiple values
     */
    isMultiValue(): boolean;
    /**
     * true if this property range is one of built in value types
     */
    isPrimitive(): boolean;
    /**
     * true if this property range is a value type
     */
    isValueProperty(): boolean;
    /**
     * return a prefix for a property name - used for additional properties
     */
    keyPrefix(): string;
    /**
     * return a pattern for a property name - used for a pattern properties
     */
    getKeyRegexp(): string;
    /**
     * returns a default value for this property
     */
    defaultValue(): any;
    /**
     * if this property range is constrained to a fixed set of values it will return the values
     */
    enumOptions(): string[];
    /**
     * true if this property is a discriminator
     */
    isDescriminator(): boolean;
}
export interface IAnnotationType extends ITypeDefinition {
    parameters(): ITypeDefinition[];
    allowedTargets(): any;
}
}

// Generated by typings
// Source: node_modules/raml-1-parser/node_modules/raml-definition-system/node_modules/raml-typesystem/dist/src/typeExpressionUtil.d.ts
declare module '~raml-1-parser~raml-definition-system~raml-typesystem/dist/src/typeExpressionUtil' {
export interface BaseNode {
    type: string;
}
export interface Union extends BaseNode {
    first: BaseNode;
    rest: BaseNode;
}
export interface Parens extends BaseNode {
    expr: BaseNode;
    arr: number;
}
export interface Literal extends BaseNode {
    value: string;
    arr?: number;
    params?: BaseNode[];
}
export function visit(node: BaseNode, action: (n: BaseNode) => void): void;
export function serializeToString(node: BaseNode): string;
export function parse(str: string): BaseNode;
}

// Generated by typings
// Source: node_modules/raml-1-parser/node_modules/raml-definition-system/node_modules/raml-typesystem/dist/src/index.d.ts
declare module '~raml-1-parser~raml-definition-system~raml-typesystem' {
export import tsInterfaces = require('~raml-1-parser~raml-definition-system~raml-typesystem/dist/src/typesystem-interfaces');
export import nominalTypes = require('~raml-1-parser~raml-definition-system~raml-typesystem/dist/src/nominal-types');
export import nominalInterfaces = require('~raml-1-parser~raml-definition-system~raml-typesystem/dist/src/nominal-interfaces');
export import typeExpressions = require('~raml-1-parser~raml-definition-system~raml-typesystem/dist/src/typeExpressionUtil');
export type IValidationPath = tsInterfaces.IValidationPath;
export type IHasExtra = tsInterfaces.IHasExtra;
export var TOP_LEVEL_EXTRA: string;
export var DEFINED_IN_TYPES_EXTRA: string;
export var USER_DEFINED_EXTRA: string;
export var SOURCE_EXTRA: string;
export function getSchemaUtils(): any;
export type IStatus = tsInterfaces.IStatus;
export type ITypeFacet = tsInterfaces.ITypeFacet;
export type IParsedTypeCollection = tsInterfaces.IParsedTypeCollection;
export type ITypeRegistry = tsInterfaces.ITypeRegistry;
export type IParsedType = tsInterfaces.IParsedType;
export function isParsedType(object: any): object is IParsedType;
export interface Open {
    /**
     * this index signature is here to specify that IType can contain unknown user defined facets and annotations
     */
    [name: string]: any;
}
/**
 * this interface describes basic layout of JSON type representation,
 * sub interfaces contains documentation about important facets which can be specified for the types extended from related built-in types
 */
export interface IType extends Open {
    /**
     * type expression describing super types or in case of multiple inheritance array of type expressions
     */
    type?: string | string[];
    /**
     * default value for the type
     */
    default?: any;
    /**
     * example for the type
     */
    example?: any;
    /**
     * human readable description of the type (GitHub Markdown)
     */
    description?: string;
    /**
     * human readable short name of the type
     */
    displayName?: string;
    /**
     * map of custom facets declarations
     */
    facets?: {
        [name: string]: IType;
    };
    /**
     * enumeration of possible valid instances for the type
     */
    enum?: any[];
}
/**
 * this interface constains additional properties specific to object types
 */
export interface ObjectType extends IType {
    /**
     * minimum amount of properties which instances of the type should have
     */
    minProperties?: number;
    /**
     * maximum amount of properties which instances of the type should have
     */
    maxProperties?: number;
    /**
     * if set to true type is threaten as closed type
     */
    closed?: boolean;
    /**
     * map of property signatures to the property  declarations
     */
    properties?: {
        [name: string]: IType;
    };
    /**
     * map of regular expressions to pattern property declarations
     */
    patternProperties?: {
        [name: string]: IType;
    };
    /**
     * allows to set constraints on the type of additional properties
     */
    additionalProperties?: IType;
}
/**
 * this interface contains additional properties specific to array types
 */
export interface ArrayType extends IType {
    /**
     * minimum amount of properties which instances of the type should have
     */
    minItems?: number;
    /**
     * maximum amount of properties which instances of the type should have
     */
    maxItems?: number;
    /**
     * contains description of the component type
     */
    items?: string | IType;
}
/**
 * this interface contains additional properties specific to number types
 */
export interface NumberType extends IType {
    /**
     * minimum value for this type
     */
    minimum?: number;
    /**
     * maximum value for this type
     */
    maximim?: number;
    /**
     * value for multiple of constraint
     */
    multipleOf?: number;
}
/**
 * this interface contains additional properties specific to string types
 */
export interface StringType extends IType {
    /**
     * regular expression which all instances of the type should pass
     */
    pattern?: string;
    /**
     * minimum length of the string
     */
    minLength?: number;
    /**
     * maximum length of the string
     */
    maxLength?: number;
}
/**
 * this interface represents JSON representation of the Library
 */
export interface ITypeCollection {
    /**
     * map of annotation type name to annotation type description
     */
    annotationTypes?: {
        [name: string]: IType;
    };
    /**
     * map of normal type name to type description
     */
    types?: {
        [name: string]: IType;
    };
}
/**
 * loads type collection from JSON type definition
 * @param data
 * @param registry - optional registry of types which ar already known (does not modified during parse)
 * @returns {TypeCollection} returns a new instance of type collection with a parsed types
 */
export function loadTypeCollection(data: ITypeCollection, registry?: ITypeRegistry): IParsedTypeCollection;
/**
 * loads type  from JSON type definition
 * @param data
 * @returns {ts.AbstractType}
 */
export function loadType(data: IType): IParsedType;
/**
 * parses a type or type collection definition from a JSON structure
 * @param data
 * @returns {any}
 */
export function parse(data: IType | ITypeCollection): IParsedType | IParsedTypeCollection;
/**
 * parses a type  from a JSON structure, uses second argument to resolve types
 * @param data
 * @returns {any}
 */
export function parseType(data: IType, collection: IParsedTypeCollection): IParsedType;
/**
 * kind of the node
 */
export enum NodeKind {
    SCALAR = 0,
    ARRAY = 1,
    MAP = 2,
}
/**
 * node representing an element of abstract syntax tree
 */
export interface IParseNode {
    /**
     * node key
     */
    key(): string;
    /**
     * node value
     */
    value(): any;
    /**
     * node children
     */
    children(): IParseNode[];
    /**
     * child with a given key
     * @param k
     */
    childWithKey(k: string): IParseNode;
    /**
     * kind of the node
     */
    kind(): NodeKind;
}
/**
 * parses type collection definition from a JSON structure
 * @param data
 * @returns {any}
 */
export function parseFromAST(data: IParseNode): IParsedTypeCollection;
/**
 * parses type collection definition from a JSON structure
 * @param data
 * @returns {any}
 */
export function parseTypeFromAST(name: string, data: IParseNode, collection: IParsedTypeCollection, defaultsToAny?: boolean, annotation?: boolean, global?: boolean, ignoreTypeAttr?: boolean): IParsedType;
/**
 * dumps type or type collection to JSON
 * @param ts
 * @returns {IType|ITypeCollection}
 */
export function dump(ts: IParsedType | IParsedTypeCollection): ITypeCollection | IType;
/**
 * validates intance against the type definition
 * @param i - instance to validate
 * @param t - type definition
 * @returns {IStatus}
 */
export function validate(i: any, t: IParsedType, autoClose?: boolean): IStatus;
/***
 * validates type definition
 * @param t
 * @param collection - collection of the types
 * @returns {IStatus}
 */
export function validateTypeDefinition(t: IParsedType, collection: IParsedTypeCollection): IStatus;
/**
 * performs automatic classification of instance against a given type
 * @param i
 * @param t
 * @returns {IParsedType}
 */
export function performAC(i: any, t: IParsedType): IParsedType;
/**
 * checks if the given type is suitable for automatic classification
 * @param t
 * @returns {Status}
 */
export function checkACStatus(t: IParsedType): IStatus;
export interface IFacetPrototype {
    /**
     *creates brand new instance of facet filled with default values
     */
    newInstance(): ITypeFacet;
    /**
     * creates a facet filled with a passed value
     * @param v
     */
    createWithValue(v: any): ITypeFacet;
    /**
     * checks if the facet represented by this prototype can be added to the given type
     * @param t
     */
    isApplicable(t: IParsedType): boolean;
    /**
     * returns true if this facet is inheritable
     */
    isInheritable(): boolean;
    /**
     * returns true if this facet is a constraint
     */
    isConstraint(): boolean;
    /**
     * returns true if this facet describes a metadata
     */
    isMeta(): boolean;
    /**
     * returns the name of the facet represented by this prototype
     */
    name(): string;
}
/**
 * this function allow you to get a list of all built-in facets
 * @returns {FacetPrototype[]}
 */
export function builtInFacets(): IFacetPrototype[];
/**
 * returns type registry returning all built in types
 * @returns {TypeRegistry}
 */
export function builtInTypes(): ITypeRegistry;
/**
 * creates a new type by deriving it from a list of super types
 * @returns {IParsedType}
 */
export function derive(name: string, ...types: IParsedType[]): IParsedType;
/**
 * creates a new type by unifying it from a list of possible options
 * @returns {IParsedType}
 */
export function unify(name: string, ...types: IParsedType[]): IParsedType;
export class TypeConstructor {
    private target;
    constructor(target: IParsedType);
    /**
     * adds property declaration to the type
     * @param name
     * @param type
     * @param optional
     * @returns {TypeConstructor}
     */
    addProperty(name: string, type: IParsedType, optional: boolean): TypeConstructor;
    /**
     * adds pattern property declaration to the type
     * @param target
     * @param regexp
     * @param type
     * @returns {TypeConstructor}
     */
    addPatternProperty(target: IParsedType, regexp: string, type: IParsedType): TypeConstructor;
    /**
     * closes type
     * @returns {TypeConstructor}
     */
    closeType(): TypeConstructor;
    /**
     * adds annotation to the type
     * @returns {TypeConstructor}
     */
    annotate(name: string, value: any): TypeConstructor;
    /**
     * adds custom facet to the type
     * @returns {TypeConstructor}
     */
    customFacet(name: string, value: any): TypeConstructor;
    /**
     * adds custom facet declaration to the type
     * @returns {TypeConstructor}
     */
    customFacetDeclaration(name: string, value: IParsedType, optional?: boolean): TypeConstructor;
    /**
     * adds a built-in facet with a given name and value
     * @param name
     * @param value
     * @returns {TypeConstructor}
     */
    addSimpleFacet(name: string, value: any): TypeConstructor;
    /**
     * returns a constructed type instance
     * @returns {IParsedType}
     */
    getResult(): tsInterfaces.IParsedType;
}
export function setPropertyConstructor(c: any): void;
export function toNominal(t: IParsedType, bt: (name: string) => nominalTypes.ITypeDefinition): nominalTypes.ITypeDefinition;
}

// Generated by typings
// Source: node_modules/raml-1-parser/node_modules/raml-definition-system/dist/definitionSystem.d.ts
declare module '~raml-1-parser~raml-definition-system' {
export import rt = require('~raml-1-parser~raml-definition-system~raml-typesystem');
import typeSystem = rt.nominalTypes;
export function getSchemaUtils(): any;
export type IHighLevelNode = any;
export type IParseResult = any;
export type Named = typeSystem.NamedId;
export type IHasExtra = rt.IHasExtra;
export var TOP_LEVEL_EXTRA: string;
export var DEFINED_IN_TYPES_EXTRA: string;
export var USER_DEFINED_EXTRA: string;
export var SOURCE_EXTRA: string;
export var tsInterfaces: typeof rt.tsInterfaces;
export var injector: {
    inject(a: typeSystem.Adaptable): void;
};
/**
 * What is our universe at first we have node types
 * they have following fundamental properties:
 * some nodes can fold to another kinds of nodes
 *
 */
export type IType = typeSystem.ITypeDefinition;
export type ITypeDefinition = typeSystem.ITypeDefinition;
export type IProperty = typeSystem.IProperty;
export class AbstractType extends typeSystem.AbstractType implements typeSystem.ITypeDefinition {
}
export class ValueType extends typeSystem.ValueType implements IType {
}
export class SourceProvider {
    getSource(): any;
}
export function isSourceProvider(object: any): object is SourceProvider;
export class EnumType extends ValueType {
    values: string[];
}
export interface IValueDocProvider {
    (v: string): string;
}
export interface IValueSuggester {
    (node: IHighLevelNode): string[];
}
export class ReferenceType extends ValueType {
    private referenceTo;
    constructor(name: string, path: string, referenceTo: string, _universe: Universe);
    getReferencedType(): NodeClass;
    hasStructure(): boolean;
}
export class NodeClass extends typeSystem.StructuredType implements IType, typeSystem.ITypeDefinition {
    constructor(_name: string, universe: Universe, path: string, _description?: string);
    allProperties(v?: {
        [name: string]: typeSystem.ITypeDefinition;
    }): Property[];
}
export class UserDefinedClass extends NodeClass {
    key(): any;
    isUserDefined(): boolean;
    typeId(): string;
    constructor(name: string, universe: Universe, hl: IHighLevelNode, path: string, description: string);
    _value: boolean;
    hasValueTypeInHierarchy(): boolean;
    /**
     * Returns whether this type contain genuine user defined type in its hierarchy.
     * Genuine user defined type is a type user intentionally defined and filled with
     * properties or facets, or having user-defined name as opposed to a synthetic user-defined type.
     */
    isGenuineUserDefinedType(): boolean;
    /**
     * Returns nearest genuine user-define type in the hierarchy.
     * Genuine user defined type is a type user intentionally defined and filled with
     * properties or facets, or having user-defined name as opposed to a synthetic user-defined type.
     */
    genuineUserDefinedType(): typeSystem.ITypeDefinition;
}
export class AnnotationType extends UserDefinedClass {
    allProperties(ps?: {
        [name: string]: typeSystem.ITypeDefinition;
    }): Property[];
    isAnnotationType(): boolean;
}
export interface IUniverseDescriptor {
    [name: string]: typeSystem.NamedId;
}
export class Universe extends typeSystem.Described implements typeSystem.IUniverse {
    private _parent;
    private _classes;
    private _uversion;
    private _topLevel;
    private _originalTopLevelText;
    private matchedObjects;
    private _typedVersion;
    matched(): IUniverseDescriptor;
    setTopLevel(t: string): void;
    getTopLevel(): string;
    setOriginalTopLevelText(t: string): void;
    getOriginalTopLevelText(): string;
    setTypedVersion(tv: string): void;
    getTypedVersion(): string;
    version(): string;
    setUniverseVersion(version: string): void;
    types(): IType[];
    type(name: string): ITypeDefinition;
    register(t: IType): this;
    private aMap;
    registerAlias(a: string, t: IType): void;
    unregister(t: IType): this;
    constructor(dec: IUniverseDescriptor, name?: string, _parent?: Universe, v?: string);
    registerSuperClass(t0: IType, t1: IType): void;
}
export function prop(name: string, desc: string, domain: NodeClass, range: IType, custom?: boolean): Property;
export class ChildValueConstraint {
    name: string;
    value: string;
    constructor(name: string, value: string);
}
export class Property extends typeSystem.Property implements typeSystem.IProperty {
    private _isFromParentValue;
    private _isFromParentKey;
    private _key;
    private _declaresFields;
    private _describes;
    private _inheritsValueFromContext;
    private _canBeDuplicator;
    private _allowsNull;
    private _canBeValue;
    private _isInherited;
    private _oftenKeys;
    private _vprovider;
    private _suggester;
    private _selfNode;
    private _noDirectParse;
    isPrimitive(): boolean;
    withNoDirectParse(): void;
    isNoDirectParse(): boolean;
    withSelfNode(): void;
    isSelfNode(): boolean;
    matchKey(k: string): boolean;
    valueDocProvider(): IValueDocProvider;
    setValueDocProvider(v: IValueDocProvider): this;
    suggester(): IValueSuggester;
    setValueSuggester(s: IValueSuggester): void;
    enumOptions(): string[];
    getOftenKeys(): string[];
    withOftenKeys(keys: string[]): this;
    withCanBeValue(): this;
    withInherited(w: boolean): void;
    isInherited(): boolean;
    isAllowNull(): boolean;
    withAllowNull(): void;
    getCanBeDuplicator(): boolean;
    canBeValue(): boolean;
    setCanBeDuplicator(): boolean;
    inheritedContextValue(): string;
    withInheritedContextValue(v: string): this;
    private _contextReq;
    withContextRequirement(name: string, value: string): void;
    getContextRequirements(): {
        name: string;
        value: string;
    }[];
    withDescribes(a: string): this;
    describesAnnotation(): boolean;
    describedAnnotation(): string;
    private _newInstanceName;
    isReference(): boolean;
    referencesTo(): IType;
    newInstanceName(): string;
    withThisPropertyDeclaresFields(b?: boolean): this;
    isThisPropertyDeclaresTypeFields(): boolean;
    withNewInstanceName(name: string): this;
    private determinesChildValues;
    addChildValueConstraint(c: ChildValueConstraint): void;
    getChildValueConstraints(): ChildValueConstraint[];
    childRestrictions(): {
        name: string;
        value: any;
    }[];
    _id: any;
    id(): any;
    isAnnotation(): boolean;
    withFromParentValue(v?: boolean): this;
    withFromParentKey(v?: boolean): this;
    isFromParentKey(): boolean;
    isFromParentValue(): boolean;
    withGroupName(gname: string): this;
    unmerge(): this;
    merge(): this;
    withKey(isKey: boolean): this;
    /**
     * TODO THIS STUFF SHOULD BE MORE ABSTRACT (LATER...)
     * @param keyShouldStartFrom
     * @returns {Property}
     */
    isKey(): boolean;
    isMerged(): boolean;
    groupName(): string;
    key(): typeSystem.NamedId;
}
export type Array = typeSystem.Array;
export class UserDefinedProp extends Property {
    private _node;
    private sourceProvider;
    _displayName: string;
    constructor(name: string, source: IParseResult);
    withDisplayName(name: string): void;
    getDisplayName(): string;
    node(): any;
    setSourceProvider(sourceProvider: SourceProvider): void;
}
export class RAMLPropertyDocumentationService {
    private _markdownDescription;
    private _documentationTableName;
    private _isHidden;
    private _valueDescription;
    setDocTableName(val: string): void;
    docTableName(): string;
    setHidden(val: boolean): void;
    isHidden(): boolean;
    setMarkdownDescription(val: string): void;
    markdownDescription(): string;
    setValueDescription(val: string): void;
    valueDescription(): string;
}
export class RAMLPropertyParserService extends RAMLPropertyDocumentationService {
    private _isEmbededMap;
    private _isSystemProperty;
    isSystem(): boolean;
    withSystem(s: boolean): this;
    isEmbedMap(): boolean;
    withEmbedMap(): this;
}
export class RAMLPropertyService extends RAMLPropertyParserService {
    private _property;
    constructor(_property: IProperty);
    private _meta;
    valueDocProvider(): IValueDocProvider;
    private _propertyGrammarType;
    withPropertyGrammarType(pt: string): void;
    getPropertyGrammarType(): string;
    id(): string;
    range(): ITypeDefinition;
    domain(): ITypeDefinition;
    isAllowNull(): boolean;
    referencesTo(): ITypeDefinition;
    isReference(): boolean;
    texpr: boolean;
    nameId(): string;
    priority(): number;
    isKey(): boolean;
    isMerged(): boolean;
    isTypeExpr(): boolean;
    isExampleProperty(): boolean;
    example: boolean;
    setExample(e: boolean): void;
    setTypeExpression(e: boolean): void;
    isDescriminating(): boolean;
    putMeta(key: string, value: any): void;
    meta(key: string): any;
}
export interface ValueRequirement {
    name: string;
    value: string;
}
export class RAMLService {
    private _node;
    private _type;
    private _representationOf;
    private _allowsAnyChildren;
    private _allowsOptionalProperties;
    private _possibleInterfaces;
    withAllowQuestion(): void;
    getAllowQuestion(): boolean;
    private _canInherit;
    withCanInherit(clazz: string): void;
    private _referenceIs;
    getReferenceIs(): string;
    withReferenceIs(fname: string): void;
    descriminatorValue(): string;
    getCanInherit(): string[];
    withAllowAny(): void;
    getAllowAny(): boolean;
    private _declaredBy;
    globallyDeclaredBy(): NodeClass[];
    setGloballyDeclaredBy(c: NodeClass): void;
    setDeclaringNode(n: any): void;
    nameId(): string;
    universe(): Universe;
    isAssignableFrom(name: string): boolean;
    _aliases: string[];
    _consumesRef: boolean;
    _defining: string[];
    setConsumesRefs(b: boolean): void;
    definingPropertyIsEnough(v: string): void;
    getDefining(): string[];
    getConsumesRefs(): boolean;
    private _fDesc;
    addAlias(al: string): void;
    getAliases(): string[];
    valueRequirements(): ValueRequirement[];
    private _allowsValueSet;
    private _allowsValue;
    private _isAnnotation;
    private _annotationChecked;
    private _actuallyExports;
    isAnnotation(): boolean;
    allowValue(): boolean;
    key(): Named;
    getRepresentationOf(): ITypeDefinition;
    constructor(d: ITypeDefinition);
    getPath(): string;
    isDeclaration(): boolean;
    isGlobalDeclaration(): boolean;
    isTypeSystemMember(): boolean;
    getExtendedType(): ITypeDefinition;
    private _runtimeExtenders;
    setInlinedTemplates(b: boolean): this;
    getRuntimeExtenders(): ITypeDefinition[];
    isInlinedTemplates(): boolean;
    setExtendedTypeName(name: string): void;
    getKeyProp(): IProperty;
    private _declaresType;
    private _convertsToGlobal;
    private _isTemplate;
    withActuallyExports(pname: string): void;
    withConvertsToGlobal(pname: string): void;
    getConvertsToGlobal(): string;
    getActuallyExports(): string;
    isUserDefined(): boolean;
    private _contextRequirements;
    withContextRequirement(name: string, value: string): void;
    getContextRequirements(): {
        name: string;
        value: string;
    }[];
    findMembersDeterminer(): IProperty;
    getDeclaringNode(): any;
    registerSupertypes(classNames: string[]): void;
    registerPossibleInterfaces(classNames: string[]): void;
    possibleInterfaces(): ITypeDefinition[];
}
export var universesInfo: {
    "Universe08": {
        "GlobalSchema": {
            "name": string;
            "properties": {
                "key": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "value": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Api": {
            "name": string;
            "properties": {
                "title": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "version": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "uriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "protocols": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "mediaType": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "schemas": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "traits": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securitySchemes": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "resourceTypes": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "resources": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "documentation": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "RAMLVersion": {
                    "name": string;
                };
            };
        };
        "DocumentationItem": {
            "name": string;
            "properties": {
                "title": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "content": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "ValueType": {
            "name": string;
            "properties": {};
        };
        "StringType": {
            "name": string;
            "properties": {};
        };
        "AnyType": {
            "name": string;
            "properties": {};
        };
        "NumberType": {
            "name": string;
            "properties": {};
        };
        "BooleanType": {
            "name": string;
            "properties": {};
        };
        "Referencable": {
            "name": string;
            "properties": {};
        };
        "Reference": {
            "name": string;
            "properties": {
                "structuredValue": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
            };
        };
        "DeclaresDynamicType": {
            "name": string;
            "properties": {};
        };
        "UriTemplate": {
            "name": string;
            "properties": {};
        };
        "RelativeUriString": {
            "name": string;
            "properties": {};
        };
        "FullUriTemplateString": {
            "name": string;
            "properties": {};
        };
        "FixedUri": {
            "name": string;
            "properties": {};
        };
        "MarkdownString": {
            "name": string;
            "properties": {};
        };
        "SchemaString": {
            "name": string;
            "properties": {};
        };
        "JSonSchemaString": {
            "name": string;
            "properties": {};
        };
        "XMLSchemaString": {
            "name": string;
            "properties": {};
        };
        "ExampleString": {
            "name": string;
            "properties": {};
        };
        "StatusCodeString": {
            "name": string;
            "properties": {};
        };
        "JSONExample": {
            "name": string;
            "properties": {};
        };
        "XMLExample": {
            "name": string;
            "properties": {};
        };
        "TypeInstance": {
            "name": string;
            "properties": {
                "properties": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "isScalar": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "value": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "TypeInstanceProperty": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "value": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "values": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "isArray": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "RAMLSimpleElement": {
            "name": string;
            "properties": {};
        };
        "Parameter": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "StringTypeDeclaration": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "pattern": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "enum": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "minLength": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "maxLength": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "BooleanTypeDeclaration": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "NumberTypeDeclaration": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "minimum": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "maximum": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "IntegerTypeDeclaration": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "minimum": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "maximum": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "DateTypeDeclaration": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "FileTypeDeclaration": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "ParameterLocation": {
            "name": string;
            "properties": {};
        };
        "MimeType": {
            "name": string;
            "properties": {};
        };
        "BodyLike": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "schema": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "formParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "schemaContent": {
                    "name": string;
                };
            };
        };
        "XMLBody": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "schema": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "formParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "JSONBody": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "schema": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "formParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Response": {
            "name": string;
            "properties": {
                "code": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "headers": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "body": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Resource": {
            "name": string;
            "properties": {
                "relativeUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "is": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "uriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "methods": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "resources": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "ResourceTypeRef": {
            "name": string;
            "properties": {
                "resourceType": {
                    "name": string;
                };
            };
        };
        "ResourceType": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "usage": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "methods": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "is": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "uriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "parametrizedProperties": {
                    "name": string;
                };
            };
        };
        "MethodBase": {
            "name": string;
            "properties": {
                "responses": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "body": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "protocols": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "queryParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "headers": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Method": {
            "name": string;
            "properties": {
                "responses": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "body": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "protocols": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "queryParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "headers": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "method": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "is": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Trait": {
            "name": string;
            "properties": {
                "responses": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "body": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "protocols": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "queryParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "headers": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "usage": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "parametrizedProperties": {
                    "name": string;
                };
            };
        };
        "TraitRef": {
            "name": string;
            "properties": {
                "trait": {
                    "name": string;
                };
            };
        };
        "SecuritySchemePart": {
            "name": string;
            "properties": {
                "responses": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "body": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "protocols": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "queryParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "headers": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "is": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "SecuritySchemeSettings": {
            "name": string;
            "properties": {};
        };
        "AbstractSecurityScheme": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "describedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "settings": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "SecuritySchemeRef": {
            "name": string;
            "properties": {
                "securitySchemeName": {
                    "name": string;
                };
                "securityScheme": {
                    "name": string;
                };
            };
        };
        "OAuth1SecuritySchemeSettings": {
            "name": string;
            "properties": {
                "requestTokenUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "authorizationUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "tokenCredentialsUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "OAuth2SecuritySchemeSettings": {
            "name": string;
            "properties": {
                "accessTokenUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "authorizationUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "authorizationGrants": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "scopes": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "OAuth2SecurityScheme": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "describedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "settings": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "OAuth1SecurityScheme": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "describedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "settings": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "BasicSecurityScheme": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "describedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "settings": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "DigestSecurityScheme": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "describedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "settings": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "CustomSecurityScheme": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "describedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "settings": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
    };
    "Universe10": {
        "Library": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "uses": {
                    "name": string;
                };
                "schemas": {
                    "name": string;
                };
                "types": {
                    "name": string;
                };
                "traits": {
                    "name": string;
                };
                "resourceTypes": {
                    "name": string;
                };
                "annotationTypes": {
                    "name": string;
                };
                "securitySchemes": {
                    "name": string;
                };
                "usage": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
            };
        };
        "LibraryBase": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "uses": {
                    "name": string;
                };
                "schemas": {
                    "name": string;
                };
                "types": {
                    "name": string;
                };
                "traits": {
                    "name": string;
                };
                "resourceTypes": {
                    "name": string;
                };
                "annotationTypes": {
                    "name": string;
                };
                "securitySchemes": {
                    "name": string;
                };
            };
        };
        "Api": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "uses": {
                    "name": string;
                };
                "schemas": {
                    "name": string;
                };
                "types": {
                    "name": string;
                };
                "traits": {
                    "name": string;
                };
                "resourceTypes": {
                    "name": string;
                };
                "annotationTypes": {
                    "name": string;
                };
                "securitySchemes": {
                    "name": string;
                };
                "title": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "version": {
                    "name": string;
                };
                "baseUri": {
                    "name": string;
                };
                "baseUriParameters": {
                    "name": string;
                };
                "protocols": {
                    "name": string;
                };
                "mediaType": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "resources": {
                    "name": string;
                };
                "documentation": {
                    "name": string;
                };
                "RAMLVersion": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Overlay": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "uses": {
                    "name": string;
                };
                "schemas": {
                    "name": string;
                };
                "types": {
                    "name": string;
                };
                "traits": {
                    "name": string;
                };
                "resourceTypes": {
                    "name": string;
                };
                "annotationTypes": {
                    "name": string;
                };
                "securitySchemes": {
                    "name": string;
                };
                "title": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "version": {
                    "name": string;
                };
                "baseUri": {
                    "name": string;
                };
                "baseUriParameters": {
                    "name": string;
                };
                "protocols": {
                    "name": string;
                };
                "mediaType": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "resources": {
                    "name": string;
                };
                "documentation": {
                    "name": string;
                };
                "usage": {
                    "name": string;
                };
                "extends": {
                    "name": string;
                };
            };
        };
        "Extension": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "uses": {
                    "name": string;
                };
                "schemas": {
                    "name": string;
                };
                "types": {
                    "name": string;
                };
                "traits": {
                    "name": string;
                };
                "resourceTypes": {
                    "name": string;
                };
                "annotationTypes": {
                    "name": string;
                };
                "securitySchemes": {
                    "name": string;
                };
                "title": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "version": {
                    "name": string;
                };
                "baseUri": {
                    "name": string;
                };
                "baseUriParameters": {
                    "name": string;
                };
                "protocols": {
                    "name": string;
                };
                "mediaType": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "resources": {
                    "name": string;
                };
                "documentation": {
                    "name": string;
                };
                "usage": {
                    "name": string;
                };
                "extends": {
                    "name": string;
                };
            };
        };
        "UsesDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "key": {
                    "name": string;
                };
                "value": {
                    "name": string;
                };
            };
        };
        "FragmentDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "uses": {
                    "name": string;
                };
            };
        };
        "DocumentationItem": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "title": {
                    "name": string;
                };
                "content": {
                    "name": string;
                };
            };
        };
        "ValueType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "StringType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "AnyType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "NumberType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "IntegerType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "NullType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "TimeOnlyType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "DateOnlyType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "DateTimeOnlyType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "DateTimeType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "FileType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "BooleanType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "Reference": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "structuredValue": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "UriTemplate": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "StatusCodeString": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "RelativeUriString": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "FullUriTemplateString": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "FixedUriString": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "ContentType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "MarkdownString": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "SchemaString": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "ExampleSpec": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "value": {
                    "name": string;
                };
                "strict": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "structuredValue": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "TypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "fixedFacets": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "structuredType": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "parametrizedProperties": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "XMLFacetInfo": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "attribute": {
                    "name": string;
                };
                "wrapped": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "namespace": {
                    "name": string;
                };
                "prefix": {
                    "name": string;
                };
            };
        };
        "ArrayTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "uniqueItems": {
                    "name": string;
                };
                "items": {
                    "name": string;
                };
                "minItems": {
                    "name": string;
                };
                "maxItems": {
                    "name": string;
                };
            };
        };
        "UnionTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
            };
        };
        "ObjectTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "properties": {
                    "name": string;
                };
                "minProperties": {
                    "name": string;
                };
                "maxProperties": {
                    "name": string;
                };
                "additionalProperties": {
                    "name": string;
                };
                "patternProperties": {
                    "name": string;
                };
                "discriminator": {
                    "name": string;
                };
                "discriminatorValue": {
                    "name": string;
                };
            };
        };
        "StringTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "pattern": {
                    "name": string;
                };
                "minLength": {
                    "name": string;
                };
                "maxLength": {
                    "name": string;
                };
                "enum": {
                    "name": string;
                };
            };
        };
        "BooleanTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
            };
        };
        "NumberTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "minimum": {
                    "name": string;
                };
                "maximum": {
                    "name": string;
                };
                "enum": {
                    "name": string;
                };
                "format": {
                    "name": string;
                };
                "multipleOf": {
                    "name": string;
                };
            };
        };
        "IntegerTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "minimum": {
                    "name": string;
                };
                "maximum": {
                    "name": string;
                };
                "enum": {
                    "name": string;
                };
                "format": {
                    "name": string;
                };
                "multipleOf": {
                    "name": string;
                };
            };
        };
        "DateOnlyTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
            };
        };
        "TimeOnlyTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
            };
        };
        "DateTimeOnlyTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
            };
        };
        "DateTimeTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "format": {
                    "name": string;
                };
            };
        };
        "DateTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
            };
        };
        "TypeInstance": {
            "name": string;
            "properties": {
                "properties": {
                    "name": string;
                };
                "isScalar": {
                    "name": string;
                };
                "value": {
                    "name": string;
                };
                "isArray": {
                    "name": string;
                };
                "items": {
                    "name": string;
                };
            };
        };
        "TypeInstanceProperty": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                };
                "value": {
                    "name": string;
                };
                "values": {
                    "name": string;
                };
                "isArray": {
                    "name": string;
                };
            };
        };
        "ModelLocation": {
            "name": string;
            "properties": {};
        };
        "LocationKind": {
            "name": string;
            "properties": {};
        };
        "MimeType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "Response": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "code": {
                    "name": string;
                };
                "headers": {
                    "name": string;
                };
                "body": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
            };
        };
        "Annotable": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "AnnotationRef": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "annotation": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "AnnotationTarget": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "TraitRef": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "trait": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Trait": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "queryParameters": {
                    "name": string;
                };
                "headers": {
                    "name": string;
                };
                "queryString": {
                    "name": string;
                };
                "responses": {
                    "name": string;
                };
                "body": {
                    "name": string;
                };
                "protocols": {
                    "name": string;
                };
                "is": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "usage": {
                    "name": string;
                };
                "parametrizedProperties": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "MethodBase": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "queryParameters": {
                    "name": string;
                };
                "headers": {
                    "name": string;
                };
                "queryString": {
                    "name": string;
                };
                "responses": {
                    "name": string;
                };
                "body": {
                    "name": string;
                };
                "protocols": {
                    "name": string;
                };
                "is": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
            };
        };
        "Method": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "queryParameters": {
                    "name": string;
                };
                "headers": {
                    "name": string;
                };
                "queryString": {
                    "name": string;
                };
                "responses": {
                    "name": string;
                };
                "body": {
                    "name": string;
                };
                "protocols": {
                    "name": string;
                };
                "is": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "method": {
                    "name": string;
                };
                "parametrizedProperties": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Operation": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "queryParameters": {
                    "name": string;
                };
                "headers": {
                    "name": string;
                };
                "queryString": {
                    "name": string;
                };
                "responses": {
                    "name": string;
                };
            };
        };
        "SecuritySchemePart": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "queryParameters": {
                    "name": string;
                };
                "headers": {
                    "name": string;
                };
                "queryString": {
                    "name": string;
                };
                "responses": {
                    "name": string;
                };
            };
        };
        "SecuritySchemeSettings": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "OAuth1SecuritySchemeSettings": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "requestTokenUri": {
                    "name": string;
                };
                "authorizationUri": {
                    "name": string;
                };
                "tokenCredentialsUri": {
                    "name": string;
                };
                "signatures": {
                    "name": string;
                };
            };
        };
        "OAuth2SecuritySchemeSettings": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "accessTokenUri": {
                    "name": string;
                };
                "authorizationUri": {
                    "name": string;
                };
                "authorizationGrants": {
                    "name": string;
                };
                "scopes": {
                    "name": string;
                };
            };
        };
        "SecuritySchemeRef": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "securitySchemeName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securityScheme": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "AbstractSecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "OAuth2SecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "OAuth1SecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "PassThroughSecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "BasicSecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "DigestSecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "CustomSecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "ResourceTypeRef": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "resourceType": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "ResourceType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "methods": {
                    "name": string;
                };
                "is": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "uriParameters": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "usage": {
                    "name": string;
                };
                "parametrizedProperties": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "ResourceBase": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "methods": {
                    "name": string;
                };
                "is": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "uriParameters": {
                    "name": string;
                };
            };
        };
        "Resource": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "methods": {
                    "name": string;
                };
                "is": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "uriParameters": {
                    "name": string;
                };
                "relativeUri": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "resources": {
                    "name": string;
                };
            };
        };
        "FileTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "fileTypes": {
                    "name": string;
                };
                "minLength": {
                    "name": string;
                };
                "maxLength": {
                    "name": string;
                };
            };
        };
    };
};
export interface UniverseProvider {
    (key: string): Universe;
    availableUniverses(): string[];
    clean(): any;
}
export var getUniverse: UniverseProvider;
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/raml1/tools/schemaModelGenApi.d.ts
declare module '~raml-1-parser/dist/raml1/tools/schemaModelGenApi' {
import hl = require('~raml-1-parser/dist/raml1/highLevelAST');
export interface SchemaToModelGenerator {
    generateTo(api: hl.IHighLevelNode, schema: string, title?: string): string[];
}
export interface ModelToSchemaGenerator {
    generateSchema(node: hl.IHighLevelNode): any;
}
}
declare module 'raml-1-parser/dist/raml1/tools/schemaModelGenApi' {
export * from '~raml-1-parser/dist/raml1/tools/schemaModelGenApi';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/schema.d.ts
declare module '~raml-1-parser/dist/schema' {
import ll = require('~raml-1-parser/dist/raml1/lowLevelAST');
import schemaGenApi = require('~raml-1-parser/dist/raml1/tools/schemaModelGenApi');
export interface Schema {
    getType(): string;
    validate(content: string): void;
    validateObject(object: any): void;
}
export function createSchema(c: string, u: ll.ICompilationUnit): Schema;
export function getXMLSchema(c: string): Schema;
export function getJSONSchema(c: string, u: ll.ICompilationUnit): Schema;
export interface IncludeReference {
    getFragments(): string[];
    getIncludePath(): string;
    asString(): string;
    encodedName(): string;
}
export function completeReference(includePath: string, includeReference: IncludeReference, content: string): string[];
export function getIncludePath(p: string): string;
export function getIncludeReference(p: string): IncludeReference;
export function createSchemaModelGenerator(): schemaGenApi.SchemaToModelGenerator;
export function createModelToSchemaGenerator(): schemaGenApi.ModelToSchemaGenerator;
}
declare module 'raml-1-parser/dist/schema' {
export * from '~raml-1-parser/dist/schema';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/parserMod.d.ts
declare module '~raml-1-parser/dist/parserMod' {
import parser10api = require('~raml-1-parser/dist/raml1/artifacts/raml10parserapi');
import highLevel = require('~raml-1-parser/dist/raml1/highLevelAST');
export function createTypeDeclaration(typeName: string): parser10api.TypeDeclaration;
export function createObjectTypeDeclaration(typeName: string): parser10api.ObjectTypeDeclaration;
export function setTypeDeclarationSchema(type: parser10api.TypeDeclaration, schema: string): void;
export function setTypeDeclarationExample(type: parser10api.TypeDeclaration, example: string): void;
export function addChild(parent: highLevel.BasicNode, child: highLevel.BasicNode): void;
}
declare module 'raml-1-parser/dist/parserMod' {
export * from '~raml-1-parser/dist/parserMod';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/parser.d.ts
declare module '~raml-1-parser/dist/parser' {
export import modify = require('~raml-1-parser/dist/parserMod');
}
declare module 'raml-1-parser/dist/parser' {
export * from '~raml-1-parser/dist/parser';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/expanderStub.d.ts
declare module '~raml-1-parser/dist/expanderStub' {
export function expandTraitsAndResourceTypes<T>(api: T): T;
}
declare module 'raml-1-parser/dist/expanderStub' {
export * from '~raml-1-parser/dist/expanderStub';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/wrapperHelperStub.d.ts
declare module '~raml-1-parser/dist/wrapperHelperStub' {
import api = require('~raml-1-parser/dist/raml1/artifacts/raml10parserapi');
export function completeRelativeUri(res: api.Resource): string;
export interface Opt<T> {
    getOrElse(v: T): T;
}
export interface SchemaDef {
    name(): any;
    content(): any;
}
}
declare module 'raml-1-parser/dist/wrapperHelperStub' {
export * from '~raml-1-parser/dist/wrapperHelperStub';
}

// Generated by typings
// Source: node_modules/raml-1-parser/dist/index.d.ts
declare module 'raml-1-parser' {
import parserCore = require('~raml-1-parser/dist/raml1/wrapped-ast/parserCoreApi');
/**
 * RAML 1.0 top-level AST interfaces.
 */
export import api10 = require('~raml-1-parser/dist/raml1/artifacts/raml10parserapi');
/**
 * RAML 0.8 top-level AST interfaces.
 */
export import api08 = require('~raml-1-parser/dist/raml1/artifacts/raml08parserapi');
/**
 * Load API synchronously. If the 'rejectOnErrors' option is set to true, [[ApiLoadingError]] is thrown for Api which contains errors.
 * @param apiPath Path to API: local file system path or Web URL
 * @param options Load options
 * @return Api instance.
 **/
export function loadApiSync(apiPath: string, options?: parserCore.Options): api10.Api | api08.Api;
/**
 * Load API synchronously. If the 'rejectOnErrors' option is set to true, [[ApiLoadingError]] is thrown for Api which contains errors.
 * @param apiPath Path to API: local file system path or Web URL
 * @param options Load options
 * @param extensionsAndOverlays Paths to extensions and overlays to be applied listed in the order of application. Relevant for RAML 1.0 only.
 * @return Api instance.
 **/
export function loadApiSync(apiPath: string, extensionsAndOverlays: string[], options?: parserCore.Options): api10.Api | api08.Api;
/**
 * Load RAML synchronously. May load both Api and Typed fragments. If the 'rejectOnErrors' option is set to true, [[ApiLoadingError]] is thrown for RAML which contains errors.
 * @param ramlPath Path to RAML: local file system path or Web URL
 * @param options Load options
 * @param extensionsAndOverlays Paths to extensions and overlays to be applied listed in the order of application. Relevant for RAML 1.0 only.
 * @return RAMLLanguageElement instance.
 **/
export function loadRAMLSync(ramlPath: string, extensionsAndOverlays: string[], options?: parserCore.Options): hl.BasicNode;
/**
 * Load RAML synchronously. May load both Api and Typed fragments. If the 'rejectOnErrors' option is set to true, [[ApiLoadingError]] is thrown for RAML which contains errors.
 * @param content content of the raml
 * @param options Load options  (note you should path a resolvers if you want includes to be resolved)
 * @return RAMLLanguageElement instance.
 **/
export function parseRAMLSync(content: string, arg2?: parserCore.Options): hl.BasicNode;
/**
 * Load RAML asynchronously. May load both Api and Typed fragments. If the 'rejectOnErrors' option is set to true, [[ApiLoadingError]] is thrown for RAML which contains errors.
 * @param content content of the raml
 * @param options Load options  (note you should path a resolvers if you want includes to be resolved)
 * @return RAMLLanguageElement instance.
 **/
export function parseRAML(content: string, arg2?: parserCore.Options): hl.BasicNode;
/**
 * Load API asynchronously. The Promise is rejected with [[ApiLoadingError]] if the resulting Api contains errors and the 'rejectOnErrors' option is set to 'true'.
 * @param apiPath Path to API: local file system path or Web URL
 * @param options Load options
 * @return Promise&lt;Api&gt;.
 **/
export function loadApi(apiPath: string, options?: parserCore.Options): Promise<api10.Api | api08.Api>;
/**
 * Load API asynchronously. The Promise is rejected with [[ApiLoadingError]] if the resulting Api contains errors and the 'rejectOnErrors' option is set to 'true'.
 * @param apiPath Path to API: local file system path or Web URL
 * @param options Load options
 * @param extensionsAndOverlays Paths to extensions and overlays to be applied listed in the order of application. Relevant for RAML 1.0 only.
 * @return Promise&lt;Api&gt;.
 **/
export function loadApi(apiPath: string, extensionsAndOverlays: string[], options?: parserCore.Options): Promise<api10.Api | api08.Api>;
/**
 * Load RAML asynchronously. May load both Api and Typed fragments. The Promise is rejected with [[ApiLoadingError]] if the resulting RAMLLanguageElement contains errors and the 'rejectOnErrors' option is set to 'true'.
 * @param ramlPath Path to RAML: local file system path or Web URL
 * @param options Load options
 * @param extensionsAndOverlays Paths to extensions and overlays to be applied listed in the order of application. Relevant for RAML 1.0 only.
 * @return Promise&lt;RAMLLanguageElement&gt;.
 **/
export function loadRAML(ramlPath: string, extensionsAndOverlays: string[], options?: parserCore.Options): Promise<hl.BasicNode>;
/**
 * Gets AST node by runtime type, if runtime type matches any.
 * @param runtimeType - runtime type to find the match for
 */
export function getLanguageElementByRuntimeType(runtimeType: hl.ITypeDefinition): parserCore.BasicNode;
/**
 * Check if the AST node represents fragment
 */
export function isFragment(node: api10.Api | api10.Library | api10.Overlay | api10.Extension | api10.Trait | api10.TypeDeclaration | api10.ResourceType | api10.DocumentationItem): boolean;
/**
 * Convert fragment representing node to FragmentDeclaration instance.
 */
export function asFragment(node: api10.Api | api10.Library | api10.Overlay | api10.Extension | api10.Trait | api10.TypeDeclaration | api10.ResourceType | api10.DocumentationItem): api10.FragmentDeclaration;
/**
 * High-level AST interfaces.
 */
export import hl = require('~raml-1-parser/dist/raml1/highLevelAST');
/**
 * Low-level AST interfaces.
 */
export import ll = require('~raml-1-parser/dist/raml1/lowLevelAST');
/**
 * Search functionality, operates on high AST level.
 */
export import search = require('~raml-1-parser/dist/searchProxy');
/**
 * High-level stub node factory methods.
 */
export import stubs = require('~raml-1-parser/dist/stubProxy');
export import utils = require('~raml-1-parser/dist/utils');
/**
 * Low-level project factory.
 */
export import project = require('~raml-1-parser/dist/project');
/**
 * Helpers for classification of high-level AST entity types.
 */
export import universeHelpers = require('~raml-1-parser/dist/raml1/tools/universeHelpers');
/**
 * Definition system.
 */
export import ds = require('~raml-1-parser~raml-definition-system');
/**
 * Schema utilities.
 */
export import schema = require('~raml-1-parser/dist/schema');
/**
 * A set of constants describing definition system entities.
 * @hidden
 **/
export var universes: {
    "Universe08": {
        "GlobalSchema": {
            "name": string;
            "properties": {
                "key": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "value": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Api": {
            "name": string;
            "properties": {
                "title": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "version": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "uriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "protocols": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "mediaType": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "schemas": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "traits": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securitySchemes": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "resourceTypes": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "resources": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "documentation": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "RAMLVersion": {
                    "name": string;
                };
            };
        };
        "DocumentationItem": {
            "name": string;
            "properties": {
                "title": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "content": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "ValueType": {
            "name": string;
            "properties": {};
        };
        "StringType": {
            "name": string;
            "properties": {};
        };
        "AnyType": {
            "name": string;
            "properties": {};
        };
        "NumberType": {
            "name": string;
            "properties": {};
        };
        "BooleanType": {
            "name": string;
            "properties": {};
        };
        "Referencable": {
            "name": string;
            "properties": {};
        };
        "Reference": {
            "name": string;
            "properties": {
                "structuredValue": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
            };
        };
        "DeclaresDynamicType": {
            "name": string;
            "properties": {};
        };
        "UriTemplate": {
            "name": string;
            "properties": {};
        };
        "RelativeUriString": {
            "name": string;
            "properties": {};
        };
        "FullUriTemplateString": {
            "name": string;
            "properties": {};
        };
        "FixedUri": {
            "name": string;
            "properties": {};
        };
        "MarkdownString": {
            "name": string;
            "properties": {};
        };
        "SchemaString": {
            "name": string;
            "properties": {};
        };
        "JSonSchemaString": {
            "name": string;
            "properties": {};
        };
        "XMLSchemaString": {
            "name": string;
            "properties": {};
        };
        "ExampleString": {
            "name": string;
            "properties": {};
        };
        "StatusCodeString": {
            "name": string;
            "properties": {};
        };
        "JSONExample": {
            "name": string;
            "properties": {};
        };
        "XMLExample": {
            "name": string;
            "properties": {};
        };
        "TypeInstance": {
            "name": string;
            "properties": {
                "properties": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "isScalar": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "value": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "TypeInstanceProperty": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "value": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "values": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "isArray": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "RAMLSimpleElement": {
            "name": string;
            "properties": {};
        };
        "Parameter": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "StringTypeDeclaration": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "pattern": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "enum": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "minLength": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "maxLength": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "BooleanTypeDeclaration": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "NumberTypeDeclaration": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "minimum": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "maximum": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "IntegerTypeDeclaration": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "minimum": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "maximum": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "DateTypeDeclaration": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "FileTypeDeclaration": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "location": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "required": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "default": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "repeat": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "ParameterLocation": {
            "name": string;
            "properties": {};
        };
        "MimeType": {
            "name": string;
            "properties": {};
        };
        "BodyLike": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "schema": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "formParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "schemaContent": {
                    "name": string;
                };
            };
        };
        "XMLBody": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "schema": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "formParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "JSONBody": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "schema": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "example": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "formParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Response": {
            "name": string;
            "properties": {
                "code": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "headers": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "body": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Resource": {
            "name": string;
            "properties": {
                "relativeUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "is": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "uriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "methods": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "resources": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "ResourceTypeRef": {
            "name": string;
            "properties": {
                "resourceType": {
                    "name": string;
                };
            };
        };
        "ResourceType": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "usage": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "methods": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "is": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "uriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "parametrizedProperties": {
                    "name": string;
                };
            };
        };
        "MethodBase": {
            "name": string;
            "properties": {
                "responses": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "body": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "protocols": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "queryParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "headers": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Method": {
            "name": string;
            "properties": {
                "responses": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "body": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "protocols": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "queryParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "headers": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "method": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "is": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Trait": {
            "name": string;
            "properties": {
                "responses": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "body": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "protocols": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "queryParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "headers": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "usage": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "parametrizedProperties": {
                    "name": string;
                };
            };
        };
        "TraitRef": {
            "name": string;
            "properties": {
                "trait": {
                    "name": string;
                };
            };
        };
        "SecuritySchemePart": {
            "name": string;
            "properties": {
                "responses": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "body": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "protocols": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "baseUriParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "queryParameters": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "headers": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "displayName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "is": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "SecuritySchemeSettings": {
            "name": string;
            "properties": {};
        };
        "AbstractSecurityScheme": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "describedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "settings": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "SecuritySchemeRef": {
            "name": string;
            "properties": {
                "securitySchemeName": {
                    "name": string;
                };
                "securityScheme": {
                    "name": string;
                };
            };
        };
        "OAuth1SecuritySchemeSettings": {
            "name": string;
            "properties": {
                "requestTokenUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "authorizationUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "tokenCredentialsUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "OAuth2SecuritySchemeSettings": {
            "name": string;
            "properties": {
                "accessTokenUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "authorizationUri": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "authorizationGrants": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "scopes": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "OAuth2SecurityScheme": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "describedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "settings": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "OAuth1SecurityScheme": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "describedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "settings": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "BasicSecurityScheme": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "describedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "settings": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "DigestSecurityScheme": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "describedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "settings": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "CustomSecurityScheme": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "type": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "description": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "describedBy": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "settings": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
    };
    "Universe10": {
        "Library": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "uses": {
                    "name": string;
                };
                "schemas": {
                    "name": string;
                };
                "types": {
                    "name": string;
                };
                "traits": {
                    "name": string;
                };
                "resourceTypes": {
                    "name": string;
                };
                "annotationTypes": {
                    "name": string;
                };
                "securitySchemes": {
                    "name": string;
                };
                "usage": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
            };
        };
        "LibraryBase": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "uses": {
                    "name": string;
                };
                "schemas": {
                    "name": string;
                };
                "types": {
                    "name": string;
                };
                "traits": {
                    "name": string;
                };
                "resourceTypes": {
                    "name": string;
                };
                "annotationTypes": {
                    "name": string;
                };
                "securitySchemes": {
                    "name": string;
                };
            };
        };
        "Api": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "uses": {
                    "name": string;
                };
                "schemas": {
                    "name": string;
                };
                "types": {
                    "name": string;
                };
                "traits": {
                    "name": string;
                };
                "resourceTypes": {
                    "name": string;
                };
                "annotationTypes": {
                    "name": string;
                };
                "securitySchemes": {
                    "name": string;
                };
                "title": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "version": {
                    "name": string;
                };
                "baseUri": {
                    "name": string;
                };
                "baseUriParameters": {
                    "name": string;
                };
                "protocols": {
                    "name": string;
                };
                "mediaType": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "resources": {
                    "name": string;
                };
                "documentation": {
                    "name": string;
                };
                "RAMLVersion": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Overlay": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "uses": {
                    "name": string;
                };
                "schemas": {
                    "name": string;
                };
                "types": {
                    "name": string;
                };
                "traits": {
                    "name": string;
                };
                "resourceTypes": {
                    "name": string;
                };
                "annotationTypes": {
                    "name": string;
                };
                "securitySchemes": {
                    "name": string;
                };
                "title": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "version": {
                    "name": string;
                };
                "baseUri": {
                    "name": string;
                };
                "baseUriParameters": {
                    "name": string;
                };
                "protocols": {
                    "name": string;
                };
                "mediaType": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "resources": {
                    "name": string;
                };
                "documentation": {
                    "name": string;
                };
                "usage": {
                    "name": string;
                };
                "extends": {
                    "name": string;
                };
            };
        };
        "Extension": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "uses": {
                    "name": string;
                };
                "schemas": {
                    "name": string;
                };
                "types": {
                    "name": string;
                };
                "traits": {
                    "name": string;
                };
                "resourceTypes": {
                    "name": string;
                };
                "annotationTypes": {
                    "name": string;
                };
                "securitySchemes": {
                    "name": string;
                };
                "title": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "version": {
                    "name": string;
                };
                "baseUri": {
                    "name": string;
                };
                "baseUriParameters": {
                    "name": string;
                };
                "protocols": {
                    "name": string;
                };
                "mediaType": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "resources": {
                    "name": string;
                };
                "documentation": {
                    "name": string;
                };
                "usage": {
                    "name": string;
                };
                "extends": {
                    "name": string;
                };
            };
        };
        "UsesDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "key": {
                    "name": string;
                };
                "value": {
                    "name": string;
                };
            };
        };
        "FragmentDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "uses": {
                    "name": string;
                };
            };
        };
        "DocumentationItem": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "title": {
                    "name": string;
                };
                "content": {
                    "name": string;
                };
            };
        };
        "ValueType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "StringType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "AnyType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "NumberType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "IntegerType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "NullType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "TimeOnlyType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "DateOnlyType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "DateTimeOnlyType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "DateTimeType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "FileType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "BooleanType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "Reference": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "structuredValue": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "name": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "UriTemplate": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "StatusCodeString": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "RelativeUriString": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "FullUriTemplateString": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "FixedUriString": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "ContentType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "MarkdownString": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "SchemaString": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "ExampleSpec": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "value": {
                    "name": string;
                };
                "strict": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "structuredValue": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "TypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "fixedFacets": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "structuredType": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "parametrizedProperties": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "XMLFacetInfo": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "attribute": {
                    "name": string;
                };
                "wrapped": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "namespace": {
                    "name": string;
                };
                "prefix": {
                    "name": string;
                };
            };
        };
        "ArrayTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "uniqueItems": {
                    "name": string;
                };
                "items": {
                    "name": string;
                };
                "minItems": {
                    "name": string;
                };
                "maxItems": {
                    "name": string;
                };
            };
        };
        "UnionTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
            };
        };
        "ObjectTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "properties": {
                    "name": string;
                };
                "minProperties": {
                    "name": string;
                };
                "maxProperties": {
                    "name": string;
                };
                "additionalProperties": {
                    "name": string;
                };
                "patternProperties": {
                    "name": string;
                };
                "discriminator": {
                    "name": string;
                };
                "discriminatorValue": {
                    "name": string;
                };
            };
        };
        "StringTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "pattern": {
                    "name": string;
                };
                "minLength": {
                    "name": string;
                };
                "maxLength": {
                    "name": string;
                };
                "enum": {
                    "name": string;
                };
            };
        };
        "BooleanTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
            };
        };
        "NumberTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "minimum": {
                    "name": string;
                };
                "maximum": {
                    "name": string;
                };
                "enum": {
                    "name": string;
                };
                "format": {
                    "name": string;
                };
                "multipleOf": {
                    "name": string;
                };
            };
        };
        "IntegerTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "minimum": {
                    "name": string;
                };
                "maximum": {
                    "name": string;
                };
                "enum": {
                    "name": string;
                };
                "format": {
                    "name": string;
                };
                "multipleOf": {
                    "name": string;
                };
            };
        };
        "DateOnlyTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
            };
        };
        "TimeOnlyTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
            };
        };
        "DateTimeOnlyTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
            };
        };
        "DateTimeTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "format": {
                    "name": string;
                };
            };
        };
        "DateTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
            };
        };
        "TypeInstance": {
            "name": string;
            "properties": {
                "properties": {
                    "name": string;
                };
                "isScalar": {
                    "name": string;
                };
                "value": {
                    "name": string;
                };
                "isArray": {
                    "name": string;
                };
                "items": {
                    "name": string;
                };
            };
        };
        "TypeInstanceProperty": {
            "name": string;
            "properties": {
                "name": {
                    "name": string;
                };
                "value": {
                    "name": string;
                };
                "values": {
                    "name": string;
                };
                "isArray": {
                    "name": string;
                };
            };
        };
        "ModelLocation": {
            "name": string;
            "properties": {};
        };
        "LocationKind": {
            "name": string;
            "properties": {};
        };
        "MimeType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "Response": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "code": {
                    "name": string;
                };
                "headers": {
                    "name": string;
                };
                "body": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
            };
        };
        "Annotable": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "AnnotationRef": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "annotation": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "AnnotationTarget": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "TraitRef": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "trait": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Trait": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "queryParameters": {
                    "name": string;
                };
                "headers": {
                    "name": string;
                };
                "queryString": {
                    "name": string;
                };
                "responses": {
                    "name": string;
                };
                "body": {
                    "name": string;
                };
                "protocols": {
                    "name": string;
                };
                "is": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "usage": {
                    "name": string;
                };
                "parametrizedProperties": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "MethodBase": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "queryParameters": {
                    "name": string;
                };
                "headers": {
                    "name": string;
                };
                "queryString": {
                    "name": string;
                };
                "responses": {
                    "name": string;
                };
                "body": {
                    "name": string;
                };
                "protocols": {
                    "name": string;
                };
                "is": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
            };
        };
        "Method": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "queryParameters": {
                    "name": string;
                };
                "headers": {
                    "name": string;
                };
                "queryString": {
                    "name": string;
                };
                "responses": {
                    "name": string;
                };
                "body": {
                    "name": string;
                };
                "protocols": {
                    "name": string;
                };
                "is": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "method": {
                    "name": string;
                };
                "parametrizedProperties": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "Operation": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "queryParameters": {
                    "name": string;
                };
                "headers": {
                    "name": string;
                };
                "queryString": {
                    "name": string;
                };
                "responses": {
                    "name": string;
                };
            };
        };
        "SecuritySchemePart": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "queryParameters": {
                    "name": string;
                };
                "headers": {
                    "name": string;
                };
                "queryString": {
                    "name": string;
                };
                "responses": {
                    "name": string;
                };
            };
        };
        "SecuritySchemeSettings": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
            };
        };
        "OAuth1SecuritySchemeSettings": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "requestTokenUri": {
                    "name": string;
                };
                "authorizationUri": {
                    "name": string;
                };
                "tokenCredentialsUri": {
                    "name": string;
                };
                "signatures": {
                    "name": string;
                };
            };
        };
        "OAuth2SecuritySchemeSettings": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "accessTokenUri": {
                    "name": string;
                };
                "authorizationUri": {
                    "name": string;
                };
                "authorizationGrants": {
                    "name": string;
                };
                "scopes": {
                    "name": string;
                };
            };
        };
        "SecuritySchemeRef": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "securitySchemeName": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
                "securityScheme": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "AbstractSecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "OAuth2SecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "OAuth1SecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "PassThroughSecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "BasicSecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "DigestSecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "CustomSecurityScheme": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "describedBy": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "settings": {
                    "name": string;
                };
            };
        };
        "ResourceTypeRef": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "resourceType": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "ResourceType": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "methods": {
                    "name": string;
                };
                "is": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "uriParameters": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "usage": {
                    "name": string;
                };
                "parametrizedProperties": {
                    "name": string;
                    "range": string;
                    "domain": string;
                };
            };
        };
        "ResourceBase": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "methods": {
                    "name": string;
                };
                "is": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "uriParameters": {
                    "name": string;
                };
            };
        };
        "Resource": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "methods": {
                    "name": string;
                };
                "is": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "securedBy": {
                    "name": string;
                };
                "uriParameters": {
                    "name": string;
                };
                "relativeUri": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "resources": {
                    "name": string;
                };
            };
        };
        "FileTypeDeclaration": {
            "name": string;
            "properties": {
                "annotations": {
                    "name": string;
                };
                "name": {
                    "name": string;
                };
                "displayName": {
                    "name": string;
                };
                "facets": {
                    "name": string;
                };
                "schema": {
                    "name": string;
                };
                "type": {
                    "name": string;
                };
                "location": {
                    "name": string;
                };
                "locationKind": {
                    "name": string;
                };
                "default": {
                    "name": string;
                };
                "example": {
                    "name": string;
                };
                "examples": {
                    "name": string;
                };
                "repeat": {
                    "name": string;
                };
                "required": {
                    "name": string;
                };
                "description": {
                    "name": string;
                };
                "xml": {
                    "name": string;
                };
                "allowedTargets": {
                    "name": string;
                };
                "isAnnotation": {
                    "name": string;
                };
                "fileTypes": {
                    "name": string;
                };
                "minLength": {
                    "name": string;
                };
                "maxLength": {
                    "name": string;
                };
            };
        };
    };
};
/**
 * Exposed parser model modification methods. Operate on high-level.
 */
export import parser = require('~raml-1-parser/dist/parser');
/**
 * Applies traits and resources types to API on high-level.
 * Top-level expansion should be performed via calling expand() method of API node.
 */
export import expander = require('~raml-1-parser/dist/expanderStub');
/**
 * Exposed part of custom methods applied to top-level AST during generation.
 * Not to be used by parser clients.
 */
export import wrapperHelper = require('~raml-1-parser/dist/wrapperHelperStub');
/**
 * Abstract high-level node potentially having children.
 * @hidden
 **/
export type IHighLevelNode = hl.IHighLevelNode;
/**
 * Abstract high-level node property.
 * @hidden
 */
export type IProperty = hl.IProperty;
/**
 * The root of high-level node interface hierarchy.
 * @hidden
 **/
export type IParseResult = hl.IParseResult;
}
