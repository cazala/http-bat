// Generated by typings
// Source: node_modules/yaml-ast-parser/dist/exception.d.ts
declare module '~yaml-ast-parser/dist/exception' {
import Mark = require('~yaml-ast-parser/dist/mark');
class YAMLException {
    message: string;
    reason: string;
    name: string;
    mark: Mark;
    constructor(reason: string, mark?: Mark);
    toString(compact?: boolean): any;
}
export = YAMLException;
}
declare module 'yaml-ast-parser/dist/exception' {
import main = require('~yaml-ast-parser/dist/exception');
export = main;
}

// Generated by typings
// Source: node_modules/yaml-ast-parser/dist/yamlAST.d.ts
declare module '~yaml-ast-parser/dist/yamlAST' {
import YAMLException = require('~yaml-ast-parser/dist/exception');
export enum Kind {
    SCALAR = 0,
    MAPPING = 1,
    MAP = 2,
    SEQ = 3,
    ANCHOR_REF = 4,
    INCLUDE_REF = 5,
}
export interface YAMLDocument {
    startPosition: number;
    endPosition: number;
    errors: YAMLException[];
}
export interface YAMLNode extends YAMLDocument {
    startPosition: number;
    endPosition: number;
    kind: Kind;
    anchorId?: string;
    valueObject?: any;
    parent: YAMLNode;
    errors: YAMLException[];
    value?: any;
    key?: any;
    mappings?: any;
}
export interface YAMLAnchorReference extends YAMLNode {
    referencesAnchor: string;
    value: YAMLNode;
}
export interface YAMLScalar extends YAMLNode {
    value: string;
    doubleQuoted?: boolean;
    plainScalar?: boolean;
}
export interface YAMLMapping extends YAMLNode {
    key: YAMLScalar;
    value: YAMLNode;
}
export interface YAMLSequence extends YAMLNode {
    items: YAMLNode[];
}
export interface YamlMap extends YAMLNode {
    mappings: YAMLMapping[];
}
export function newMapping(key: YAMLScalar, value: YAMLNode): YAMLMapping;
export function newAnchorRef(key: string, start: number, end: number, value: YAMLNode): YAMLAnchorReference;
export function newScalar(v?: string): YAMLScalar;
export function newItems(): YAMLSequence;
export function newSeq(): YAMLSequence;
export function newMap(mappings?: YAMLMapping[]): YamlMap;
}
declare module 'yaml-ast-parser/dist/yamlAST' {
export * from '~yaml-ast-parser/dist/yamlAST';
}

// Generated by typings
// Source: node_modules/yaml-ast-parser/dist/loader.d.ts
declare module '~yaml-ast-parser/dist/loader' {
import ast = require('~yaml-ast-parser/dist/yamlAST');
export function loadAll(input: string, iterator: any, options: any): void;
export function load(input: string, options: any): ast.YAMLDocument;
export function safeLoadAll(input: string, output: any, options: any): void;
export function safeLoad(input: string, options: any): ast.YAMLDocument;
}
declare module 'yaml-ast-parser/dist/loader' {
export * from '~yaml-ast-parser/dist/loader';
}

// Generated by typings
// Source: node_modules/yaml-ast-parser/dist/dumper.d.ts
declare module '~yaml-ast-parser/dist/dumper' {
export function dump(input: any, options: any): string;
export function safeDump(input: any, options: any): string;
}
declare module 'yaml-ast-parser/dist/dumper' {
export * from '~yaml-ast-parser/dist/dumper';
}

// Generated by typings
// Source: node_modules/yaml-ast-parser/dist/mark.d.ts
declare module '~yaml-ast-parser/dist/mark' {
class Mark {
    name: string;
    buffer: string;
    position: number;
    line: number;
    column: number;
    constructor(name: string, buffer: string, position: number, line: number, column: number);
    filePath: string;
    getSnippet(indent?: number, maxLength?: number): string;
    toString(compact?: boolean): string;
}
export = Mark;
}
declare module 'yaml-ast-parser/dist/mark' {
import main = require('~yaml-ast-parser/dist/mark');
export = main;
}

// Generated by typings
// Source: node_modules/yaml-ast-parser/dist/index.d.ts
declare module 'yaml-ast-parser' {
import loader = require('~yaml-ast-parser/dist/loader');
import dumper = require('~yaml-ast-parser/dist/dumper');
import Mark = require('~yaml-ast-parser/dist/mark');
export class YAMLException {
    message: string;
    reason: string;
    name: string;
    mark: Mark;
    constructor(reason: string, mark?: Mark);
    toString(compact?: boolean): any;
}
export enum Kind {
    SCALAR = 0,
    MAPPING = 1,
    MAP = 2,
    SEQ = 3,
    ANCHOR_REF = 4,
    INCLUDE_REF = 5,
}
export type Error = YAMLException;
export interface YAMLDocument {
    startPosition: number;
    endPosition: number;
    errors: YAMLException[];
}
export interface YAMLNode extends YAMLDocument {
    startPosition: number;
    endPosition: number;
    kind: Kind;
    anchorId?: string;
    valueObject?: any;
    parent: YAMLNode;
    errors: YAMLException[];
    value?: any;
    key?: any;
    mappings?: any;
}
export interface YAMLAnchorReference extends YAMLNode {
    referencesAnchor: string;
    value: YAMLNode;
}
export interface YAMLScalar extends YAMLNode {
    value: string;
    doubleQuoted?: boolean;
    plainScalar?: boolean;
}
export interface YAMLMapping extends YAMLNode {
    key: YAMLScalar;
    value: YAMLNode;
}
export interface YAMLSequence extends YAMLNode {
    items: YAMLNode[];
}
export interface YamlMap extends YAMLNode {
    mappings: YAMLMapping[];
}
export function newMapping(key: YAMLScalar, value: YAMLNode): YAMLMapping;
export function newAnchorRef(key: string, start: number, end: number, value: YAMLNode): YAMLAnchorReference;
export function newScalar(v?: string): YAMLScalar;
export function newItems(): YAMLSequence;
export function newSeq(): YAMLSequence;
export function newMap(mappings?: YAMLMapping[]): YamlMap;
export var load: typeof loader.load;
export var loadAll: typeof loader.loadAll;
export var safeLoad: typeof loader.safeLoad;
export var dump: typeof dumper.dump;
export var safeDump: typeof dumper.safeDump;
}
