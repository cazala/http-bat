#%ATL 1.0
baseUri: http://localhost:4567
raml: example.raml

variables:
  kvo-list:
    - asd: 1
    - asd: 1
    - asd: 2
    - obj:
        test: string
        bool: false
  list:
    - test
    - test2
  test: !include test.json
  oauth:
    accessToken: "EMPTY_VALUE"
    test: !include test.json
  ENV:
    NODE_ENV: FAKE_ENV
    PORT: 0
  number_201: 201
  json: !include test.json

options:
  selfSignedCert: true
  raml:
    coverage: true

schemas:
  test_schema: !include valid.schema.json

tests:
  "Test 404 error":
    GET /asjdnasjdnkasf:
      response:
        status: 404

  "Another":
    GET /hello?name=ERROR:
      description: Override query parameters
      queryParameters:
        name: agusA
      response:
        status: 200
        body:
          is: "Hello agusA!"

    GET /hello?a:
      queryParameters:
        name: agusA
      response:
        status: 200
        body:
          is: "Hello agusA!"

    GET /hello:
      queryParameters:
        name: agusA
      response:
        status: 200
        body:
          is: "Hello agusA!"

  "Test with global uriParameter":
    GET /status/{number_201}:
      response:
        status: 201
        body:
         is: "Success"

  "Another tests 1":
    GET /status/200:
      response:
        status: 200
        body:
         is: "Success"

    POST /status/{status}:
      uriParameters:
        status: 200
      headers:
        content-type: application/json
      response:
        status: 200
        body:
         is: "Success"

    GET /hello:
      response:
        status: 200
        body:
          is: "Hello World!"



    GET /hello?name=agus:
      response:
        status: 200
        body:
          is: "Hello agus!"



  "Headers":
    PUT /bounce/headers:
      headers:
        Authorization: test
      response:
        headers:
          Access-Control-Allow-Headers: "Authorization, X-Default-Header, X-Custom-Header"
        body:
          matches:
            - authorization: test
        status: 200

  "Skipped test":
    async: true
    skip: true
    GET /:
      response:
        status: 223

  "Text Response":
    async: true
    GET /responses/text:
      response:
        status: 200
        body:
          is: 'text'

  "JSON Response":
    async: true
    GET /responses/json:
      response:
        status: 200
        body:
          is: !!map { json: true }

  "JSON Response (From include variable)":
    async: true
    GET /responses/json:
      response:
        status: 200
        body:
          is: !!variable json

  "JSON Response with schema":
    GET /responses/json:
      response:
        status: 200
        body:
          schema: test_schema


  "Skipped suite":
    skip: true
    GET /:
      response:
        status: 223

  "Skipped test 3":
    GET /:
      skip: true
      response:
        status: 223
    GET /responses/json:
      response:
        status: 200
        body:
          is: !!map { json: true }


  "Text Response after skipped":
    async: true
    GET /responses/text:
      response:
        status: 200
        body:
          is: 'text'



  "JSON Response after skipped":
    async: true
    GET /responses/json:
      response:
        status: 200
        body:
          is: !!map { json: true }




  "Regexp body":
    GET /stream:
      response:
        status: 200
        # body:
          # is: !!js/regexp /^Lorem/



  "Url encoded responses":
    GET /responses/url-encoded/basic:
      response:
        status: 200
        content-type: application/x-www-form-urlencoded
        body:
          is:
            key: value



    GET /responses/url-encoded/duplicate:
      response:
        status: 200
        content-type: application/x-www-form-urlencoded
        body:
          is:
            key: [ "1", "2", "3" ]



    GET /responses/url-encoded/escaped:
      response:
        status: 200
        content-type: application/x-www-form-urlencoded
        body:
          is:
            key: "Hello, world!"



  "Post tests":
    POST /post-body/json:
      request:
        json: &ref_value_json
          string: "value"
          number: 123
      response:
        status: 200
        body:
          is: *ref_value_json



    POST /post-body/attach-file:
      request:
        attach:
          - file: 'lorem.txt'
      response:
        status: 200
        body:
          is:
            - file: lorem.txt



    POST /post-body/attach-file?multiple:
      request:
        attach:
          - file: 'lorem.txt'
          - file: 'lorem.txt'
          - "file-otherName": 'lorem.txt'
      response:
        status: 200
        body:
          is:
            - file: 'lorem.txt'
            - file: 'lorem.txt'
            - "file-otherName": 'lorem.txt'



    POST /post-body/url:
      request:
        urlencoded: &form-data-1
          - name: 'agustin'
          - name: 'agustin'
          - another: "123"
      response:
        status: 200
        body:
          is:
            name:
              - agustin
              - agustin
            another: "123"



    POST /post-body/form:
      request:
        form: &form-data-2
          - name: 'agustin'
          - name: 'agustin'
          - another: 123string
      response:
        status: 200
        body:
          print: true
          is:
            - name: agustin
            - name: agustin
            - another: 123string


    POST /post-body/form-n-files:
      request:
        attach:
          - file: 'lorem.txt'
        form:
          - name: 'agustin'
          - name: 'agustin'
          - another: 123string
      response:
        status: 200
        print: true
        body:
          is:
            - file: "lorem.txt"
            - name: 'agustin'
            - name: 'agustin'
            - another: 123string

  "Access control by token":
    async: true
    GET /secured_by_token#should-be-unauthorized:
      queryParameters:
        accessToken: !!variable oauth.accessToken
      response:
        status: 401

    GET /secured_by_token/header#should-be-unauthorized:
      headers:
        Authorization: !!variable oauth.accessToken
      response:
        status: 401



    POST /get_access_token:
      # responses { new_token: "asd" }
      response:
        body:
          take: # take a value from body
            - new_token: !!variable oauth.accessToken


    GET /secured_by_token:
      queryParameters:
        accessToken: !!variable oauth.accessToken
      response:
        status: 200
        body:
          is:
            success: true


    GET /secured_by_token/header:
      headers:
        Authorization: !!variable oauth.accessToken
      response:
        status: 200
        body:
          is:
            success: true

    POST /get_access_token#whole:
      response:
        body:
          take: !!variable new_auth

    GET /secured_by_token/header#new_token:
      headers:
        Authorization: !!variable new_auth.new_token
      response:
        status: 200
        body:
          is:
            success: true

  "Uri parameters":
    GET /users:
      response:
        status: 200
        body:
          take:
            - "[1]": !!variable second_user
          #matches:
          #  - "[0].id": !!js/regexp ([0-9]+)

    GET /users/{id}:
      description: Get an user by ID
      uriParameters:
        id: !!variable second_user.id
      response:
        status: 200
        body:
          matches:
            - id: !!variable second_user.id
            - name: !!variable second_user.name

    GET /users#FirstUserThisTime:
      response:
        status: 200
        body:
          take:
            - "[0]": !!variable first_user

    GET /users/{user_id}:
      uriParameters:
        user_id: !!variable first_user.id
      response:
        status: 200
        body:
          matches:
            - id: !!variable first_user.id
            - name: !!variable first_user.name

  "Testing RAML urls":
    GET /:
      response:
        status: 200

    GET /#with-query-parameter:
      queryParameters:
        count: 10
      response:
        status: 200

    GET /a/1/b/2:
      response:
        status: 404

    GET /a/1/b/2?:
      response:
        status: 404

    GET /a/1/b/2#:
      response:
        status: 404

    GET /defaults/headers:
      response:
        status: 200

    GET /bounce/parameter/{variable}:
      uriParameters:
        variable: 123
      response:
        status: 200

    GET /parameters/prefix/one123:
      response:
        status: 200

    GET /defaults/parameter/{variable}:
      uriParameters:
        variable: 123
      response:
        status: 200

    GET /parameters/prefix/three123123asda123:
      response:
        status: 200


    GET /parameters/single/1:
      response:
        status: 200

    GET /extensions/static.json:
      response:
        status: 200

    GET /conflicts/media-type.json:
      response:
        status: 200

    GET /extensions/media-type/enum.xml:
      response:
        status: 200

    GET /extensions/media-type/enum-period.xml:
      response:
        status: 200

    GET /extensions/media-type/enum-period.json:
      response:
        status: 200



    GET /extensions/media-type/basic.json:
      response:
        status: 200

    GET /conflicts/media-type/route:
      response:
        status: 200