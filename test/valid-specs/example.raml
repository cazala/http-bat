#%RAML 0.8
---
title: Example API
version: 1.0
baseUri: http://localhost:{port}

documentation:
  - title: About
    content: |
      This API documents the example server that can be used during tests.

baseUriParameters:
  port:
    type: integer
    minimum: 1024
    maximum: 65535
    default: 4567

securitySchemes:
  - oauth_2_0:
      type: OAuth 2.0
      describedBy:
        headers:
          Authorization:
            description: |
              Used to send a valid OAuth 2 access token. Do not use together with
              the "access_token" query string parameter.
        queryParameters:
          access_token:
            description: |
              Used to send a valid OAuth 2 access token. Do not use together with
              the "Authorization" header
        responses:
          401:
            description: Unauthorized
      settings:
        authorizationUri: https://localhost:4567/auth/oauth2/authorize
        accessTokenUri: https://localhost:4567/auth/oauth2/access_token
        authorizationGrants: [ code, token, owner, credentials ]
        scopes: [ user ]

traits:
  - success:
      responses:
        200:
          body:
            "text/html":
              example: Success
  - name:
      description: |
        Respond by saying "Hello" back to the user.
      queryParameters:
        name:
          type: string
          default: World
        a:
          type: integer
          required: false
  - helloWorld:
      responses:
        200:
          body:
            "text/html":
              example: |
                Hello World!

resourceTypes:
  - methods:
      description: Implements all RESTful request verbs.
      get:
  - testQP:
      description: Implements query parameters
      get:
        queryParameters:
          count:
            type: integer
            required: false

# Handle the root resource.
/:
  type: testQP
  get:
    is: [ success ]
    description: |
      Make a request against the root resource.

# Stream a file to the user.
/stream:
  get:
    description: |
      Responds with a stream of lorem ipsum text.
    responses:
      200:
        body:
          "text/html":
             example: Lorem ipsum...

# Respond with a status code and "Success".
/status/{statusCode}:
  uriParameters:
    statusCode:
      type: integer
      minimum: 100
      maximum: 599
  get:
    is: [ success ]
    description: |
      Responds to a GET request with the status code given on the path.
  post:
    is: [ success ]
    description: |
      Responds to a POST request by bouncing the request body back to the
      user, using the status code given on the path.

# Say hello.
/hello:
  get:
    queryParameters:
      name:
        type: string
    is: [ name, helloWorld ]

# Bounce request parameters.
/bounce: !include included.yml


/a:
  /{a}:
    /b:
      /{b}:
        get:

# Set defaults.
/defaults:
  /headers:
    type: methods
    get:
      headers:
        X-Default-Header:
          type: string
          default: Hello World!
  /parameter:
    /{variable}:
      type: methods
      uriParameters:
        variable:
          type: string
          default: default

# Handle uri parameters.
/parameters:
  /single:
    /{id}:
      type: methods
  /prefix:
    /one{id}:
      type: methods
    /three{a}{b}{c}:
      type: methods

# Handle extensions.
/extensions:
  /static.json:
    type: methods
  /media-type:
    /enum{mediaTypeExtension}:
      uriParameters:
        mediaTypeExtension:
          enum: [json, xml]
      type: methods
    /enum-period{mediaTypeExtension}:
      uriParameters:
        mediaTypeExtension:
          enum: [.json, .xml]
      type: methods
    /basic{mediaTypeExtension}:
      type: methods

# Handle conflicting routes.
/conflicts:
  /media-type:
    /route:
      type: methods
  /media-type{mediaTypeExtension}:
    type: methods

/responses:
  /text:
    type: methods
  /json:
    type: methods
    get:
      responses:
        200:
          body:
            application/json:
              schema: |
                {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "json": {
                      "type": "boolean"
                    }
                  },
                  "required": [
                    "json"
                  ]
                }
  /url-encoded:
    /basic:
      type: methods
    /duplicate:
      type: methods
    /escaped:
      type: methods
